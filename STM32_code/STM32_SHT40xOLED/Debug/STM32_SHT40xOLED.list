
STM32_SHT40xOLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002850  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e18  08007e18  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007e18  08007e18  00009064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007e18  08007e18  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e18  08007e18  00008e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e1c  08007e1c  00008e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007e20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000064  08007e84  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08007e84  00009684  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca65  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002938  00000000  00000000  00015af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00018430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016345  00000000  00000000  000199c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001135c  00000000  00000000  0002fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b1d  00000000  00000000  00041068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5b85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd8  00000000  00000000  000c5bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c8ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000064 	.word	0x20000064
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080055b0 	.word	0x080055b0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000068 	.word	0x20000068
 80000fc:	080055b0 	.word	0x080055b0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <__aeabi_fdiv>:
 800022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022e:	4646      	mov	r6, r8
 8000230:	464f      	mov	r7, r9
 8000232:	46d6      	mov	lr, sl
 8000234:	0245      	lsls	r5, r0, #9
 8000236:	b5c0      	push	{r6, r7, lr}
 8000238:	0fc3      	lsrs	r3, r0, #31
 800023a:	0047      	lsls	r7, r0, #1
 800023c:	4698      	mov	r8, r3
 800023e:	1c0e      	adds	r6, r1, #0
 8000240:	0a6d      	lsrs	r5, r5, #9
 8000242:	0e3f      	lsrs	r7, r7, #24
 8000244:	d05b      	beq.n	80002fe <__aeabi_fdiv+0xd2>
 8000246:	2fff      	cmp	r7, #255	@ 0xff
 8000248:	d021      	beq.n	800028e <__aeabi_fdiv+0x62>
 800024a:	2380      	movs	r3, #128	@ 0x80
 800024c:	00ed      	lsls	r5, r5, #3
 800024e:	04db      	lsls	r3, r3, #19
 8000250:	431d      	orrs	r5, r3
 8000252:	2300      	movs	r3, #0
 8000254:	4699      	mov	r9, r3
 8000256:	469a      	mov	sl, r3
 8000258:	3f7f      	subs	r7, #127	@ 0x7f
 800025a:	0274      	lsls	r4, r6, #9
 800025c:	0073      	lsls	r3, r6, #1
 800025e:	0a64      	lsrs	r4, r4, #9
 8000260:	0e1b      	lsrs	r3, r3, #24
 8000262:	0ff6      	lsrs	r6, r6, #31
 8000264:	2b00      	cmp	r3, #0
 8000266:	d020      	beq.n	80002aa <__aeabi_fdiv+0x7e>
 8000268:	2bff      	cmp	r3, #255	@ 0xff
 800026a:	d043      	beq.n	80002f4 <__aeabi_fdiv+0xc8>
 800026c:	2280      	movs	r2, #128	@ 0x80
 800026e:	2000      	movs	r0, #0
 8000270:	00e4      	lsls	r4, r4, #3
 8000272:	04d2      	lsls	r2, r2, #19
 8000274:	4314      	orrs	r4, r2
 8000276:	3b7f      	subs	r3, #127	@ 0x7f
 8000278:	4642      	mov	r2, r8
 800027a:	1aff      	subs	r7, r7, r3
 800027c:	464b      	mov	r3, r9
 800027e:	4072      	eors	r2, r6
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d900      	bls.n	8000286 <__aeabi_fdiv+0x5a>
 8000284:	e09d      	b.n	80003c2 <__aeabi_fdiv+0x196>
 8000286:	4971      	ldr	r1, [pc, #452]	@ (800044c <__aeabi_fdiv+0x220>)
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	58cb      	ldr	r3, [r1, r3]
 800028c:	469f      	mov	pc, r3
 800028e:	2d00      	cmp	r5, #0
 8000290:	d15a      	bne.n	8000348 <__aeabi_fdiv+0x11c>
 8000292:	2308      	movs	r3, #8
 8000294:	4699      	mov	r9, r3
 8000296:	3b06      	subs	r3, #6
 8000298:	0274      	lsls	r4, r6, #9
 800029a:	469a      	mov	sl, r3
 800029c:	0073      	lsls	r3, r6, #1
 800029e:	27ff      	movs	r7, #255	@ 0xff
 80002a0:	0a64      	lsrs	r4, r4, #9
 80002a2:	0e1b      	lsrs	r3, r3, #24
 80002a4:	0ff6      	lsrs	r6, r6, #31
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1de      	bne.n	8000268 <__aeabi_fdiv+0x3c>
 80002aa:	2c00      	cmp	r4, #0
 80002ac:	d13b      	bne.n	8000326 <__aeabi_fdiv+0xfa>
 80002ae:	2301      	movs	r3, #1
 80002b0:	4642      	mov	r2, r8
 80002b2:	4649      	mov	r1, r9
 80002b4:	4072      	eors	r2, r6
 80002b6:	4319      	orrs	r1, r3
 80002b8:	290e      	cmp	r1, #14
 80002ba:	d818      	bhi.n	80002ee <__aeabi_fdiv+0xc2>
 80002bc:	4864      	ldr	r0, [pc, #400]	@ (8000450 <__aeabi_fdiv+0x224>)
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	5841      	ldr	r1, [r0, r1]
 80002c2:	468f      	mov	pc, r1
 80002c4:	4653      	mov	r3, sl
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d100      	bne.n	80002cc <__aeabi_fdiv+0xa0>
 80002ca:	e0b8      	b.n	800043e <__aeabi_fdiv+0x212>
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	d06e      	beq.n	80003ae <__aeabi_fdiv+0x182>
 80002d0:	4642      	mov	r2, r8
 80002d2:	002c      	movs	r4, r5
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d140      	bne.n	800035a <__aeabi_fdiv+0x12e>
 80002d8:	2000      	movs	r0, #0
 80002da:	2400      	movs	r4, #0
 80002dc:	05c0      	lsls	r0, r0, #23
 80002de:	4320      	orrs	r0, r4
 80002e0:	07d2      	lsls	r2, r2, #31
 80002e2:	4310      	orrs	r0, r2
 80002e4:	bce0      	pop	{r5, r6, r7}
 80002e6:	46ba      	mov	sl, r7
 80002e8:	46b1      	mov	r9, r6
 80002ea:	46a8      	mov	r8, r5
 80002ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ee:	20ff      	movs	r0, #255	@ 0xff
 80002f0:	2400      	movs	r4, #0
 80002f2:	e7f3      	b.n	80002dc <__aeabi_fdiv+0xb0>
 80002f4:	2c00      	cmp	r4, #0
 80002f6:	d120      	bne.n	800033a <__aeabi_fdiv+0x10e>
 80002f8:	2302      	movs	r3, #2
 80002fa:	3fff      	subs	r7, #255	@ 0xff
 80002fc:	e7d8      	b.n	80002b0 <__aeabi_fdiv+0x84>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d105      	bne.n	800030e <__aeabi_fdiv+0xe2>
 8000302:	2304      	movs	r3, #4
 8000304:	4699      	mov	r9, r3
 8000306:	3b03      	subs	r3, #3
 8000308:	2700      	movs	r7, #0
 800030a:	469a      	mov	sl, r3
 800030c:	e7a5      	b.n	800025a <__aeabi_fdiv+0x2e>
 800030e:	0028      	movs	r0, r5
 8000310:	f000 fcd0 	bl	8000cb4 <__clzsi2>
 8000314:	2776      	movs	r7, #118	@ 0x76
 8000316:	1f43      	subs	r3, r0, #5
 8000318:	409d      	lsls	r5, r3
 800031a:	2300      	movs	r3, #0
 800031c:	427f      	negs	r7, r7
 800031e:	4699      	mov	r9, r3
 8000320:	469a      	mov	sl, r3
 8000322:	1a3f      	subs	r7, r7, r0
 8000324:	e799      	b.n	800025a <__aeabi_fdiv+0x2e>
 8000326:	0020      	movs	r0, r4
 8000328:	f000 fcc4 	bl	8000cb4 <__clzsi2>
 800032c:	1f43      	subs	r3, r0, #5
 800032e:	409c      	lsls	r4, r3
 8000330:	2376      	movs	r3, #118	@ 0x76
 8000332:	425b      	negs	r3, r3
 8000334:	1a1b      	subs	r3, r3, r0
 8000336:	2000      	movs	r0, #0
 8000338:	e79e      	b.n	8000278 <__aeabi_fdiv+0x4c>
 800033a:	2303      	movs	r3, #3
 800033c:	464a      	mov	r2, r9
 800033e:	431a      	orrs	r2, r3
 8000340:	4691      	mov	r9, r2
 8000342:	2003      	movs	r0, #3
 8000344:	33fc      	adds	r3, #252	@ 0xfc
 8000346:	e797      	b.n	8000278 <__aeabi_fdiv+0x4c>
 8000348:	230c      	movs	r3, #12
 800034a:	4699      	mov	r9, r3
 800034c:	3b09      	subs	r3, #9
 800034e:	27ff      	movs	r7, #255	@ 0xff
 8000350:	469a      	mov	sl, r3
 8000352:	e782      	b.n	800025a <__aeabi_fdiv+0x2e>
 8000354:	2803      	cmp	r0, #3
 8000356:	d02c      	beq.n	80003b2 <__aeabi_fdiv+0x186>
 8000358:	0032      	movs	r2, r6
 800035a:	0038      	movs	r0, r7
 800035c:	307f      	adds	r0, #127	@ 0x7f
 800035e:	2800      	cmp	r0, #0
 8000360:	dd47      	ble.n	80003f2 <__aeabi_fdiv+0x1c6>
 8000362:	0763      	lsls	r3, r4, #29
 8000364:	d004      	beq.n	8000370 <__aeabi_fdiv+0x144>
 8000366:	230f      	movs	r3, #15
 8000368:	4023      	ands	r3, r4
 800036a:	2b04      	cmp	r3, #4
 800036c:	d000      	beq.n	8000370 <__aeabi_fdiv+0x144>
 800036e:	3404      	adds	r4, #4
 8000370:	0123      	lsls	r3, r4, #4
 8000372:	d503      	bpl.n	800037c <__aeabi_fdiv+0x150>
 8000374:	0038      	movs	r0, r7
 8000376:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <__aeabi_fdiv+0x228>)
 8000378:	3080      	adds	r0, #128	@ 0x80
 800037a:	401c      	ands	r4, r3
 800037c:	28fe      	cmp	r0, #254	@ 0xfe
 800037e:	dcb6      	bgt.n	80002ee <__aeabi_fdiv+0xc2>
 8000380:	01a4      	lsls	r4, r4, #6
 8000382:	0a64      	lsrs	r4, r4, #9
 8000384:	b2c0      	uxtb	r0, r0
 8000386:	e7a9      	b.n	80002dc <__aeabi_fdiv+0xb0>
 8000388:	2480      	movs	r4, #128	@ 0x80
 800038a:	2200      	movs	r2, #0
 800038c:	20ff      	movs	r0, #255	@ 0xff
 800038e:	03e4      	lsls	r4, r4, #15
 8000390:	e7a4      	b.n	80002dc <__aeabi_fdiv+0xb0>
 8000392:	2380      	movs	r3, #128	@ 0x80
 8000394:	03db      	lsls	r3, r3, #15
 8000396:	421d      	tst	r5, r3
 8000398:	d001      	beq.n	800039e <__aeabi_fdiv+0x172>
 800039a:	421c      	tst	r4, r3
 800039c:	d00b      	beq.n	80003b6 <__aeabi_fdiv+0x18a>
 800039e:	2480      	movs	r4, #128	@ 0x80
 80003a0:	03e4      	lsls	r4, r4, #15
 80003a2:	432c      	orrs	r4, r5
 80003a4:	0264      	lsls	r4, r4, #9
 80003a6:	4642      	mov	r2, r8
 80003a8:	20ff      	movs	r0, #255	@ 0xff
 80003aa:	0a64      	lsrs	r4, r4, #9
 80003ac:	e796      	b.n	80002dc <__aeabi_fdiv+0xb0>
 80003ae:	4646      	mov	r6, r8
 80003b0:	002c      	movs	r4, r5
 80003b2:	2380      	movs	r3, #128	@ 0x80
 80003b4:	03db      	lsls	r3, r3, #15
 80003b6:	431c      	orrs	r4, r3
 80003b8:	0264      	lsls	r4, r4, #9
 80003ba:	0032      	movs	r2, r6
 80003bc:	20ff      	movs	r0, #255	@ 0xff
 80003be:	0a64      	lsrs	r4, r4, #9
 80003c0:	e78c      	b.n	80002dc <__aeabi_fdiv+0xb0>
 80003c2:	016d      	lsls	r5, r5, #5
 80003c4:	0160      	lsls	r0, r4, #5
 80003c6:	4285      	cmp	r5, r0
 80003c8:	d22d      	bcs.n	8000426 <__aeabi_fdiv+0x1fa>
 80003ca:	231b      	movs	r3, #27
 80003cc:	2400      	movs	r4, #0
 80003ce:	3f01      	subs	r7, #1
 80003d0:	2601      	movs	r6, #1
 80003d2:	0029      	movs	r1, r5
 80003d4:	0064      	lsls	r4, r4, #1
 80003d6:	006d      	lsls	r5, r5, #1
 80003d8:	2900      	cmp	r1, #0
 80003da:	db01      	blt.n	80003e0 <__aeabi_fdiv+0x1b4>
 80003dc:	4285      	cmp	r5, r0
 80003de:	d301      	bcc.n	80003e4 <__aeabi_fdiv+0x1b8>
 80003e0:	1a2d      	subs	r5, r5, r0
 80003e2:	4334      	orrs	r4, r6
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f3      	bne.n	80003d2 <__aeabi_fdiv+0x1a6>
 80003ea:	1e6b      	subs	r3, r5, #1
 80003ec:	419d      	sbcs	r5, r3
 80003ee:	432c      	orrs	r4, r5
 80003f0:	e7b3      	b.n	800035a <__aeabi_fdiv+0x12e>
 80003f2:	2301      	movs	r3, #1
 80003f4:	1a1b      	subs	r3, r3, r0
 80003f6:	2b1b      	cmp	r3, #27
 80003f8:	dd00      	ble.n	80003fc <__aeabi_fdiv+0x1d0>
 80003fa:	e76d      	b.n	80002d8 <__aeabi_fdiv+0xac>
 80003fc:	0021      	movs	r1, r4
 80003fe:	379e      	adds	r7, #158	@ 0x9e
 8000400:	40d9      	lsrs	r1, r3
 8000402:	40bc      	lsls	r4, r7
 8000404:	000b      	movs	r3, r1
 8000406:	1e61      	subs	r1, r4, #1
 8000408:	418c      	sbcs	r4, r1
 800040a:	4323      	orrs	r3, r4
 800040c:	0759      	lsls	r1, r3, #29
 800040e:	d004      	beq.n	800041a <__aeabi_fdiv+0x1ee>
 8000410:	210f      	movs	r1, #15
 8000412:	4019      	ands	r1, r3
 8000414:	2904      	cmp	r1, #4
 8000416:	d000      	beq.n	800041a <__aeabi_fdiv+0x1ee>
 8000418:	3304      	adds	r3, #4
 800041a:	0159      	lsls	r1, r3, #5
 800041c:	d413      	bmi.n	8000446 <__aeabi_fdiv+0x21a>
 800041e:	019b      	lsls	r3, r3, #6
 8000420:	2000      	movs	r0, #0
 8000422:	0a5c      	lsrs	r4, r3, #9
 8000424:	e75a      	b.n	80002dc <__aeabi_fdiv+0xb0>
 8000426:	231a      	movs	r3, #26
 8000428:	2401      	movs	r4, #1
 800042a:	1a2d      	subs	r5, r5, r0
 800042c:	e7d0      	b.n	80003d0 <__aeabi_fdiv+0x1a4>
 800042e:	1e98      	subs	r0, r3, #2
 8000430:	4243      	negs	r3, r0
 8000432:	4158      	adcs	r0, r3
 8000434:	4240      	negs	r0, r0
 8000436:	0032      	movs	r2, r6
 8000438:	2400      	movs	r4, #0
 800043a:	b2c0      	uxtb	r0, r0
 800043c:	e74e      	b.n	80002dc <__aeabi_fdiv+0xb0>
 800043e:	4642      	mov	r2, r8
 8000440:	20ff      	movs	r0, #255	@ 0xff
 8000442:	2400      	movs	r4, #0
 8000444:	e74a      	b.n	80002dc <__aeabi_fdiv+0xb0>
 8000446:	2001      	movs	r0, #1
 8000448:	2400      	movs	r4, #0
 800044a:	e747      	b.n	80002dc <__aeabi_fdiv+0xb0>
 800044c:	0800564c 	.word	0x0800564c
 8000450:	0800568c 	.word	0x0800568c
 8000454:	f7ffffff 	.word	0xf7ffffff

08000458 <__aeabi_fmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	464f      	mov	r7, r9
 800045c:	4646      	mov	r6, r8
 800045e:	46d6      	mov	lr, sl
 8000460:	0044      	lsls	r4, r0, #1
 8000462:	b5c0      	push	{r6, r7, lr}
 8000464:	0246      	lsls	r6, r0, #9
 8000466:	1c0f      	adds	r7, r1, #0
 8000468:	0a76      	lsrs	r6, r6, #9
 800046a:	0e24      	lsrs	r4, r4, #24
 800046c:	0fc5      	lsrs	r5, r0, #31
 800046e:	2c00      	cmp	r4, #0
 8000470:	d100      	bne.n	8000474 <__aeabi_fmul+0x1c>
 8000472:	e0da      	b.n	800062a <__aeabi_fmul+0x1d2>
 8000474:	2cff      	cmp	r4, #255	@ 0xff
 8000476:	d074      	beq.n	8000562 <__aeabi_fmul+0x10a>
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	00f6      	lsls	r6, r6, #3
 800047c:	04db      	lsls	r3, r3, #19
 800047e:	431e      	orrs	r6, r3
 8000480:	2300      	movs	r3, #0
 8000482:	4699      	mov	r9, r3
 8000484:	469a      	mov	sl, r3
 8000486:	3c7f      	subs	r4, #127	@ 0x7f
 8000488:	027b      	lsls	r3, r7, #9
 800048a:	0a5b      	lsrs	r3, r3, #9
 800048c:	4698      	mov	r8, r3
 800048e:	007b      	lsls	r3, r7, #1
 8000490:	0e1b      	lsrs	r3, r3, #24
 8000492:	0fff      	lsrs	r7, r7, #31
 8000494:	2b00      	cmp	r3, #0
 8000496:	d074      	beq.n	8000582 <__aeabi_fmul+0x12a>
 8000498:	2bff      	cmp	r3, #255	@ 0xff
 800049a:	d100      	bne.n	800049e <__aeabi_fmul+0x46>
 800049c:	e08e      	b.n	80005bc <__aeabi_fmul+0x164>
 800049e:	4642      	mov	r2, r8
 80004a0:	2180      	movs	r1, #128	@ 0x80
 80004a2:	00d2      	lsls	r2, r2, #3
 80004a4:	04c9      	lsls	r1, r1, #19
 80004a6:	4311      	orrs	r1, r2
 80004a8:	3b7f      	subs	r3, #127	@ 0x7f
 80004aa:	002a      	movs	r2, r5
 80004ac:	18e4      	adds	r4, r4, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	407a      	eors	r2, r7
 80004b2:	4688      	mov	r8, r1
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	2b0a      	cmp	r3, #10
 80004b8:	dc75      	bgt.n	80005a6 <__aeabi_fmul+0x14e>
 80004ba:	464b      	mov	r3, r9
 80004bc:	2000      	movs	r0, #0
 80004be:	2b02      	cmp	r3, #2
 80004c0:	dd0f      	ble.n	80004e2 <__aeabi_fmul+0x8a>
 80004c2:	4649      	mov	r1, r9
 80004c4:	2301      	movs	r3, #1
 80004c6:	408b      	lsls	r3, r1
 80004c8:	21a6      	movs	r1, #166	@ 0xa6
 80004ca:	00c9      	lsls	r1, r1, #3
 80004cc:	420b      	tst	r3, r1
 80004ce:	d169      	bne.n	80005a4 <__aeabi_fmul+0x14c>
 80004d0:	2190      	movs	r1, #144	@ 0x90
 80004d2:	0089      	lsls	r1, r1, #2
 80004d4:	420b      	tst	r3, r1
 80004d6:	d000      	beq.n	80004da <__aeabi_fmul+0x82>
 80004d8:	e100      	b.n	80006dc <__aeabi_fmul+0x284>
 80004da:	2188      	movs	r1, #136	@ 0x88
 80004dc:	4219      	tst	r1, r3
 80004de:	d000      	beq.n	80004e2 <__aeabi_fmul+0x8a>
 80004e0:	e0f5      	b.n	80006ce <__aeabi_fmul+0x276>
 80004e2:	4641      	mov	r1, r8
 80004e4:	0409      	lsls	r1, r1, #16
 80004e6:	0c09      	lsrs	r1, r1, #16
 80004e8:	4643      	mov	r3, r8
 80004ea:	0008      	movs	r0, r1
 80004ec:	0c35      	lsrs	r5, r6, #16
 80004ee:	0436      	lsls	r6, r6, #16
 80004f0:	0c1b      	lsrs	r3, r3, #16
 80004f2:	0c36      	lsrs	r6, r6, #16
 80004f4:	4370      	muls	r0, r6
 80004f6:	4369      	muls	r1, r5
 80004f8:	435e      	muls	r6, r3
 80004fa:	435d      	muls	r5, r3
 80004fc:	1876      	adds	r6, r6, r1
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	199b      	adds	r3, r3, r6
 8000502:	4299      	cmp	r1, r3
 8000504:	d903      	bls.n	800050e <__aeabi_fmul+0xb6>
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	468c      	mov	ip, r1
 800050c:	4465      	add	r5, ip
 800050e:	0400      	lsls	r0, r0, #16
 8000510:	0419      	lsls	r1, r3, #16
 8000512:	0c00      	lsrs	r0, r0, #16
 8000514:	1809      	adds	r1, r1, r0
 8000516:	018e      	lsls	r6, r1, #6
 8000518:	1e70      	subs	r0, r6, #1
 800051a:	4186      	sbcs	r6, r0
 800051c:	0c1b      	lsrs	r3, r3, #16
 800051e:	0e89      	lsrs	r1, r1, #26
 8000520:	195b      	adds	r3, r3, r5
 8000522:	430e      	orrs	r6, r1
 8000524:	019b      	lsls	r3, r3, #6
 8000526:	431e      	orrs	r6, r3
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	d46c      	bmi.n	8000606 <__aeabi_fmul+0x1ae>
 800052c:	0023      	movs	r3, r4
 800052e:	337f      	adds	r3, #127	@ 0x7f
 8000530:	2b00      	cmp	r3, #0
 8000532:	dc00      	bgt.n	8000536 <__aeabi_fmul+0xde>
 8000534:	e0b1      	b.n	800069a <__aeabi_fmul+0x242>
 8000536:	0015      	movs	r5, r2
 8000538:	0771      	lsls	r1, r6, #29
 800053a:	d00b      	beq.n	8000554 <__aeabi_fmul+0xfc>
 800053c:	200f      	movs	r0, #15
 800053e:	0021      	movs	r1, r4
 8000540:	4030      	ands	r0, r6
 8000542:	2804      	cmp	r0, #4
 8000544:	d006      	beq.n	8000554 <__aeabi_fmul+0xfc>
 8000546:	3604      	adds	r6, #4
 8000548:	0132      	lsls	r2, r6, #4
 800054a:	d503      	bpl.n	8000554 <__aeabi_fmul+0xfc>
 800054c:	4b6e      	ldr	r3, [pc, #440]	@ (8000708 <__aeabi_fmul+0x2b0>)
 800054e:	401e      	ands	r6, r3
 8000550:	000b      	movs	r3, r1
 8000552:	3380      	adds	r3, #128	@ 0x80
 8000554:	2bfe      	cmp	r3, #254	@ 0xfe
 8000556:	dd00      	ble.n	800055a <__aeabi_fmul+0x102>
 8000558:	e0bd      	b.n	80006d6 <__aeabi_fmul+0x27e>
 800055a:	01b2      	lsls	r2, r6, #6
 800055c:	0a52      	lsrs	r2, r2, #9
 800055e:	b2db      	uxtb	r3, r3
 8000560:	e048      	b.n	80005f4 <__aeabi_fmul+0x19c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d000      	beq.n	8000568 <__aeabi_fmul+0x110>
 8000566:	e092      	b.n	800068e <__aeabi_fmul+0x236>
 8000568:	2308      	movs	r3, #8
 800056a:	4699      	mov	r9, r3
 800056c:	3b06      	subs	r3, #6
 800056e:	469a      	mov	sl, r3
 8000570:	027b      	lsls	r3, r7, #9
 8000572:	0a5b      	lsrs	r3, r3, #9
 8000574:	4698      	mov	r8, r3
 8000576:	007b      	lsls	r3, r7, #1
 8000578:	24ff      	movs	r4, #255	@ 0xff
 800057a:	0e1b      	lsrs	r3, r3, #24
 800057c:	0fff      	lsrs	r7, r7, #31
 800057e:	2b00      	cmp	r3, #0
 8000580:	d18a      	bne.n	8000498 <__aeabi_fmul+0x40>
 8000582:	4642      	mov	r2, r8
 8000584:	2a00      	cmp	r2, #0
 8000586:	d164      	bne.n	8000652 <__aeabi_fmul+0x1fa>
 8000588:	4649      	mov	r1, r9
 800058a:	3201      	adds	r2, #1
 800058c:	4311      	orrs	r1, r2
 800058e:	4689      	mov	r9, r1
 8000590:	290a      	cmp	r1, #10
 8000592:	dc08      	bgt.n	80005a6 <__aeabi_fmul+0x14e>
 8000594:	407d      	eors	r5, r7
 8000596:	2001      	movs	r0, #1
 8000598:	b2ea      	uxtb	r2, r5
 800059a:	2902      	cmp	r1, #2
 800059c:	dc91      	bgt.n	80004c2 <__aeabi_fmul+0x6a>
 800059e:	0015      	movs	r5, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	e027      	b.n	80005f4 <__aeabi_fmul+0x19c>
 80005a4:	0015      	movs	r5, r2
 80005a6:	4653      	mov	r3, sl
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d100      	bne.n	80005ae <__aeabi_fmul+0x156>
 80005ac:	e093      	b.n	80006d6 <__aeabi_fmul+0x27e>
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d01a      	beq.n	80005e8 <__aeabi_fmul+0x190>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d12c      	bne.n	8000610 <__aeabi_fmul+0x1b8>
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	e01b      	b.n	80005f4 <__aeabi_fmul+0x19c>
 80005bc:	4643      	mov	r3, r8
 80005be:	34ff      	adds	r4, #255	@ 0xff
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d055      	beq.n	8000670 <__aeabi_fmul+0x218>
 80005c4:	2103      	movs	r1, #3
 80005c6:	464b      	mov	r3, r9
 80005c8:	430b      	orrs	r3, r1
 80005ca:	0019      	movs	r1, r3
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_fmul+0x17a>
 80005d0:	e092      	b.n	80006f8 <__aeabi_fmul+0x2a0>
 80005d2:	2b0f      	cmp	r3, #15
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fmul+0x180>
 80005d6:	e08c      	b.n	80006f2 <__aeabi_fmul+0x29a>
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	03d2      	lsls	r2, r2, #15
 80005dc:	4216      	tst	r6, r2
 80005de:	d003      	beq.n	80005e8 <__aeabi_fmul+0x190>
 80005e0:	4643      	mov	r3, r8
 80005e2:	4213      	tst	r3, r2
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fmul+0x190>
 80005e6:	e07d      	b.n	80006e4 <__aeabi_fmul+0x28c>
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	03d2      	lsls	r2, r2, #15
 80005ec:	4332      	orrs	r2, r6
 80005ee:	0252      	lsls	r2, r2, #9
 80005f0:	0a52      	lsrs	r2, r2, #9
 80005f2:	23ff      	movs	r3, #255	@ 0xff
 80005f4:	05d8      	lsls	r0, r3, #23
 80005f6:	07ed      	lsls	r5, r5, #31
 80005f8:	4310      	orrs	r0, r2
 80005fa:	4328      	orrs	r0, r5
 80005fc:	bce0      	pop	{r5, r6, r7}
 80005fe:	46ba      	mov	sl, r7
 8000600:	46b1      	mov	r9, r6
 8000602:	46a8      	mov	r8, r5
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	2301      	movs	r3, #1
 8000608:	0015      	movs	r5, r2
 800060a:	0871      	lsrs	r1, r6, #1
 800060c:	401e      	ands	r6, r3
 800060e:	430e      	orrs	r6, r1
 8000610:	0023      	movs	r3, r4
 8000612:	3380      	adds	r3, #128	@ 0x80
 8000614:	1c61      	adds	r1, r4, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	dd41      	ble.n	800069e <__aeabi_fmul+0x246>
 800061a:	0772      	lsls	r2, r6, #29
 800061c:	d094      	beq.n	8000548 <__aeabi_fmul+0xf0>
 800061e:	220f      	movs	r2, #15
 8000620:	4032      	ands	r2, r6
 8000622:	2a04      	cmp	r2, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fmul+0x1d0>
 8000626:	e78e      	b.n	8000546 <__aeabi_fmul+0xee>
 8000628:	e78e      	b.n	8000548 <__aeabi_fmul+0xf0>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d105      	bne.n	800063a <__aeabi_fmul+0x1e2>
 800062e:	2304      	movs	r3, #4
 8000630:	4699      	mov	r9, r3
 8000632:	3b03      	subs	r3, #3
 8000634:	2400      	movs	r4, #0
 8000636:	469a      	mov	sl, r3
 8000638:	e726      	b.n	8000488 <__aeabi_fmul+0x30>
 800063a:	0030      	movs	r0, r6
 800063c:	f000 fb3a 	bl	8000cb4 <__clzsi2>
 8000640:	2476      	movs	r4, #118	@ 0x76
 8000642:	1f43      	subs	r3, r0, #5
 8000644:	409e      	lsls	r6, r3
 8000646:	2300      	movs	r3, #0
 8000648:	4264      	negs	r4, r4
 800064a:	4699      	mov	r9, r3
 800064c:	469a      	mov	sl, r3
 800064e:	1a24      	subs	r4, r4, r0
 8000650:	e71a      	b.n	8000488 <__aeabi_fmul+0x30>
 8000652:	4640      	mov	r0, r8
 8000654:	f000 fb2e 	bl	8000cb4 <__clzsi2>
 8000658:	464b      	mov	r3, r9
 800065a:	1a24      	subs	r4, r4, r0
 800065c:	3c76      	subs	r4, #118	@ 0x76
 800065e:	2b0a      	cmp	r3, #10
 8000660:	dca1      	bgt.n	80005a6 <__aeabi_fmul+0x14e>
 8000662:	4643      	mov	r3, r8
 8000664:	3805      	subs	r0, #5
 8000666:	4083      	lsls	r3, r0
 8000668:	407d      	eors	r5, r7
 800066a:	4698      	mov	r8, r3
 800066c:	b2ea      	uxtb	r2, r5
 800066e:	e724      	b.n	80004ba <__aeabi_fmul+0x62>
 8000670:	464a      	mov	r2, r9
 8000672:	3302      	adds	r3, #2
 8000674:	4313      	orrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	407a      	eors	r2, r7
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	2b0a      	cmp	r3, #10
 800067e:	dc92      	bgt.n	80005a6 <__aeabi_fmul+0x14e>
 8000680:	4649      	mov	r1, r9
 8000682:	0015      	movs	r5, r2
 8000684:	2900      	cmp	r1, #0
 8000686:	d026      	beq.n	80006d6 <__aeabi_fmul+0x27e>
 8000688:	4699      	mov	r9, r3
 800068a:	2002      	movs	r0, #2
 800068c:	e719      	b.n	80004c2 <__aeabi_fmul+0x6a>
 800068e:	230c      	movs	r3, #12
 8000690:	4699      	mov	r9, r3
 8000692:	3b09      	subs	r3, #9
 8000694:	24ff      	movs	r4, #255	@ 0xff
 8000696:	469a      	mov	sl, r3
 8000698:	e6f6      	b.n	8000488 <__aeabi_fmul+0x30>
 800069a:	0015      	movs	r5, r2
 800069c:	0021      	movs	r1, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	2b1b      	cmp	r3, #27
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_fmul+0x250>
 80006a6:	e786      	b.n	80005b6 <__aeabi_fmul+0x15e>
 80006a8:	319e      	adds	r1, #158	@ 0x9e
 80006aa:	0032      	movs	r2, r6
 80006ac:	408e      	lsls	r6, r1
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	1e73      	subs	r3, r6, #1
 80006b2:	419e      	sbcs	r6, r3
 80006b4:	4332      	orrs	r2, r6
 80006b6:	0753      	lsls	r3, r2, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fmul+0x26c>
 80006ba:	230f      	movs	r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fmul+0x26c>
 80006c2:	3204      	adds	r2, #4
 80006c4:	0153      	lsls	r3, r2, #5
 80006c6:	d510      	bpl.n	80006ea <__aeabi_fmul+0x292>
 80006c8:	2301      	movs	r3, #1
 80006ca:	2200      	movs	r2, #0
 80006cc:	e792      	b.n	80005f4 <__aeabi_fmul+0x19c>
 80006ce:	003d      	movs	r5, r7
 80006d0:	4646      	mov	r6, r8
 80006d2:	4682      	mov	sl, r0
 80006d4:	e767      	b.n	80005a6 <__aeabi_fmul+0x14e>
 80006d6:	23ff      	movs	r3, #255	@ 0xff
 80006d8:	2200      	movs	r2, #0
 80006da:	e78b      	b.n	80005f4 <__aeabi_fmul+0x19c>
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	2500      	movs	r5, #0
 80006e0:	03d2      	lsls	r2, r2, #15
 80006e2:	e786      	b.n	80005f2 <__aeabi_fmul+0x19a>
 80006e4:	003d      	movs	r5, r7
 80006e6:	431a      	orrs	r2, r3
 80006e8:	e783      	b.n	80005f2 <__aeabi_fmul+0x19a>
 80006ea:	0192      	lsls	r2, r2, #6
 80006ec:	2300      	movs	r3, #0
 80006ee:	0a52      	lsrs	r2, r2, #9
 80006f0:	e780      	b.n	80005f4 <__aeabi_fmul+0x19c>
 80006f2:	003d      	movs	r5, r7
 80006f4:	4646      	mov	r6, r8
 80006f6:	e777      	b.n	80005e8 <__aeabi_fmul+0x190>
 80006f8:	002a      	movs	r2, r5
 80006fa:	2301      	movs	r3, #1
 80006fc:	407a      	eors	r2, r7
 80006fe:	408b      	lsls	r3, r1
 8000700:	2003      	movs	r0, #3
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	e6e9      	b.n	80004da <__aeabi_fmul+0x82>
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	f7ffffff 	.word	0xf7ffffff

0800070c <__aeabi_fsub>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	4647      	mov	r7, r8
 8000710:	46ce      	mov	lr, r9
 8000712:	0243      	lsls	r3, r0, #9
 8000714:	b580      	push	{r7, lr}
 8000716:	0a5f      	lsrs	r7, r3, #9
 8000718:	099b      	lsrs	r3, r3, #6
 800071a:	0045      	lsls	r5, r0, #1
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	469c      	mov	ip, r3
 8000720:	024b      	lsls	r3, r1, #9
 8000722:	0fc4      	lsrs	r4, r0, #31
 8000724:	0fce      	lsrs	r6, r1, #31
 8000726:	0e2d      	lsrs	r5, r5, #24
 8000728:	0a58      	lsrs	r0, r3, #9
 800072a:	0e12      	lsrs	r2, r2, #24
 800072c:	0999      	lsrs	r1, r3, #6
 800072e:	2aff      	cmp	r2, #255	@ 0xff
 8000730:	d06b      	beq.n	800080a <__aeabi_fsub+0xfe>
 8000732:	2301      	movs	r3, #1
 8000734:	405e      	eors	r6, r3
 8000736:	1aab      	subs	r3, r5, r2
 8000738:	42b4      	cmp	r4, r6
 800073a:	d04b      	beq.n	80007d4 <__aeabi_fsub+0xc8>
 800073c:	2b00      	cmp	r3, #0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fsub+0x36>
 8000740:	e0ff      	b.n	8000942 <__aeabi_fsub+0x236>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fsub+0x3c>
 8000746:	e088      	b.n	800085a <__aeabi_fsub+0x14e>
 8000748:	2dff      	cmp	r5, #255	@ 0xff
 800074a:	d100      	bne.n	800074e <__aeabi_fsub+0x42>
 800074c:	e0ef      	b.n	800092e <__aeabi_fsub+0x222>
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	04d2      	lsls	r2, r2, #19
 8000752:	4311      	orrs	r1, r2
 8000754:	2001      	movs	r0, #1
 8000756:	2b1b      	cmp	r3, #27
 8000758:	dc08      	bgt.n	800076c <__aeabi_fsub+0x60>
 800075a:	0008      	movs	r0, r1
 800075c:	2220      	movs	r2, #32
 800075e:	40d8      	lsrs	r0, r3
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4099      	lsls	r1, r3
 8000764:	000b      	movs	r3, r1
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	4193      	sbcs	r3, r2
 800076a:	4318      	orrs	r0, r3
 800076c:	4663      	mov	r3, ip
 800076e:	1a1b      	subs	r3, r3, r0
 8000770:	469c      	mov	ip, r3
 8000772:	4663      	mov	r3, ip
 8000774:	015b      	lsls	r3, r3, #5
 8000776:	d400      	bmi.n	800077a <__aeabi_fsub+0x6e>
 8000778:	e0cd      	b.n	8000916 <__aeabi_fsub+0x20a>
 800077a:	4663      	mov	r3, ip
 800077c:	019f      	lsls	r7, r3, #6
 800077e:	09bf      	lsrs	r7, r7, #6
 8000780:	0038      	movs	r0, r7
 8000782:	f000 fa97 	bl	8000cb4 <__clzsi2>
 8000786:	003b      	movs	r3, r7
 8000788:	3805      	subs	r0, #5
 800078a:	4083      	lsls	r3, r0
 800078c:	4285      	cmp	r5, r0
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fsub+0x86>
 8000790:	e0a2      	b.n	80008d8 <__aeabi_fsub+0x1cc>
 8000792:	4ab7      	ldr	r2, [pc, #732]	@ (8000a70 <__aeabi_fsub+0x364>)
 8000794:	1a2d      	subs	r5, r5, r0
 8000796:	401a      	ands	r2, r3
 8000798:	4694      	mov	ip, r2
 800079a:	075a      	lsls	r2, r3, #29
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x94>
 800079e:	e0c3      	b.n	8000928 <__aeabi_fsub+0x21c>
 80007a0:	220f      	movs	r2, #15
 80007a2:	4013      	ands	r3, r2
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d100      	bne.n	80007aa <__aeabi_fsub+0x9e>
 80007a8:	e0be      	b.n	8000928 <__aeabi_fsub+0x21c>
 80007aa:	2304      	movs	r3, #4
 80007ac:	4698      	mov	r8, r3
 80007ae:	44c4      	add	ip, r8
 80007b0:	4663      	mov	r3, ip
 80007b2:	015b      	lsls	r3, r3, #5
 80007b4:	d400      	bmi.n	80007b8 <__aeabi_fsub+0xac>
 80007b6:	e0b7      	b.n	8000928 <__aeabi_fsub+0x21c>
 80007b8:	1c68      	adds	r0, r5, #1
 80007ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fsub+0xb4>
 80007be:	e0a5      	b.n	800090c <__aeabi_fsub+0x200>
 80007c0:	20ff      	movs	r0, #255	@ 0xff
 80007c2:	2200      	movs	r2, #0
 80007c4:	05c0      	lsls	r0, r0, #23
 80007c6:	4310      	orrs	r0, r2
 80007c8:	07e4      	lsls	r4, r4, #31
 80007ca:	4320      	orrs	r0, r4
 80007cc:	bcc0      	pop	{r6, r7}
 80007ce:	46b9      	mov	r9, r7
 80007d0:	46b0      	mov	r8, r6
 80007d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	dc00      	bgt.n	80007da <__aeabi_fsub+0xce>
 80007d8:	e1eb      	b.n	8000bb2 <__aeabi_fsub+0x4a6>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d046      	beq.n	800086c <__aeabi_fsub+0x160>
 80007de:	2dff      	cmp	r5, #255	@ 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0xd8>
 80007e2:	e0a4      	b.n	800092e <__aeabi_fsub+0x222>
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	4311      	orrs	r1, r2
 80007ea:	2b1b      	cmp	r3, #27
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_fsub+0xe4>
 80007ee:	e0fb      	b.n	80009e8 <__aeabi_fsub+0x2dc>
 80007f0:	2305      	movs	r3, #5
 80007f2:	4698      	mov	r8, r3
 80007f4:	002b      	movs	r3, r5
 80007f6:	44c4      	add	ip, r8
 80007f8:	4662      	mov	r2, ip
 80007fa:	08d7      	lsrs	r7, r2, #3
 80007fc:	2bff      	cmp	r3, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fsub+0xf6>
 8000800:	e095      	b.n	800092e <__aeabi_fsub+0x222>
 8000802:	027a      	lsls	r2, r7, #9
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e7dc      	b.n	80007c4 <__aeabi_fsub+0xb8>
 800080a:	002b      	movs	r3, r5
 800080c:	3bff      	subs	r3, #255	@ 0xff
 800080e:	4699      	mov	r9, r3
 8000810:	2900      	cmp	r1, #0
 8000812:	d118      	bne.n	8000846 <__aeabi_fsub+0x13a>
 8000814:	2301      	movs	r3, #1
 8000816:	405e      	eors	r6, r3
 8000818:	42b4      	cmp	r4, r6
 800081a:	d100      	bne.n	800081e <__aeabi_fsub+0x112>
 800081c:	e0ca      	b.n	80009b4 <__aeabi_fsub+0x2a8>
 800081e:	464b      	mov	r3, r9
 8000820:	2b00      	cmp	r3, #0
 8000822:	d02d      	beq.n	8000880 <__aeabi_fsub+0x174>
 8000824:	2d00      	cmp	r5, #0
 8000826:	d000      	beq.n	800082a <__aeabi_fsub+0x11e>
 8000828:	e13c      	b.n	8000aa4 <__aeabi_fsub+0x398>
 800082a:	23ff      	movs	r3, #255	@ 0xff
 800082c:	4664      	mov	r4, ip
 800082e:	2c00      	cmp	r4, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fsub+0x128>
 8000832:	e15f      	b.n	8000af4 <__aeabi_fsub+0x3e8>
 8000834:	1e5d      	subs	r5, r3, #1
 8000836:	2b01      	cmp	r3, #1
 8000838:	d100      	bne.n	800083c <__aeabi_fsub+0x130>
 800083a:	e174      	b.n	8000b26 <__aeabi_fsub+0x41a>
 800083c:	0034      	movs	r4, r6
 800083e:	2bff      	cmp	r3, #255	@ 0xff
 8000840:	d074      	beq.n	800092c <__aeabi_fsub+0x220>
 8000842:	002b      	movs	r3, r5
 8000844:	e103      	b.n	8000a4e <__aeabi_fsub+0x342>
 8000846:	42b4      	cmp	r4, r6
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x140>
 800084a:	e09c      	b.n	8000986 <__aeabi_fsub+0x27a>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d017      	beq.n	8000880 <__aeabi_fsub+0x174>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d0ea      	beq.n	800082a <__aeabi_fsub+0x11e>
 8000854:	0007      	movs	r7, r0
 8000856:	0034      	movs	r4, r6
 8000858:	e06c      	b.n	8000934 <__aeabi_fsub+0x228>
 800085a:	2900      	cmp	r1, #0
 800085c:	d0cc      	beq.n	80007f8 <__aeabi_fsub+0xec>
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	2b01      	cmp	r3, #1
 8000862:	d02b      	beq.n	80008bc <__aeabi_fsub+0x1b0>
 8000864:	2bff      	cmp	r3, #255	@ 0xff
 8000866:	d062      	beq.n	800092e <__aeabi_fsub+0x222>
 8000868:	0013      	movs	r3, r2
 800086a:	e773      	b.n	8000754 <__aeabi_fsub+0x48>
 800086c:	2900      	cmp	r1, #0
 800086e:	d0c3      	beq.n	80007f8 <__aeabi_fsub+0xec>
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	2b01      	cmp	r3, #1
 8000874:	d100      	bne.n	8000878 <__aeabi_fsub+0x16c>
 8000876:	e11e      	b.n	8000ab6 <__aeabi_fsub+0x3aa>
 8000878:	2bff      	cmp	r3, #255	@ 0xff
 800087a:	d058      	beq.n	800092e <__aeabi_fsub+0x222>
 800087c:	0013      	movs	r3, r2
 800087e:	e7b4      	b.n	80007ea <__aeabi_fsub+0xde>
 8000880:	22fe      	movs	r2, #254	@ 0xfe
 8000882:	1c6b      	adds	r3, r5, #1
 8000884:	421a      	tst	r2, r3
 8000886:	d10d      	bne.n	80008a4 <__aeabi_fsub+0x198>
 8000888:	2d00      	cmp	r5, #0
 800088a:	d060      	beq.n	800094e <__aeabi_fsub+0x242>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fsub+0x188>
 8000892:	e120      	b.n	8000ad6 <__aeabi_fsub+0x3ca>
 8000894:	2900      	cmp	r1, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fsub+0x18e>
 8000898:	e128      	b.n	8000aec <__aeabi_fsub+0x3e0>
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	2400      	movs	r4, #0
 800089e:	20ff      	movs	r0, #255	@ 0xff
 80008a0:	03d2      	lsls	r2, r2, #15
 80008a2:	e78f      	b.n	80007c4 <__aeabi_fsub+0xb8>
 80008a4:	4663      	mov	r3, ip
 80008a6:	1a5f      	subs	r7, r3, r1
 80008a8:	017b      	lsls	r3, r7, #5
 80008aa:	d500      	bpl.n	80008ae <__aeabi_fsub+0x1a2>
 80008ac:	e0fe      	b.n	8000aac <__aeabi_fsub+0x3a0>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fsub+0x1a8>
 80008b2:	e765      	b.n	8000780 <__aeabi_fsub+0x74>
 80008b4:	2400      	movs	r4, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	2200      	movs	r2, #0
 80008ba:	e783      	b.n	80007c4 <__aeabi_fsub+0xb8>
 80008bc:	4663      	mov	r3, ip
 80008be:	1a59      	subs	r1, r3, r1
 80008c0:	014b      	lsls	r3, r1, #5
 80008c2:	d400      	bmi.n	80008c6 <__aeabi_fsub+0x1ba>
 80008c4:	e119      	b.n	8000afa <__aeabi_fsub+0x3ee>
 80008c6:	018f      	lsls	r7, r1, #6
 80008c8:	09bf      	lsrs	r7, r7, #6
 80008ca:	0038      	movs	r0, r7
 80008cc:	f000 f9f2 	bl	8000cb4 <__clzsi2>
 80008d0:	003b      	movs	r3, r7
 80008d2:	3805      	subs	r0, #5
 80008d4:	4083      	lsls	r3, r0
 80008d6:	2501      	movs	r5, #1
 80008d8:	2220      	movs	r2, #32
 80008da:	1b40      	subs	r0, r0, r5
 80008dc:	3001      	adds	r0, #1
 80008de:	1a12      	subs	r2, r2, r0
 80008e0:	0019      	movs	r1, r3
 80008e2:	4093      	lsls	r3, r2
 80008e4:	40c1      	lsrs	r1, r0
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	4319      	orrs	r1, r3
 80008ec:	468c      	mov	ip, r1
 80008ee:	1e0b      	subs	r3, r1, #0
 80008f0:	d0e1      	beq.n	80008b6 <__aeabi_fsub+0x1aa>
 80008f2:	075b      	lsls	r3, r3, #29
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x1ec>
 80008f6:	e152      	b.n	8000b9e <__aeabi_fsub+0x492>
 80008f8:	230f      	movs	r3, #15
 80008fa:	2500      	movs	r5, #0
 80008fc:	400b      	ands	r3, r1
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d000      	beq.n	8000904 <__aeabi_fsub+0x1f8>
 8000902:	e752      	b.n	80007aa <__aeabi_fsub+0x9e>
 8000904:	2001      	movs	r0, #1
 8000906:	014a      	lsls	r2, r1, #5
 8000908:	d400      	bmi.n	800090c <__aeabi_fsub+0x200>
 800090a:	e092      	b.n	8000a32 <__aeabi_fsub+0x326>
 800090c:	b2c0      	uxtb	r0, r0
 800090e:	4663      	mov	r3, ip
 8000910:	019a      	lsls	r2, r3, #6
 8000912:	0a52      	lsrs	r2, r2, #9
 8000914:	e756      	b.n	80007c4 <__aeabi_fsub+0xb8>
 8000916:	4663      	mov	r3, ip
 8000918:	075b      	lsls	r3, r3, #29
 800091a:	d005      	beq.n	8000928 <__aeabi_fsub+0x21c>
 800091c:	230f      	movs	r3, #15
 800091e:	4662      	mov	r2, ip
 8000920:	4013      	ands	r3, r2
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x21c>
 8000926:	e740      	b.n	80007aa <__aeabi_fsub+0x9e>
 8000928:	002b      	movs	r3, r5
 800092a:	e765      	b.n	80007f8 <__aeabi_fsub+0xec>
 800092c:	0007      	movs	r7, r0
 800092e:	2f00      	cmp	r7, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x228>
 8000932:	e745      	b.n	80007c0 <__aeabi_fsub+0xb4>
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	433a      	orrs	r2, r7
 800093a:	0252      	lsls	r2, r2, #9
 800093c:	20ff      	movs	r0, #255	@ 0xff
 800093e:	0a52      	lsrs	r2, r2, #9
 8000940:	e740      	b.n	80007c4 <__aeabi_fsub+0xb8>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d179      	bne.n	8000a3a <__aeabi_fsub+0x32e>
 8000946:	22fe      	movs	r2, #254	@ 0xfe
 8000948:	1c6b      	adds	r3, r5, #1
 800094a:	421a      	tst	r2, r3
 800094c:	d1aa      	bne.n	80008a4 <__aeabi_fsub+0x198>
 800094e:	4663      	mov	r3, ip
 8000950:	2b00      	cmp	r3, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x24a>
 8000954:	e0f5      	b.n	8000b42 <__aeabi_fsub+0x436>
 8000956:	2900      	cmp	r1, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x250>
 800095a:	e0d1      	b.n	8000b00 <__aeabi_fsub+0x3f4>
 800095c:	1a5f      	subs	r7, r3, r1
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	04db      	lsls	r3, r3, #19
 8000962:	421f      	tst	r7, r3
 8000964:	d100      	bne.n	8000968 <__aeabi_fsub+0x25c>
 8000966:	e10e      	b.n	8000b86 <__aeabi_fsub+0x47a>
 8000968:	4662      	mov	r2, ip
 800096a:	2401      	movs	r4, #1
 800096c:	1a8a      	subs	r2, r1, r2
 800096e:	4694      	mov	ip, r2
 8000970:	2000      	movs	r0, #0
 8000972:	4034      	ands	r4, r6
 8000974:	2a00      	cmp	r2, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x26e>
 8000978:	e724      	b.n	80007c4 <__aeabi_fsub+0xb8>
 800097a:	2001      	movs	r0, #1
 800097c:	421a      	tst	r2, r3
 800097e:	d1c6      	bne.n	800090e <__aeabi_fsub+0x202>
 8000980:	2300      	movs	r3, #0
 8000982:	08d7      	lsrs	r7, r2, #3
 8000984:	e73d      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d017      	beq.n	80009ba <__aeabi_fsub+0x2ae>
 800098a:	2d00      	cmp	r5, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_fsub+0x284>
 800098e:	e0af      	b.n	8000af0 <__aeabi_fsub+0x3e4>
 8000990:	23ff      	movs	r3, #255	@ 0xff
 8000992:	4665      	mov	r5, ip
 8000994:	2d00      	cmp	r5, #0
 8000996:	d100      	bne.n	800099a <__aeabi_fsub+0x28e>
 8000998:	e0ad      	b.n	8000af6 <__aeabi_fsub+0x3ea>
 800099a:	1e5e      	subs	r6, r3, #1
 800099c:	2b01      	cmp	r3, #1
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x296>
 80009a0:	e089      	b.n	8000ab6 <__aeabi_fsub+0x3aa>
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d0c2      	beq.n	800092c <__aeabi_fsub+0x220>
 80009a6:	2e1b      	cmp	r6, #27
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_fsub+0x2a0>
 80009aa:	e0ab      	b.n	8000b04 <__aeabi_fsub+0x3f8>
 80009ac:	1d4b      	adds	r3, r1, #5
 80009ae:	469c      	mov	ip, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	e721      	b.n	80007f8 <__aeabi_fsub+0xec>
 80009b4:	464b      	mov	r3, r9
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d170      	bne.n	8000a9c <__aeabi_fsub+0x390>
 80009ba:	22fe      	movs	r2, #254	@ 0xfe
 80009bc:	1c6b      	adds	r3, r5, #1
 80009be:	421a      	tst	r2, r3
 80009c0:	d15e      	bne.n	8000a80 <__aeabi_fsub+0x374>
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x2bc>
 80009c6:	e0c3      	b.n	8000b50 <__aeabi_fsub+0x444>
 80009c8:	4663      	mov	r3, ip
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fsub+0x2c4>
 80009ce:	e0d0      	b.n	8000b72 <__aeabi_fsub+0x466>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x2ca>
 80009d4:	e094      	b.n	8000b00 <__aeabi_fsub+0x3f4>
 80009d6:	000a      	movs	r2, r1
 80009d8:	4462      	add	r2, ip
 80009da:	0153      	lsls	r3, r2, #5
 80009dc:	d400      	bmi.n	80009e0 <__aeabi_fsub+0x2d4>
 80009de:	e0d8      	b.n	8000b92 <__aeabi_fsub+0x486>
 80009e0:	0192      	lsls	r2, r2, #6
 80009e2:	2001      	movs	r0, #1
 80009e4:	0a52      	lsrs	r2, r2, #9
 80009e6:	e6ed      	b.n	80007c4 <__aeabi_fsub+0xb8>
 80009e8:	0008      	movs	r0, r1
 80009ea:	2220      	movs	r2, #32
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	4099      	lsls	r1, r3
 80009f2:	000b      	movs	r3, r1
 80009f4:	1e5a      	subs	r2, r3, #1
 80009f6:	4193      	sbcs	r3, r2
 80009f8:	4303      	orrs	r3, r0
 80009fa:	449c      	add	ip, r3
 80009fc:	4663      	mov	r3, ip
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	d589      	bpl.n	8000916 <__aeabi_fsub+0x20a>
 8000a02:	3501      	adds	r5, #1
 8000a04:	2dff      	cmp	r5, #255	@ 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x2fe>
 8000a08:	e6da      	b.n	80007c0 <__aeabi_fsub+0xb4>
 8000a0a:	4662      	mov	r2, ip
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	4919      	ldr	r1, [pc, #100]	@ (8000a74 <__aeabi_fsub+0x368>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	0852      	lsrs	r2, r2, #1
 8000a14:	400a      	ands	r2, r1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	075b      	lsls	r3, r3, #29
 8000a1e:	d004      	beq.n	8000a2a <__aeabi_fsub+0x31e>
 8000a20:	230f      	movs	r3, #15
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fsub+0x31e>
 8000a28:	e6bf      	b.n	80007aa <__aeabi_fsub+0x9e>
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	015b      	lsls	r3, r3, #5
 8000a2e:	d500      	bpl.n	8000a32 <__aeabi_fsub+0x326>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_fsub+0xac>
 8000a32:	4663      	mov	r3, ip
 8000a34:	08df      	lsrs	r7, r3, #3
 8000a36:	002b      	movs	r3, r5
 8000a38:	e6e3      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000a3a:	1b53      	subs	r3, r2, r5
 8000a3c:	2d00      	cmp	r5, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fsub+0x336>
 8000a40:	e6f4      	b.n	800082c <__aeabi_fsub+0x120>
 8000a42:	2080      	movs	r0, #128	@ 0x80
 8000a44:	4664      	mov	r4, ip
 8000a46:	04c0      	lsls	r0, r0, #19
 8000a48:	4304      	orrs	r4, r0
 8000a4a:	46a4      	mov	ip, r4
 8000a4c:	0034      	movs	r4, r6
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2b1b      	cmp	r3, #27
 8000a52:	dc09      	bgt.n	8000a68 <__aeabi_fsub+0x35c>
 8000a54:	2520      	movs	r5, #32
 8000a56:	4660      	mov	r0, ip
 8000a58:	40d8      	lsrs	r0, r3
 8000a5a:	1aeb      	subs	r3, r5, r3
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	409d      	lsls	r5, r3
 8000a60:	002b      	movs	r3, r5
 8000a62:	1e5d      	subs	r5, r3, #1
 8000a64:	41ab      	sbcs	r3, r5
 8000a66:	4318      	orrs	r0, r3
 8000a68:	1a0b      	subs	r3, r1, r0
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	0015      	movs	r5, r2
 8000a6e:	e680      	b.n	8000772 <__aeabi_fsub+0x66>
 8000a70:	fbffffff 	.word	0xfbffffff
 8000a74:	7dffffff 	.word	0x7dffffff
 8000a78:	22fe      	movs	r2, #254	@ 0xfe
 8000a7a:	1c6b      	adds	r3, r5, #1
 8000a7c:	4213      	tst	r3, r2
 8000a7e:	d0a3      	beq.n	80009c8 <__aeabi_fsub+0x2bc>
 8000a80:	2bff      	cmp	r3, #255	@ 0xff
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fsub+0x37a>
 8000a84:	e69c      	b.n	80007c0 <__aeabi_fsub+0xb4>
 8000a86:	4461      	add	r1, ip
 8000a88:	0849      	lsrs	r1, r1, #1
 8000a8a:	074a      	lsls	r2, r1, #29
 8000a8c:	d049      	beq.n	8000b22 <__aeabi_fsub+0x416>
 8000a8e:	220f      	movs	r2, #15
 8000a90:	400a      	ands	r2, r1
 8000a92:	2a04      	cmp	r2, #4
 8000a94:	d045      	beq.n	8000b22 <__aeabi_fsub+0x416>
 8000a96:	1d0a      	adds	r2, r1, #4
 8000a98:	4694      	mov	ip, r2
 8000a9a:	e6ad      	b.n	80007f8 <__aeabi_fsub+0xec>
 8000a9c:	2d00      	cmp	r5, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x396>
 8000aa0:	e776      	b.n	8000990 <__aeabi_fsub+0x284>
 8000aa2:	e68d      	b.n	80007c0 <__aeabi_fsub+0xb4>
 8000aa4:	0034      	movs	r4, r6
 8000aa6:	20ff      	movs	r0, #255	@ 0xff
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e68b      	b.n	80007c4 <__aeabi_fsub+0xb8>
 8000aac:	4663      	mov	r3, ip
 8000aae:	2401      	movs	r4, #1
 8000ab0:	1acf      	subs	r7, r1, r3
 8000ab2:	4034      	ands	r4, r6
 8000ab4:	e664      	b.n	8000780 <__aeabi_fsub+0x74>
 8000ab6:	4461      	add	r1, ip
 8000ab8:	014b      	lsls	r3, r1, #5
 8000aba:	d56d      	bpl.n	8000b98 <__aeabi_fsub+0x48c>
 8000abc:	0848      	lsrs	r0, r1, #1
 8000abe:	4944      	ldr	r1, [pc, #272]	@ (8000bd0 <__aeabi_fsub+0x4c4>)
 8000ac0:	4001      	ands	r1, r0
 8000ac2:	0743      	lsls	r3, r0, #29
 8000ac4:	d02c      	beq.n	8000b20 <__aeabi_fsub+0x414>
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	4003      	ands	r3, r0
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d028      	beq.n	8000b20 <__aeabi_fsub+0x414>
 8000ace:	1d0b      	adds	r3, r1, #4
 8000ad0:	469c      	mov	ip, r3
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e690      	b.n	80007f8 <__aeabi_fsub+0xec>
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0x3d0>
 8000ada:	e72b      	b.n	8000934 <__aeabi_fsub+0x228>
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	03db      	lsls	r3, r3, #15
 8000ae0:	429f      	cmp	r7, r3
 8000ae2:	d200      	bcs.n	8000ae6 <__aeabi_fsub+0x3da>
 8000ae4:	e726      	b.n	8000934 <__aeabi_fsub+0x228>
 8000ae6:	4298      	cmp	r0, r3
 8000ae8:	d300      	bcc.n	8000aec <__aeabi_fsub+0x3e0>
 8000aea:	e723      	b.n	8000934 <__aeabi_fsub+0x228>
 8000aec:	2401      	movs	r4, #1
 8000aee:	4034      	ands	r4, r6
 8000af0:	0007      	movs	r7, r0
 8000af2:	e71f      	b.n	8000934 <__aeabi_fsub+0x228>
 8000af4:	0034      	movs	r4, r6
 8000af6:	468c      	mov	ip, r1
 8000af8:	e67e      	b.n	80007f8 <__aeabi_fsub+0xec>
 8000afa:	2301      	movs	r3, #1
 8000afc:	08cf      	lsrs	r7, r1, #3
 8000afe:	e680      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b00:	2300      	movs	r3, #0
 8000b02:	e67e      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b04:	2020      	movs	r0, #32
 8000b06:	4665      	mov	r5, ip
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	4085      	lsls	r5, r0
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	0028      	movs	r0, r5
 8000b10:	40f3      	lsrs	r3, r6
 8000b12:	1e45      	subs	r5, r0, #1
 8000b14:	41a8      	sbcs	r0, r5
 8000b16:	4303      	orrs	r3, r0
 8000b18:	469c      	mov	ip, r3
 8000b1a:	0015      	movs	r5, r2
 8000b1c:	448c      	add	ip, r1
 8000b1e:	e76d      	b.n	80009fc <__aeabi_fsub+0x2f0>
 8000b20:	2302      	movs	r3, #2
 8000b22:	08cf      	lsrs	r7, r1, #3
 8000b24:	e66d      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b26:	1b0f      	subs	r7, r1, r4
 8000b28:	017b      	lsls	r3, r7, #5
 8000b2a:	d528      	bpl.n	8000b7e <__aeabi_fsub+0x472>
 8000b2c:	01bf      	lsls	r7, r7, #6
 8000b2e:	09bf      	lsrs	r7, r7, #6
 8000b30:	0038      	movs	r0, r7
 8000b32:	f000 f8bf 	bl	8000cb4 <__clzsi2>
 8000b36:	003b      	movs	r3, r7
 8000b38:	3805      	subs	r0, #5
 8000b3a:	4083      	lsls	r3, r0
 8000b3c:	0034      	movs	r4, r6
 8000b3e:	2501      	movs	r5, #1
 8000b40:	e6ca      	b.n	80008d8 <__aeabi_fsub+0x1cc>
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d100      	bne.n	8000b48 <__aeabi_fsub+0x43c>
 8000b46:	e6b5      	b.n	80008b4 <__aeabi_fsub+0x1a8>
 8000b48:	2401      	movs	r4, #1
 8000b4a:	0007      	movs	r7, r0
 8000b4c:	4034      	ands	r4, r6
 8000b4e:	e658      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b50:	4663      	mov	r3, ip
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x44c>
 8000b56:	e6e9      	b.n	800092c <__aeabi_fsub+0x220>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x452>
 8000b5c:	e6ea      	b.n	8000934 <__aeabi_fsub+0x228>
 8000b5e:	2380      	movs	r3, #128	@ 0x80
 8000b60:	03db      	lsls	r3, r3, #15
 8000b62:	429f      	cmp	r7, r3
 8000b64:	d200      	bcs.n	8000b68 <__aeabi_fsub+0x45c>
 8000b66:	e6e5      	b.n	8000934 <__aeabi_fsub+0x228>
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	d300      	bcc.n	8000b6e <__aeabi_fsub+0x462>
 8000b6c:	e6e2      	b.n	8000934 <__aeabi_fsub+0x228>
 8000b6e:	0007      	movs	r7, r0
 8000b70:	e6e0      	b.n	8000934 <__aeabi_fsub+0x228>
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x46c>
 8000b76:	e69e      	b.n	80008b6 <__aeabi_fsub+0x1aa>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	08cf      	lsrs	r7, r1, #3
 8000b7c:	e641      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b7e:	0034      	movs	r4, r6
 8000b80:	2301      	movs	r3, #1
 8000b82:	08ff      	lsrs	r7, r7, #3
 8000b84:	e63d      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x480>
 8000b8a:	e693      	b.n	80008b4 <__aeabi_fsub+0x1a8>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	08ff      	lsrs	r7, r7, #3
 8000b90:	e637      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b92:	2300      	movs	r3, #0
 8000b94:	08d7      	lsrs	r7, r2, #3
 8000b96:	e634      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	08cf      	lsrs	r7, r1, #3
 8000b9c:	e631      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000b9e:	2280      	movs	r2, #128	@ 0x80
 8000ba0:	000b      	movs	r3, r1
 8000ba2:	04d2      	lsls	r2, r2, #19
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	4211      	tst	r1, r2
 8000baa:	d000      	beq.n	8000bae <__aeabi_fsub+0x4a2>
 8000bac:	e6ae      	b.n	800090c <__aeabi_fsub+0x200>
 8000bae:	08cf      	lsrs	r7, r1, #3
 8000bb0:	e627      	b.n	8000802 <__aeabi_fsub+0xf6>
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x4ac>
 8000bb6:	e75f      	b.n	8000a78 <__aeabi_fsub+0x36c>
 8000bb8:	1b56      	subs	r6, r2, r5
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d101      	bne.n	8000bc2 <__aeabi_fsub+0x4b6>
 8000bbe:	0033      	movs	r3, r6
 8000bc0:	e6e7      	b.n	8000992 <__aeabi_fsub+0x286>
 8000bc2:	2380      	movs	r3, #128	@ 0x80
 8000bc4:	4660      	mov	r0, ip
 8000bc6:	04db      	lsls	r3, r3, #19
 8000bc8:	4318      	orrs	r0, r3
 8000bca:	4684      	mov	ip, r0
 8000bcc:	e6eb      	b.n	80009a6 <__aeabi_fsub+0x29a>
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_f2iz>:
 8000bd4:	0241      	lsls	r1, r0, #9
 8000bd6:	0042      	lsls	r2, r0, #1
 8000bd8:	0fc3      	lsrs	r3, r0, #31
 8000bda:	0a49      	lsrs	r1, r1, #9
 8000bdc:	2000      	movs	r0, #0
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000be2:	dd03      	ble.n	8000bec <__aeabi_f2iz+0x18>
 8000be4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000be6:	dd02      	ble.n	8000bee <__aeabi_f2iz+0x1a>
 8000be8:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <__aeabi_f2iz+0x3c>)
 8000bea:	1898      	adds	r0, r3, r2
 8000bec:	4770      	bx	lr
 8000bee:	2080      	movs	r0, #128	@ 0x80
 8000bf0:	0400      	lsls	r0, r0, #16
 8000bf2:	4301      	orrs	r1, r0
 8000bf4:	2a95      	cmp	r2, #149	@ 0x95
 8000bf6:	dc07      	bgt.n	8000c08 <__aeabi_f2iz+0x34>
 8000bf8:	2096      	movs	r0, #150	@ 0x96
 8000bfa:	1a82      	subs	r2, r0, r2
 8000bfc:	40d1      	lsrs	r1, r2
 8000bfe:	4248      	negs	r0, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f3      	bne.n	8000bec <__aeabi_f2iz+0x18>
 8000c04:	0008      	movs	r0, r1
 8000c06:	e7f1      	b.n	8000bec <__aeabi_f2iz+0x18>
 8000c08:	3a96      	subs	r2, #150	@ 0x96
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	e7f7      	b.n	8000bfe <__aeabi_f2iz+0x2a>
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	7fffffff 	.word	0x7fffffff

08000c14 <__aeabi_i2f>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d012      	beq.n	8000c40 <__aeabi_i2f+0x2c>
 8000c1a:	17c3      	asrs	r3, r0, #31
 8000c1c:	18c5      	adds	r5, r0, r3
 8000c1e:	405d      	eors	r5, r3
 8000c20:	0fc4      	lsrs	r4, r0, #31
 8000c22:	0028      	movs	r0, r5
 8000c24:	f000 f846 	bl	8000cb4 <__clzsi2>
 8000c28:	239e      	movs	r3, #158	@ 0x9e
 8000c2a:	1a1b      	subs	r3, r3, r0
 8000c2c:	2b96      	cmp	r3, #150	@ 0x96
 8000c2e:	dc0f      	bgt.n	8000c50 <__aeabi_i2f+0x3c>
 8000c30:	2808      	cmp	r0, #8
 8000c32:	d038      	beq.n	8000ca6 <__aeabi_i2f+0x92>
 8000c34:	3808      	subs	r0, #8
 8000c36:	4085      	lsls	r5, r0
 8000c38:	026d      	lsls	r5, r5, #9
 8000c3a:	0a6d      	lsrs	r5, r5, #9
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	e002      	b.n	8000c46 <__aeabi_i2f+0x32>
 8000c40:	2400      	movs	r4, #0
 8000c42:	2000      	movs	r0, #0
 8000c44:	2500      	movs	r5, #0
 8000c46:	05c0      	lsls	r0, r0, #23
 8000c48:	4328      	orrs	r0, r5
 8000c4a:	07e4      	lsls	r4, r4, #31
 8000c4c:	4320      	orrs	r0, r4
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	2b99      	cmp	r3, #153	@ 0x99
 8000c52:	dc14      	bgt.n	8000c7e <__aeabi_i2f+0x6a>
 8000c54:	1f42      	subs	r2, r0, #5
 8000c56:	4095      	lsls	r5, r2
 8000c58:	002a      	movs	r2, r5
 8000c5a:	4915      	ldr	r1, [pc, #84]	@ (8000cb0 <__aeabi_i2f+0x9c>)
 8000c5c:	4011      	ands	r1, r2
 8000c5e:	0755      	lsls	r5, r2, #29
 8000c60:	d01c      	beq.n	8000c9c <__aeabi_i2f+0x88>
 8000c62:	250f      	movs	r5, #15
 8000c64:	402a      	ands	r2, r5
 8000c66:	2a04      	cmp	r2, #4
 8000c68:	d018      	beq.n	8000c9c <__aeabi_i2f+0x88>
 8000c6a:	3104      	adds	r1, #4
 8000c6c:	08ca      	lsrs	r2, r1, #3
 8000c6e:	0149      	lsls	r1, r1, #5
 8000c70:	d515      	bpl.n	8000c9e <__aeabi_i2f+0x8a>
 8000c72:	239f      	movs	r3, #159	@ 0x9f
 8000c74:	0252      	lsls	r2, r2, #9
 8000c76:	1a18      	subs	r0, r3, r0
 8000c78:	0a55      	lsrs	r5, r2, #9
 8000c7a:	b2c0      	uxtb	r0, r0
 8000c7c:	e7e3      	b.n	8000c46 <__aeabi_i2f+0x32>
 8000c7e:	2205      	movs	r2, #5
 8000c80:	0029      	movs	r1, r5
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	40d1      	lsrs	r1, r2
 8000c86:	0002      	movs	r2, r0
 8000c88:	321b      	adds	r2, #27
 8000c8a:	4095      	lsls	r5, r2
 8000c8c:	002a      	movs	r2, r5
 8000c8e:	1e55      	subs	r5, r2, #1
 8000c90:	41aa      	sbcs	r2, r5
 8000c92:	430a      	orrs	r2, r1
 8000c94:	4906      	ldr	r1, [pc, #24]	@ (8000cb0 <__aeabi_i2f+0x9c>)
 8000c96:	4011      	ands	r1, r2
 8000c98:	0755      	lsls	r5, r2, #29
 8000c9a:	d1e2      	bne.n	8000c62 <__aeabi_i2f+0x4e>
 8000c9c:	08ca      	lsrs	r2, r1, #3
 8000c9e:	0252      	lsls	r2, r2, #9
 8000ca0:	0a55      	lsrs	r5, r2, #9
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	e7cf      	b.n	8000c46 <__aeabi_i2f+0x32>
 8000ca6:	026d      	lsls	r5, r5, #9
 8000ca8:	0a6d      	lsrs	r5, r5, #9
 8000caa:	308e      	adds	r0, #142	@ 0x8e
 8000cac:	e7cb      	b.n	8000c46 <__aeabi_i2f+0x32>
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	fbffffff 	.word	0xfbffffff

08000cb4 <__clzsi2>:
 8000cb4:	211c      	movs	r1, #28
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	041b      	lsls	r3, r3, #16
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d301      	bcc.n	8000cc2 <__clzsi2+0xe>
 8000cbe:	0c00      	lsrs	r0, r0, #16
 8000cc0:	3910      	subs	r1, #16
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	d301      	bcc.n	8000ccc <__clzsi2+0x18>
 8000cc8:	0a00      	lsrs	r0, r0, #8
 8000cca:	3908      	subs	r1, #8
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d301      	bcc.n	8000cd6 <__clzsi2+0x22>
 8000cd2:	0900      	lsrs	r0, r0, #4
 8000cd4:	3904      	subs	r1, #4
 8000cd6:	a202      	add	r2, pc, #8	@ (adr r2, 8000ce0 <__clzsi2+0x2c>)
 8000cd8:	5c10      	ldrb	r0, [r2, r0]
 8000cda:	1840      	adds	r0, r0, r1
 8000cdc:	4770      	bx	lr
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	02020304 	.word	0x02020304
 8000ce4:	01010101 	.word	0x01010101
	...

08000cf0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	240c      	movs	r4, #12
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	f003 ffeb 	bl	8004cdc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b52      	ldr	r3, [pc, #328]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d0a:	4b51      	ldr	r3, [pc, #324]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d12:	4b4f      	ldr	r3, [pc, #316]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d16:	2202      	movs	r2, #2
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d22:	4b4b      	ldr	r3, [pc, #300]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d24:	2104      	movs	r1, #4
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2a:	4b49      	ldr	r3, [pc, #292]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4013      	ands	r3, r2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b46      	ldr	r3, [pc, #280]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d3a:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d42:	4b43      	ldr	r3, [pc, #268]	@ (8000e50 <MX_GPIO_Init+0x160>)
 8000d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d46:	2201      	movs	r2, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d4e:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <MX_GPIO_Init+0x164>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 fd52 	bl	80027fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB1 PB2 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	22f6      	movs	r2, #246	@ 0xf6
 8000d5e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2203      	movs	r2, #3
 8000d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	4a39      	ldr	r2, [pc, #228]	@ (8000e54 <MX_GPIO_Init+0x164>)
 8000d70:	0019      	movs	r1, r3
 8000d72:	0010      	movs	r0, r2
 8000d74:	f001 fbc2 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d78:	0021      	movs	r1, r4
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	01d2      	lsls	r2, r2, #7
 8000d80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	000c      	movs	r4, r1
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2203      	movs	r2, #3
 8000d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	4a31      	ldr	r2, [pc, #196]	@ (8000e58 <MX_GPIO_Init+0x168>)
 8000d94:	0019      	movs	r1, r3
 8000d96:	0010      	movs	r0, r2
 8000d98:	f001 fbb0 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9c:	0021      	movs	r1, r4
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	0212      	lsls	r2, r2, #8
 8000da4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2288      	movs	r2, #136	@ 0x88
 8000daa:	0352      	lsls	r2, r2, #13
 8000dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	000c      	movs	r4, r1
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2201      	movs	r2, #1
 8000db4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <MX_GPIO_Init+0x168>)
 8000dba:	0019      	movs	r1, r3
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	f001 fb9d 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a25      	ldr	r2, [pc, #148]	@ (8000e5c <MX_GPIO_Init+0x16c>)
 8000dc6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	23a0      	movs	r3, #160	@ 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fb8d 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2201      	movs	r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <MX_GPIO_Init+0x164>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f001 fb7b 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2288      	movs	r2, #136	@ 0x88
 8000e12:	0352      	lsls	r2, r2, #13
 8000e14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2201      	movs	r2, #1
 8000e1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <MX_GPIO_Init+0x164>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f001 fb6a 	bl	80024fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2006      	movs	r0, #6
 8000e2e:	f001 fb33 	bl	8002498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000e32:	2006      	movs	r0, #6
 8000e34:	f001 fb45 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2007      	movs	r0, #7
 8000e3e:	f001 fb2b 	bl	8002498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f001 fb3d 	bl	80024c2 <HAL_NVIC_EnableIRQ>

}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b009      	add	sp, #36	@ 0x24
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	50000400 	.word	0x50000400
 8000e58:	50000800 	.word	0x50000800
 8000e5c:	000099ff 	.word	0x000099ff

08000e60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <MX_I2C1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000edc <MX_I2C1_Init+0x7c>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e70:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fd09 	bl	80028b4 <HAL_I2C_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ea6:	f000 fcf5 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 fc3e 	bl	8003730 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb8:	f000 fcec 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 fc81 	bl	80037c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fce3 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000080 	.word	0x20000080
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	00100d14 	.word	0x00100d14

08000ee0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b091      	sub	sp, #68	@ 0x44
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	232c      	movs	r3, #44	@ 0x2c
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f003 fef2 	bl	8004cdc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	2414      	movs	r4, #20
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	0018      	movs	r0, r3
 8000efe:	2318      	movs	r3, #24
 8000f00:	001a      	movs	r2, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	f003 feea 	bl	8004cdc <memset>
  if(i2cHandle->Instance==I2C1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <HAL_I2C_MspInit+0xb8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d13e      	bne.n	8000f90 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2220      	movs	r2, #32
 8000f16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	0018      	movs	r0, r3
 8000f22:	f003 f9af 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f2a:	f000 fcb3 	bl	8001894 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f34:	2102      	movs	r1, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	212c      	movs	r1, #44	@ 0x2c
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	22c0      	movs	r2, #192	@ 0xc0
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2212      	movs	r2, #18
 8000f54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2206      	movs	r2, #6
 8000f66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <HAL_I2C_MspInit+0xc0>)
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0010      	movs	r0, r2
 8000f70:	f001 fac4 	bl	80024fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	0389      	lsls	r1, r1, #14
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_I2C_MspInit+0xbc>)
 8000f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	039b      	lsls	r3, r3, #14
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b011      	add	sp, #68	@ 0x44
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	50000400 	.word	0x50000400

08000fa4 <OLED_ShowTempHum>:
    ssd1306_WriteString(line, Font_7x10, White);
    ssd1306_UpdateScreen();
}


void OLED_ShowTempHum(float temp, float hum, uint16_t counter,int TL,int TH) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b093      	sub	sp, #76	@ 0x4c
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	801a      	strh	r2, [r3, #0]
    char line[32];
    int tempx1 = (int)temp;
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fe0d 	bl	8000bd4 <__aeabi_f2iz>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int tempx10 = (int)(temp * 10) - tempx1 * 10;
 8000fbe:	493d      	ldr	r1, [pc, #244]	@ (80010b4 <OLED_ShowTempHum+0x110>)
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fa49 	bl	8000458 <__aeabi_fmul>
 8000fc6:	1c03      	adds	r3, r0, #0
 8000fc8:	1c18      	adds	r0, r3, #0
 8000fca:	f7ff fe03 	bl	8000bd4 <__aeabi_f2iz>
 8000fce:	0001      	movs	r1, r0
 8000fd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	075b      	lsls	r3, r3, #29
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    int humx1 = (int)hum;
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f7ff fdf6 	bl	8000bd4 <__aeabi_f2iz>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
    int humx10 = (int)(hum * 10) - humx1 * 10;
 8000fec:	4931      	ldr	r1, [pc, #196]	@ (80010b4 <OLED_ShowTempHum+0x110>)
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f7ff fa32 	bl	8000458 <__aeabi_fmul>
 8000ff4:	1c03      	adds	r3, r0, #0
 8000ff6:	1c18      	adds	r0, r3, #0
 8000ff8:	f7ff fdec 	bl	8000bd4 <__aeabi_f2iz>
 8000ffc:	0001      	movs	r1, r0
 8000ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001000:	0013      	movs	r3, r2
 8001002:	075b      	lsls	r3, r3, #29
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	18cb      	adds	r3, r1, r3
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30

    sprintf(line, ": %d.%d C", tempx1, tempx10);
 8001010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001014:	4928      	ldr	r1, [pc, #160]	@ (80010b8 <OLED_ShowTempHum+0x114>)
 8001016:	2410      	movs	r4, #16
 8001018:	1938      	adds	r0, r7, r4
 800101a:	f003 fe2b 	bl	8004c74 <siprintf>
    ssd1306_SetCursor(10, 0);
 800101e:	2100      	movs	r1, #0
 8001020:	200a      	movs	r0, #10
 8001022:	f000 ff1f 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_11x18, White);
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <OLED_ShowTempHum+0x118>)
 8001028:	1938      	adds	r0, r7, r4
 800102a:	2201      	movs	r2, #1
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f000 feea 	bl	8001e0c <ssd1306_WriteString>

    sprintf(line, ": %d.%d %%", humx1, humx10);
 8001038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800103c:	4920      	ldr	r1, [pc, #128]	@ (80010c0 <OLED_ShowTempHum+0x11c>)
 800103e:	1938      	adds	r0, r7, r4
 8001040:	f003 fe18 	bl	8004c74 <siprintf>
    ssd1306_SetCursor(10, 20);
 8001044:	2114      	movs	r1, #20
 8001046:	200a      	movs	r0, #10
 8001048:	f000 ff0c 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_11x18, White);
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <OLED_ShowTempHum+0x118>)
 800104e:	1938      	adds	r0, r7, r4
 8001050:	2201      	movs	r2, #1
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f000 fed7 	bl	8001e0c <ssd1306_WriteString>

    sprintf(line, "Temp");
 800105e:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <OLED_ShowTempHum+0x120>)
 8001060:	193b      	adds	r3, r7, r4
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f003 fe05 	bl	8004c74 <siprintf>
    ssd1306_SetCursor(0, 38);
 800106a:	2126      	movs	r1, #38	@ 0x26
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fef9 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <OLED_ShowTempHum+0x124>)
 8001074:	1938      	adds	r0, r7, r4
 8001076:	2201      	movs	r2, #1
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f000 fec4 	bl	8001e0c <ssd1306_WriteString>

    sprintf(line, "H: %d    L: %d ", TH,TL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001088:	4910      	ldr	r1, [pc, #64]	@ (80010cc <OLED_ShowTempHum+0x128>)
 800108a:	1938      	adds	r0, r7, r4
 800108c:	f003 fdf2 	bl	8004c74 <siprintf>
    ssd1306_SetCursor(0, 52);
 8001090:	2134      	movs	r1, #52	@ 0x34
 8001092:	2000      	movs	r0, #0
 8001094:	f000 fee6 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <OLED_ShowTempHum+0x124>)
 800109a:	1938      	adds	r0, r7, r4
 800109c:	2201      	movs	r2, #1
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f000 feb1 	bl	8001e0c <ssd1306_WriteString>

}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b011      	add	sp, #68	@ 0x44
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	41200000 	.word	0x41200000
 80010b8:	080055d4 	.word	0x080055d4
 80010bc:	08007d8c 	.word	0x08007d8c
 80010c0:	080055e0 	.word	0x080055e0
 80010c4:	080055ec 	.word	0x080055ec
 80010c8:	08007d80 	.word	0x08007d80
 80010cc:	080055f4 	.word	0x080055f4

080010d0 <OLED_ShowTempHum_BIG>:

void OLED_ShowTempHum_BIG(float temp, float hum, uint16_t counter) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b093      	sub	sp, #76	@ 0x4c
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	801a      	strh	r2, [r3, #0]
	char line[32];
	int tempx1 = (int)temp;
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff fd78 	bl	8000bd4 <__aeabi_f2iz>
 80010e4:	0003      	movs	r3, r0
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int tempx10 = (int)(temp * 10) - tempx1 * 10;
 80010e8:	4929      	ldr	r1, [pc, #164]	@ (8001190 <OLED_ShowTempHum_BIG+0xc0>)
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff f9b4 	bl	8000458 <__aeabi_fmul>
 80010f0:	1c03      	adds	r3, r0, #0
 80010f2:	1c18      	adds	r0, r3, #0
 80010f4:	f7ff fd6e 	bl	8000bd4 <__aeabi_f2iz>
 80010f8:	0001      	movs	r1, r0
 80010fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010fc:	0013      	movs	r3, r2
 80010fe:	075b      	lsls	r3, r3, #29
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	18cb      	adds	r3, r1, r3
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
	int humx1 = (int)hum;
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f7ff fd61 	bl	8000bd4 <__aeabi_f2iz>
 8001112:	0003      	movs	r3, r0
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
	int humx10 = (int)(hum * 10) - humx1 * 10;
 8001116:	491e      	ldr	r1, [pc, #120]	@ (8001190 <OLED_ShowTempHum_BIG+0xc0>)
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f7ff f99d 	bl	8000458 <__aeabi_fmul>
 800111e:	1c03      	adds	r3, r0, #0
 8001120:	1c18      	adds	r0, r3, #0
 8001122:	f7ff fd57 	bl	8000bd4 <__aeabi_f2iz>
 8001126:	0001      	movs	r1, r0
 8001128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800112a:	0013      	movs	r3, r2
 800112c:	075b      	lsls	r3, r3, #29
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	18cb      	adds	r3, r1, r3
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30


	sprintf(line, ": %d.%d C", tempx1, tempx10);
 800113a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800113c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800113e:	4915      	ldr	r1, [pc, #84]	@ (8001194 <OLED_ShowTempHum_BIG+0xc4>)
 8001140:	2410      	movs	r4, #16
 8001142:	1938      	adds	r0, r7, r4
 8001144:	f003 fd96 	bl	8004c74 <siprintf>
	ssd1306_SetCursor(10, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	200a      	movs	r0, #10
 800114c:	f000 fe8a 	bl	8001e64 <ssd1306_SetCursor>
	ssd1306_WriteString(line, Font_16x24, White);
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <OLED_ShowTempHum_BIG+0xc8>)
 8001152:	1938      	adds	r0, r7, r4
 8001154:	2201      	movs	r2, #1
 8001156:	9200      	str	r2, [sp, #0]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f000 fe55 	bl	8001e0c <ssd1306_WriteString>
	//ssd1306_DrawBitmap(0, 0, Temp_bitmap, 8, 18, White); // 在 x=100, y=0 顯示

	sprintf(line, ": %d.%d %%", humx1, humx10);
 8001162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <OLED_ShowTempHum_BIG+0xcc>)
 8001168:	1938      	adds	r0, r7, r4
 800116a:	f003 fd83 	bl	8004c74 <siprintf>
	ssd1306_SetCursor(10, 40);
 800116e:	2128      	movs	r1, #40	@ 0x28
 8001170:	200a      	movs	r0, #10
 8001172:	f000 fe77 	bl	8001e64 <ssd1306_SetCursor>
	ssd1306_WriteString(line, Font_16x24, White);
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <OLED_ShowTempHum_BIG+0xc8>)
 8001178:	1938      	adds	r0, r7, r4
 800117a:	2201      	movs	r2, #1
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f000 fe42 	bl	8001e0c <ssd1306_WriteString>
	//ssd1306_DrawBitmap(1, 45, Humidity_bitmap, 8, 12, White); // 在 x=100, y=0 顯示

}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b011      	add	sp, #68	@ 0x44
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	41200000 	.word	0x41200000
 8001194:	080055d4 	.word	0x080055d4
 8001198:	08007d98 	.word	0x08007d98
 800119c:	080055e0 	.word	0x080055e0

080011a0 <ShowNormalScreen>:



void ShowNormalScreen(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af02      	add	r7, sp, #8
    ssd1306_WriteCommand(0xAF);
 80011a6:	20af      	movs	r0, #175	@ 0xaf
 80011a8:	f000 fc3c 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 fcd9 	bl	8001b64 <ssd1306_Fill>
    ssd1306_SetCursor(15, 0);
 80011b2:	2100      	movs	r1, #0
 80011b4:	200f      	movs	r0, #15
 80011b6:	f000 fe55 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("Normal...", Font_16x24, White);
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <ShowNormalScreen+0x70>)
 80011bc:	4815      	ldr	r0, [pc, #84]	@ (8001214 <ShowNormalScreen+0x74>)
 80011be:	2201      	movs	r2, #1
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f000 fe20 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_SetCursor(30, 25);
 80011cc:	2119      	movs	r1, #25
 80011ce:	201e      	movs	r0, #30
 80011d0:	f000 fe48 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("mode", Font_16x24, White);
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <ShowNormalScreen+0x70>)
 80011d6:	4810      	ldr	r0, [pc, #64]	@ (8001218 <ShowNormalScreen+0x78>)
 80011d8:	2201      	movs	r2, #1
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f000 fe13 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_SetCursor(3, 50);
 80011e6:	2132      	movs	r1, #50	@ 0x32
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 fe3b 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("( o_o )/", Font_7x10, White);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <ShowNormalScreen+0x7c>)
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <ShowNormalScreen+0x80>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f000 fe06 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_SetContrast(240);
 8001200:	20f0      	movs	r0, #240	@ 0xf0
 8001202:	f000 fed7 	bl	8001fb4 <ssd1306_SetContrast>
    ssd1306_UpdateScreen();
 8001206:	f000 fcc7 	bl	8001b98 <ssd1306_UpdateScreen>
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08007d98 	.word	0x08007d98
 8001214:	08005604 	.word	0x08005604
 8001218:	08005610 	.word	0x08005610
 800121c:	08007d80 	.word	0x08007d80
 8001220:	08005618 	.word	0x08005618

08001224 <ShowSleepScreen>:

void ShowSleepScreen(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 fc9a 	bl	8001b64 <ssd1306_Fill>
    ssd1306_SetCursor(20, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	2014      	movs	r0, #20
 8001234:	f000 fe16 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("Sleep", Font_16x24, White);
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <ShowSleepScreen+0x64>)
 800123a:	4814      	ldr	r0, [pc, #80]	@ (800128c <ShowSleepScreen+0x68>)
 800123c:	2201      	movs	r2, #1
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	6819      	ldr	r1, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f000 fde1 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_SetCursor(30, 23);
 800124a:	2117      	movs	r1, #23
 800124c:	201e      	movs	r0, #30
 800124e:	f000 fe09 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("mode", Font_16x24, White);
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <ShowSleepScreen+0x64>)
 8001254:	480e      	ldr	r0, [pc, #56]	@ (8001290 <ShowSleepScreen+0x6c>)
 8001256:	2201      	movs	r2, #1
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f000 fdd4 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_SetCursor(15, 50);
 8001264:	2132      	movs	r1, #50	@ 0x32
 8001266:	200f      	movs	r0, #15
 8001268:	f000 fdfc 	bl	8001e64 <ssd1306_SetCursor>
    ssd1306_WriteString("( -.-)Zzz...", Font_7x10, White);
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <ShowSleepScreen+0x70>)
 800126e:	480a      	ldr	r0, [pc, #40]	@ (8001298 <ShowSleepScreen+0x74>)
 8001270:	2201      	movs	r2, #1
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f000 fdc7 	bl	8001e0c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800127e:	f000 fc8b 	bl	8001b98 <ssd1306_UpdateScreen>
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08007d98 	.word	0x08007d98
 800128c:	08005624 	.word	0x08005624
 8001290:	08005610 	.word	0x08005610
 8001294:	08007d80 	.word	0x08007d80
 8001298:	0800562c 	.word	0x0800562c

0800129c <SHT40_CRC8>:

/* USER CODE BEGIN PV */


uint8_t sht40_buffer[6];
uint8_t SHT40_CRC8(const uint8_t *data) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    uint8_t crc = 0xFF;
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	22ff      	movs	r2, #255	@ 0xff
 80012aa:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 2; i++) {
 80012ac:	230e      	movs	r3, #14
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e039      	b.n	800132a <SHT40_CRC8+0x8e>
        crc ^= data[i];
 80012b6:	230e      	movs	r3, #14
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	18d3      	adds	r3, r2, r3
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	220f      	movs	r2, #15
 80012c4:	18bb      	adds	r3, r7, r2
 80012c6:	18ba      	adds	r2, r7, r2
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	404a      	eors	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++)
 80012ce:	230d      	movs	r3, #13
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e01d      	b.n	8001314 <SHT40_CRC8+0x78>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80012d8:	220f      	movs	r2, #15
 80012da:	18bb      	adds	r3, r7, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da09      	bge.n	80012f8 <SHT40_CRC8+0x5c>
 80012e4:	18bb      	adds	r3, r7, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	18db      	adds	r3, r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	2231      	movs	r2, #49	@ 0x31
 80012f0:	4053      	eors	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	e004      	b.n	8001302 <SHT40_CRC8+0x66>
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	18db      	adds	r3, r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	220f      	movs	r2, #15
 8001304:	18ba      	adds	r2, r7, r2
 8001306:	7013      	strb	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++)
 8001308:	210d      	movs	r1, #13
 800130a:	187b      	adds	r3, r7, r1
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	187b      	adds	r3, r7, r1
 8001310:	3201      	adds	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	230d      	movs	r3, #13
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b07      	cmp	r3, #7
 800131c:	d9dc      	bls.n	80012d8 <SHT40_CRC8+0x3c>
    for (uint8_t i = 0; i < 2; i++) {
 800131e:	210e      	movs	r1, #14
 8001320:	187b      	adds	r3, r7, r1
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	187b      	adds	r3, r7, r1
 8001326:	3201      	adds	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	230e      	movs	r3, #14
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d9c0      	bls.n	80012b6 <SHT40_CRC8+0x1a>
    }
    return crc;
 8001334:	230f      	movs	r3, #15
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	781b      	ldrb	r3, [r3, #0]
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <SHT40_Read>:

uint8_t SHT40_Read(float* temp, float* hum) {
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b087      	sub	sp, #28
 8001348:	af02      	add	r7, sp, #8
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    uint8_t cmd = SHT40_CMD_HIGH_PRECISION;
 800134e:	210b      	movs	r1, #11
 8001350:	187b      	adds	r3, r7, r1
 8001352:	22fd      	movs	r2, #253	@ 0xfd
 8001354:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADDR, &cmd, 1, 100) != HAL_OK) return 0;
 8001356:	187a      	adds	r2, r7, r1
 8001358:	483d      	ldr	r0, [pc, #244]	@ (8001450 <SHT40_Read+0x10c>)
 800135a:	2364      	movs	r3, #100	@ 0x64
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	2188      	movs	r1, #136	@ 0x88
 8001362:	f001 fb4d 	bl	8002a00 <HAL_I2C_Master_Transmit>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <SHT40_Read+0x2a>
 800136a:	2300      	movs	r3, #0
 800136c:	e06c      	b.n	8001448 <SHT40_Read+0x104>
    HAL_Delay(10);
 800136e:	200a      	movs	r0, #10
 8001370:	f000 ffa6 	bl	80022c0 <HAL_Delay>
    if (HAL_I2C_Master_Receive(&hi2c1, SHT40_ADDR, sht40_buffer, 6, 100) != HAL_OK) return 0;
 8001374:	4a37      	ldr	r2, [pc, #220]	@ (8001454 <SHT40_Read+0x110>)
 8001376:	4836      	ldr	r0, [pc, #216]	@ (8001450 <SHT40_Read+0x10c>)
 8001378:	2364      	movs	r3, #100	@ 0x64
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2306      	movs	r3, #6
 800137e:	2188      	movs	r1, #136	@ 0x88
 8001380:	f001 fc68 	bl	8002c54 <HAL_I2C_Master_Receive>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <SHT40_Read+0x48>
 8001388:	2300      	movs	r3, #0
 800138a:	e05d      	b.n	8001448 <SHT40_Read+0x104>

    if (SHT40_CRC8(&sht40_buffer[0]) != sht40_buffer[2]) return 0;
 800138c:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <SHT40_Read+0x110>)
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff84 	bl	800129c <SHT40_CRC8>
 8001394:	0003      	movs	r3, r0
 8001396:	001a      	movs	r2, r3
 8001398:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <SHT40_Read+0x110>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <SHT40_Read+0x60>
 80013a0:	2300      	movs	r3, #0
 80013a2:	e051      	b.n	8001448 <SHT40_Read+0x104>
    if (SHT40_CRC8(&sht40_buffer[3]) != sht40_buffer[5]) return 0;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <SHT40_Read+0x114>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff ff78 	bl	800129c <SHT40_CRC8>
 80013ac:	0003      	movs	r3, r0
 80013ae:	001a      	movs	r2, r3
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <SHT40_Read+0x110>)
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <SHT40_Read+0x78>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e045      	b.n	8001448 <SHT40_Read+0x104>

    uint16_t rawT = (sht40_buffer[0] << 8) | sht40_buffer[1];
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <SHT40_Read+0x110>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <SHT40_Read+0x110>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	210e      	movs	r1, #14
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	801a      	strh	r2, [r3, #0]
    uint16_t rawH = (sht40_buffer[3] << 8) | sht40_buffer[4];
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <SHT40_Read+0x110>)
 80013d8:	78db      	ldrb	r3, [r3, #3]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <SHT40_Read+0x110>)
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	240c      	movs	r4, #12
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	801a      	strh	r2, [r3, #0]

    *temp = -45.0f + 175.0f * (rawT / 65535.0f);
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fc0d 	bl	8000c14 <__aeabi_i2f>
 80013fa:	1c03      	adds	r3, r0, #0
 80013fc:	4917      	ldr	r1, [pc, #92]	@ (800145c <SHT40_Read+0x118>)
 80013fe:	1c18      	adds	r0, r3, #0
 8001400:	f7fe ff14 	bl	800022c <__aeabi_fdiv>
 8001404:	1c03      	adds	r3, r0, #0
 8001406:	4916      	ldr	r1, [pc, #88]	@ (8001460 <SHT40_Read+0x11c>)
 8001408:	1c18      	adds	r0, r3, #0
 800140a:	f7ff f825 	bl	8000458 <__aeabi_fmul>
 800140e:	1c03      	adds	r3, r0, #0
 8001410:	4914      	ldr	r1, [pc, #80]	@ (8001464 <SHT40_Read+0x120>)
 8001412:	1c18      	adds	r0, r3, #0
 8001414:	f7ff f97a 	bl	800070c <__aeabi_fsub>
 8001418:	1c03      	adds	r3, r0, #0
 800141a:	1c1a      	adds	r2, r3, #0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
    *hum  = 100.0f * (rawH / 65535.0f);
 8001420:	193b      	adds	r3, r7, r4
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fbf5 	bl	8000c14 <__aeabi_i2f>
 800142a:	1c03      	adds	r3, r0, #0
 800142c:	490b      	ldr	r1, [pc, #44]	@ (800145c <SHT40_Read+0x118>)
 800142e:	1c18      	adds	r0, r3, #0
 8001430:	f7fe fefc 	bl	800022c <__aeabi_fdiv>
 8001434:	1c03      	adds	r3, r0, #0
 8001436:	490c      	ldr	r1, [pc, #48]	@ (8001468 <SHT40_Read+0x124>)
 8001438:	1c18      	adds	r0, r3, #0
 800143a:	f7ff f80d 	bl	8000458 <__aeabi_fmul>
 800143e:	1c03      	adds	r3, r0, #0
 8001440:	1c1a      	adds	r2, r3, #0
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]
    return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b005      	add	sp, #20
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	20000080 	.word	0x20000080
 8001454:	200000d4 	.word	0x200000d4
 8001458:	200000d7 	.word	0x200000d7
 800145c:	477fff00 	.word	0x477fff00
 8001460:	432f0000 	.word	0x432f0000
 8001464:	42340000 	.word	0x42340000
 8001468:	42c80000 	.word	0x42c80000

0800146c <OLED_BreathEffect>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void OLED_BreathEffect(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

	static uint8_t contrast = 0;// 從最小亮度起始
	static int8_t direction = 1;
	static uint32_t last_tick = 0;

	if (HAL_GetTick() - last_tick < 10) return; // 每 10ms 更新
 8001470:	f000 ff1c 	bl	80022ac <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <OLED_BreathEffect+0x94>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b09      	cmp	r3, #9
 800147e:	d93c      	bls.n	80014fa <OLED_BreathEffect+0x8e>

	last_tick = HAL_GetTick();
 8001480:	f000 ff14 	bl	80022ac <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <OLED_BreathEffect+0x94>)
 8001488:	601a      	str	r2, [r3, #0]

	contrast += direction * 36;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <OLED_BreathEffect+0x98>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b25b      	sxtb	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2224      	movs	r2, #36	@ 0x24
 8001494:	4353      	muls	r3, r2
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <OLED_BreathEffect+0x9c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014a2:	701a      	strb	r2, [r3, #0]
	if (contrast >= 240) {
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2bef      	cmp	r3, #239	@ 0xef
 80014aa:	d906      	bls.n	80014ba <OLED_BreathEffect+0x4e>
	contrast = 255;
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014ae:	22ff      	movs	r2, #255	@ 0xff
 80014b0:	701a      	strb	r2, [r3, #0]
	direction = -1;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <OLED_BreathEffect+0x98>)
 80014b4:	22ff      	movs	r2, #255	@ 0xff
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e019      	b.n	80014ee <OLED_BreathEffect+0x82>
	}

	else if (contrast <= 3) { // 最低亮度為 3，不會全暗
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d815      	bhi.n	80014ee <OLED_BreathEffect+0x82>
	contrast = 3;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014c4:	2203      	movs	r2, #3
 80014c6:	701a      	strb	r2, [r3, #0]
	direction = 1;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <OLED_BreathEffect+0x98>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]

	// 可選：關閉 OLED 來降低電流（部分 OLED 支援）
	ssd1306_WriteCommand(0xAE);  //Display OFF
 80014ce:	20ae      	movs	r0, #174	@ 0xae
 80014d0:	f000 faa8 	bl	8001a24 <ssd1306_WriteCommand>

	// 進入 STOP 模式
	HAL_SuspendTick();
 80014d4:	f000 ff18 	bl	8002308 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f002 f9c0 	bl	8003860 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 80014e0:	f000 ff20 	bl	8002324 <HAL_ResumeTick>
	// 醒來後重新設置時鐘
	SystemClock_Config();
 80014e4:	f000 f98a 	bl	80017fc <SystemClock_Config>
	ssd1306_WriteCommand(0xAF);  // Display ON
 80014e8:	20af      	movs	r0, #175	@ 0xaf
 80014ea:	f000 fa9b 	bl	8001a24 <ssd1306_WriteCommand>
	}
	ssd1306_SetContrast(contrast);
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <OLED_BreathEffect+0x9c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fd5e 	bl	8001fb4 <ssd1306_SetContrast>
 80014f8:	e000      	b.n	80014fc <OLED_BreathEffect+0x90>
	if (HAL_GetTick() - last_tick < 10) return; // 每 10ms 更新
 80014fa:	46c0      	nop			@ (mov r8, r8)
	}
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000f8 	.word	0x200000f8
 8001504:	20000004 	.word	0x20000004
 8001508:	200000fc 	.word	0x200000fc

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fe4f 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f971 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f7ff fbe9 	bl	8000cf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800151e:	f7ff fc9f 	bl	8000e60 <MX_I2C1_Init>
  MX_RTC_Init();
 8001522:	f000 f9bd 	bl	80018a0 <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1306_Init();
 8001526:	f000 fab1 	bl	8001a8c <ssd1306_Init>
  ssd1306_WriteCommand(0xC0);  // 垂直翻轉
 800152a:	20c0      	movs	r0, #192	@ 0xc0
 800152c:	f000 fa7a 	bl	8001a24 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xA0);  // 水平翻轉
 8001530:	20a0      	movs	r0, #160	@ 0xa0
 8001532:	f000 fa77 	bl	8001a24 <ssd1306_WriteCommand>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // 將 PB0 設為 LOW
 8001536:	4b9f      	ldr	r3, [pc, #636]	@ (80017b4 <main+0x2a8>)
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	0018      	movs	r0, r3
 800153e:	f001 f95e 	bl	80027fe <HAL_GPIO_WritePin>

  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);  // 一定要先停掉
 8001542:	4b9d      	ldr	r3, [pc, #628]	@ (80017b8 <main+0x2ac>)
 8001544:	0018      	movs	r0, r3
 8001546:	f003 fb0d 	bl	8004b64 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 19, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);  // 理論每19秒,實測16秒
 800154a:	4b9b      	ldr	r3, [pc, #620]	@ (80017b8 <main+0x2ac>)
 800154c:	2204      	movs	r2, #4
 800154e:	2113      	movs	r1, #19
 8001550:	0018      	movs	r0, r3
 8001552:	f003 fa6d 	bl	8004a30 <HAL_RTCEx_SetWakeUpTimer_IT>
  HAL_Delay(200);
 8001556:	20c8      	movs	r0, #200	@ 0xc8
 8001558:	f000 feb2 	bl	80022c0 <HAL_Delay>


  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0 )  {// 若按鈕按下（低電位）
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	4a96      	ldr	r2, [pc, #600]	@ (80017bc <main+0x2b0>)
 8001562:	0019      	movs	r1, r3
 8001564:	0010      	movs	r0, r2
 8001566:	f001 f92d 	bl	80027c4 <HAL_GPIO_ReadPin>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d138      	bne.n	80015e0 <main+0xd4>

		  switch(SW_mode){
 800156e:	4b94      	ldr	r3, [pc, #592]	@ (80017c0 <main+0x2b4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <main+0x70>
 8001576:	2b02      	cmp	r3, #2
 8001578:	d00d      	beq.n	8001596 <main+0x8a>
 800157a:	e019      	b.n	80015b0 <main+0xa4>
		  case 0 :
			  SW_mode = 1;
 800157c:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <main+0x2b4>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
			  SW_mode_rollback = 0;
 8001582:	4b90      	ldr	r3, [pc, #576]	@ (80017c4 <main+0x2b8>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
			  ShowSleepScreen();
 8001588:	f7ff fe4c 	bl	8001224 <ShowSleepScreen>
			  HAL_Delay(2500);// 延遲
 800158c:	4b8e      	ldr	r3, [pc, #568]	@ (80017c8 <main+0x2bc>)
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fe96 	bl	80022c0 <HAL_Delay>
			  break;
 8001594:	e024      	b.n	80015e0 <main+0xd4>
		  case 2 :
			  SW_mode = 1;
 8001596:	4b8a      	ldr	r3, [pc, #552]	@ (80017c0 <main+0x2b4>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
			  SW_mode_rollback = 2;
 800159c:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <main+0x2b8>)
 800159e:	2202      	movs	r2, #2
 80015a0:	601a      	str	r2, [r3, #0]
			  ShowSleepScreen();
 80015a2:	f7ff fe3f 	bl	8001224 <ShowSleepScreen>
			  HAL_Delay(2500);// 延遲
 80015a6:	4b88      	ldr	r3, [pc, #544]	@ (80017c8 <main+0x2bc>)
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fe89 	bl	80022c0 <HAL_Delay>

			  break;
 80015ae:	e017      	b.n	80015e0 <main+0xd4>
		  default:

			  if(SW_mode_rollback == 0){
 80015b0:	4b84      	ldr	r3, [pc, #528]	@ (80017c4 <main+0x2b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <main+0xc0>
				  SW_mode = 0;
 80015b8:	4b81      	ldr	r3, [pc, #516]	@ (80017c0 <main+0x2b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
				  ShowNormalScreen();
 80015be:	f7ff fdef 	bl	80011a0 <ShowNormalScreen>
				  HAL_Delay(1500);// 延遲
 80015c2:	4b82      	ldr	r3, [pc, #520]	@ (80017cc <main+0x2c0>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 fe7b 	bl	80022c0 <HAL_Delay>
			  }else{
				  SW_mode = 2;
				  ShowNormalScreen();
				  HAL_Delay(1500);// 延遲
			  }
			  break;
 80015ca:	e008      	b.n	80015de <main+0xd2>
				  SW_mode = 2;
 80015cc:	4b7c      	ldr	r3, [pc, #496]	@ (80017c0 <main+0x2b4>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
				  ShowNormalScreen();
 80015d2:	f7ff fde5 	bl	80011a0 <ShowNormalScreen>
				  HAL_Delay(1500);// 延遲
 80015d6:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <main+0x2c0>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f000 fe71 	bl	80022c0 <HAL_Delay>
			  break;
 80015de:	46c0      	nop			@ (mov r8, r8)
		  }
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0){
 80015e0:	4b74      	ldr	r3, [pc, #464]	@ (80017b4 <main+0x2a8>)
 80015e2:	2108      	movs	r1, #8
 80015e4:	0018      	movs	r0, r3
 80015e6:	f001 f8ed 	bl	80027c4 <HAL_GPIO_ReadPin>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d12c      	bne.n	8001648 <main+0x13c>
		  switch(SW_mode){
 80015ee:	4b74      	ldr	r3, [pc, #464]	@ (80017c0 <main+0x2b4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <main+0xf0>
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d007      	beq.n	800160a <main+0xfe>
 80015fa:	e00d      	b.n	8001618 <main+0x10c>
		  case 0 :
			  SW_mode=2;
 80015fc:	4b70      	ldr	r3, [pc, #448]	@ (80017c0 <main+0x2b4>)
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
			  SW_mode_rollback=0;
 8001602:	4b70      	ldr	r3, [pc, #448]	@ (80017c4 <main+0x2b8>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

			  break;
 8001608:	e01e      	b.n	8001648 <main+0x13c>
		  case 2 :
			  SW_mode=0;
 800160a:	4b6d      	ldr	r3, [pc, #436]	@ (80017c0 <main+0x2b4>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
			  SW_mode_rollback=2;
 8001610:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <main+0x2b8>)
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
			  break;
 8001616:	e017      	b.n	8001648 <main+0x13c>
		  default:
			  if(SW_mode_rollback == 0){
 8001618:	4b6a      	ldr	r3, [pc, #424]	@ (80017c4 <main+0x2b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <main+0x128>
				  SW_mode = 0;
 8001620:	4b67      	ldr	r3, [pc, #412]	@ (80017c0 <main+0x2b4>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
				  ShowNormalScreen();
 8001626:	f7ff fdbb 	bl	80011a0 <ShowNormalScreen>
				  HAL_Delay(1500);// 延遲
 800162a:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <main+0x2c0>)
 800162c:	0018      	movs	r0, r3
 800162e:	f000 fe47 	bl	80022c0 <HAL_Delay>
			  }else{
				  SW_mode = 2;
				  ShowNormalScreen();
				  HAL_Delay(1500);// 延遲
			  }
			  break;
 8001632:	e008      	b.n	8001646 <main+0x13a>
				  SW_mode = 2;
 8001634:	4b62      	ldr	r3, [pc, #392]	@ (80017c0 <main+0x2b4>)
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
				  ShowNormalScreen();
 800163a:	f7ff fdb1 	bl	80011a0 <ShowNormalScreen>
				  HAL_Delay(1500);// 延遲
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <main+0x2c0>)
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fe3d 	bl	80022c0 <HAL_Delay>
			  break;
 8001646:	46c0      	nop			@ (mov r8, r8)
		  }	  }


	  xxz++;
 8001648:	4b61      	ldr	r3, [pc, #388]	@ (80017d0 <main+0x2c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4b60      	ldr	r3, [pc, #384]	@ (80017d0 <main+0x2c4>)
 8001650:	601a      	str	r2, [r3, #0]
	  TO=temp;
 8001652:	4b60      	ldr	r3, [pc, #384]	@ (80017d4 <main+0x2c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c18      	adds	r0, r3, #0
 8001658:	f7ff fabc 	bl	8000bd4 <__aeabi_f2iz>
 800165c:	0002      	movs	r2, r0
 800165e:	4b5e      	ldr	r3, [pc, #376]	@ (80017d8 <main+0x2cc>)
 8001660:	601a      	str	r2, [r3, #0]
	  if(TO == 0){
 8001662:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <main+0x2cc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d013      	beq.n	8001692 <main+0x186>
	  }else{
		  if(TO > TH ){
 800166a:	4b5b      	ldr	r3, [pc, #364]	@ (80017d8 <main+0x2cc>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <main+0x2d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	dd03      	ble.n	800167e <main+0x172>
		  TH=TO;
 8001676:	4b58      	ldr	r3, [pc, #352]	@ (80017d8 <main+0x2cc>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b58      	ldr	r3, [pc, #352]	@ (80017dc <main+0x2d0>)
 800167c:	601a      	str	r2, [r3, #0]
	  }
		  if(TO < TL ){
 800167e:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <main+0x2cc>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <main+0x2d4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	da03      	bge.n	8001692 <main+0x186>
			 TL=TO;
 800168a:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <main+0x2cc>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <main+0x2d4>)
 8001690:	601a      	str	r2, [r3, #0]
		  }}


	  ssd1306_Fill(Black);
 8001692:	2000      	movs	r0, #0
 8001694:	f000 fa66 	bl	8001b64 <ssd1306_Fill>
	  if(SW_mode == 1){
 8001698:	4b49      	ldr	r3, [pc, #292]	@ (80017c0 <main+0x2b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d10d      	bne.n	80016bc <main+0x1b0>
		  ssd1306_WriteCommand(0xAE);  //Display OFF
 80016a0:	20ae      	movs	r0, #174	@ 0xae
 80016a2:	f000 f9bf 	bl	8001a24 <ssd1306_WriteCommand>
		  // 進入 STOP 模式
		  HAL_SuspendTick();
 80016a6:	f000 fe2f 	bl	8002308 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80016aa:	2101      	movs	r1, #1
 80016ac:	2000      	movs	r0, #0
 80016ae:	f002 f8d7 	bl	8003860 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick();
 80016b2:	f000 fe37 	bl	8002324 <HAL_ResumeTick>
		  // 醒來後重新設置時鐘
		  SystemClock_Config();
 80016b6:	f000 f8a1 	bl	80017fc <SystemClock_Config>
 80016ba:	e074      	b.n	80017a6 <main+0x29a>
	  }else if(SW_mode == 2){
 80016bc:	4b40      	ldr	r3, [pc, #256]	@ (80017c0 <main+0x2b4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d128      	bne.n	8001716 <main+0x20a>
		  if (SHT40_Read(&temp, &hum)) {
 80016c4:	4a47      	ldr	r2, [pc, #284]	@ (80017e4 <main+0x2d8>)
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <main+0x2c8>)
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff fe3a 	bl	8001344 <SHT40_Read>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d068      	beq.n	80017a6 <main+0x29a>
			  ssd1306_DrawBitmap(0, 0, Temp_bitmap, 8, 18, White); // 在 x=100, y=0 顯示
 80016d4:	4a44      	ldr	r2, [pc, #272]	@ (80017e8 <main+0x2dc>)
 80016d6:	2301      	movs	r3, #1
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2312      	movs	r3, #18
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2308      	movs	r3, #8
 80016e0:	2100      	movs	r1, #0
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fbd8 	bl	8001e98 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(1, 45, Humidity_bitmap, 8, 12, White); // 在 x=100, y=0 顯示
 80016e8:	4a40      	ldr	r2, [pc, #256]	@ (80017ec <main+0x2e0>)
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	230c      	movs	r3, #12
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2308      	movs	r3, #8
 80016f4:	212d      	movs	r1, #45	@ 0x2d
 80016f6:	2001      	movs	r0, #1
 80016f8:	f000 fbce 	bl	8001e98 <ssd1306_DrawBitmap>
			  OLED_ShowTempHum_BIG(temp, hum, xxz);
 80016fc:	4b35      	ldr	r3, [pc, #212]	@ (80017d4 <main+0x2c8>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <main+0x2d8>)
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <main+0x2c4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	001a      	movs	r2, r3
 800170c:	f7ff fce0 	bl	80010d0 <OLED_ShowTempHum_BIG>
			  OLED_BreathEffect();
 8001710:	f7ff feac 	bl	800146c <OLED_BreathEffect>
 8001714:	e047      	b.n	80017a6 <main+0x29a>
		  }
	  }else{

		  if (SHT40_Read(&temp, &hum)) {
 8001716:	4a33      	ldr	r2, [pc, #204]	@ (80017e4 <main+0x2d8>)
 8001718:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <main+0x2c8>)
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fe11 	bl	8001344 <SHT40_Read>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d025      	beq.n	8001772 <main+0x266>
			  ssd1306_DrawBitmap(1, 24, Humidity_bitmap, 8, 12, White); // 在 x=100, y=0 顯示
 8001726:	4a31      	ldr	r2, [pc, #196]	@ (80017ec <main+0x2e0>)
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	230c      	movs	r3, #12
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2308      	movs	r3, #8
 8001732:	2118      	movs	r1, #24
 8001734:	2001      	movs	r0, #1
 8001736:	f000 fbaf 	bl	8001e98 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(0, 0, Temp_bitmap, 8, 18, White); // 在 x=100, y=0 顯示
 800173a:	4a2b      	ldr	r2, [pc, #172]	@ (80017e8 <main+0x2dc>)
 800173c:	2301      	movs	r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2312      	movs	r3, #18
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2308      	movs	r3, #8
 8001746:	2100      	movs	r1, #0
 8001748:	2000      	movs	r0, #0
 800174a:	f000 fba5 	bl	8001e98 <ssd1306_DrawBitmap>
			  OLED_ShowTempHum(temp, hum, xxz,TL,TH);
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <main+0x2c8>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <main+0x2d8>)
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <main+0x2c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <main+0x2d4>)
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <main+0x2d0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	0023      	movs	r3, r4
 8001768:	f7ff fc1c 	bl	8000fa4 <OLED_ShowTempHum>
			  OLED_BreathEffect();
 800176c:	f7ff fe7e 	bl	800146c <OLED_BreathEffect>
 8001770:	e019      	b.n	80017a6 <main+0x29a>

 	  }
 	  else {
 	      ssd1306_SetCursor(20, 0);
 8001772:	2100      	movs	r1, #0
 8001774:	2014      	movs	r0, #20
 8001776:	f000 fb75 	bl	8001e64 <ssd1306_SetCursor>
 	      ssd1306_WriteString("SHT40", Font_16x24, White);
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <main+0x2e4>)
 800177c:	481d      	ldr	r0, [pc, #116]	@ (80017f4 <main+0x2e8>)
 800177e:	2201      	movs	r2, #1
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f000 fb40 	bl	8001e0c <ssd1306_WriteString>
 	      ssd1306_SetCursor(20, 30);
 800178c:	211e      	movs	r1, #30
 800178e:	2014      	movs	r0, #20
 8001790:	f000 fb68 	bl	8001e64 <ssd1306_SetCursor>
 	      ssd1306_WriteString("ERROR", Font_16x24, White);
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <main+0x2e4>)
 8001796:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <main+0x2ec>)
 8001798:	2201      	movs	r2, #1
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f000 fb33 	bl	8001e0c <ssd1306_WriteString>

 	  }	  }
 	  ssd1306_UpdateScreen();
 80017a6:	f000 f9f7 	bl	8001b98 <ssd1306_UpdateScreen>
 	  HAL_Delay(10);
 80017aa:	200a      	movs	r0, #10
 80017ac:	f000 fd88 	bl	80022c0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0 )  {// 若按鈕按下（低電位）
 80017b0:	e6d4      	b.n	800155c <main+0x50>
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	50000400 	.word	0x50000400
 80017b8:	20000100 	.word	0x20000100
 80017bc:	50000800 	.word	0x50000800
 80017c0:	200000e0 	.word	0x200000e0
 80017c4:	200000e4 	.word	0x200000e4
 80017c8:	000009c4 	.word	0x000009c4
 80017cc:	000005dc 	.word	0x000005dc
 80017d0:	200000dc 	.word	0x200000dc
 80017d4:	200000f0 	.word	0x200000f0
 80017d8:	200000ec 	.word	0x200000ec
 80017dc:	200000e8 	.word	0x200000e8
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200000f4 	.word	0x200000f4
 80017e8:	080056d4 	.word	0x080056d4
 80017ec:	080056c8 	.word	0x080056c8
 80017f0:	08007d98 	.word	0x08007d98
 80017f4:	0800563c 	.word	0x0800563c
 80017f8:	08005644 	.word	0x08005644

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b093      	sub	sp, #76	@ 0x4c
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	2414      	movs	r4, #20
 8001804:	193b      	adds	r3, r7, r4
 8001806:	0018      	movs	r0, r3
 8001808:	2334      	movs	r3, #52	@ 0x34
 800180a:	001a      	movs	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	f003 fa65 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	0018      	movs	r0, r3
 8001816:	2310      	movs	r3, #16
 8001818:	001a      	movs	r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	f003 fa5e 	bl	8004cdc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	0018      	movs	r0, r3
 8001826:	f002 f853 	bl	80038d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	220a      	movs	r2, #10
 800182e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	0052      	lsls	r2, r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2280      	movs	r2, #128	@ 0x80
 800183c:	0152      	lsls	r2, r2, #5
 800183e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2201      	movs	r2, #1
 800184a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	193b      	adds	r3, r7, r4
 8001854:	0018      	movs	r0, r3
 8001856:	f002 f87b 	bl	8003950 <HAL_RCC_OscConfig>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800185e:	f000 f819 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2100      	movs	r1, #0
 800187e:	0018      	movs	r0, r3
 8001880:	f002 fb76 	bl	8003f70 <HAL_RCC_ClockConfig>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001888:	f000 f804 	bl	8001894 <Error_Handler>
  }
}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b013      	add	sp, #76	@ 0x4c
 8001892:	bd90      	pop	{r4, r7, pc}

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	0018      	movs	r0, r3
 80018aa:	2314      	movs	r3, #20
 80018ac:	001a      	movs	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	f003 fa14 	bl	8004cdc <memset>
  RTC_DateTypeDef sDate = {0};
 80018b4:	003b      	movs	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018bc:	4a32      	ldr	r2, [pc, #200]	@ (8001988 <MX_RTC_Init+0xe8>)
 80018be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018c0:	4b30      	ldr	r3, [pc, #192]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018c8:	227f      	movs	r2, #127	@ 0x7f
 80018ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018ce:	22ff      	movs	r2, #255	@ 0xff
 80018d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	05d2      	lsls	r2, r2, #23
 80018ea:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018ec:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <MX_RTC_Init+0xe4>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f002 fdeb 	bl	80044d0 <HAL_RTC_Init>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80018fe:	f7ff ffc9 	bl	8001894 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001926:	1d39      	adds	r1, r7, #4
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_RTC_Init+0xe4>)
 800192a:	2201      	movs	r2, #1
 800192c:	0018      	movs	r0, r3
 800192e:	f002 fe71 	bl	8004614 <HAL_RTC_SetTime>
 8001932:	1e03      	subs	r3, r0, #0
 8001934:	d001      	beq.n	800193a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001936:	f7ff ffad 	bl	8001894 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800193a:	003b      	movs	r3, r7
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001940:	003b      	movs	r3, r7
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001946:	003b      	movs	r3, r7
 8001948:	2201      	movs	r2, #1
 800194a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800194c:	003b      	movs	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001952:	0039      	movs	r1, r7
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <MX_RTC_Init+0xe4>)
 8001956:	2201      	movs	r2, #1
 8001958:	0018      	movs	r0, r3
 800195a:	f002 ff03 	bl	8004764 <HAL_RTC_SetDate>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001962:	f7ff ff97 	bl	8001894 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_RTC_Init+0xe4>)
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	0018      	movs	r0, r3
 800196e:	f003 f85f 	bl	8004a30 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8001976:	f7ff ff8d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	20000100 	.word	0x20000100
 8001988:	40002800 	.word	0x40002800

0800198c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08b      	sub	sp, #44	@ 0x2c
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	2410      	movs	r4, #16
 8001996:	193b      	adds	r3, r7, r4
 8001998:	0018      	movs	r0, r3
 800199a:	2318      	movs	r3, #24
 800199c:	001a      	movs	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f003 f99c 	bl	8004cdc <memset>
  if(rtcHandle->Instance==RTC)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <HAL_RTC_MspInit+0x84>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12c      	bne.n	8001a08 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2280      	movs	r2, #128	@ 0x80
 80019b2:	0292      	lsls	r2, r2, #10
 80019b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	f002 fc5f 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019ca:	f7ff ff63 	bl	8001894 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_RTC_MspInit+0x88>)
 80019d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_RTC_MspInit+0x88>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0209      	lsls	r1, r1, #8
 80019d8:	430a      	orrs	r2, r1
 80019da:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_RTC_MspInit+0x88>)
 80019de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_RTC_MspInit+0x88>)
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	00c9      	lsls	r1, r1, #3
 80019e6:	430a      	orrs	r2, r1
 80019e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_RTC_MspInit+0x88>)
 80019ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2002      	movs	r0, #2
 80019fe:	f000 fd4b 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f000 fd5d 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b00b      	add	sp, #44	@ 0x2c
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	40002800 	.word	0x40002800
 8001a14:	40021000 	.word	0x40021000

08001a18 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <ssd1306_WriteCommand+0x30>)
 8001a32:	2301      	movs	r3, #1
 8001a34:	425b      	negs	r3, r3
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	2200      	movs	r2, #0
 8001a44:	2178      	movs	r1, #120	@ 0x78
 8001a46:	f001 fa0d 	bl	8002e64 <HAL_I2C_Mem_Write>
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	20000080 	.word	0x20000080

08001a58 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <ssd1306_WriteData+0x30>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4252      	negs	r2, r2
 8001a6c:	9202      	str	r2, [sp, #8]
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	2178      	movs	r1, #120	@ 0x78
 8001a7a:	f001 f9f3 	bl	8002e64 <HAL_I2C_Mem_Write>
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	20000080 	.word	0x20000080

08001a8c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a90:	f7ff ffc2 	bl	8001a18 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a94:	2064      	movs	r0, #100	@ 0x64
 8001a96:	f000 fc13 	bl	80022c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 faa2 	bl	8001fe4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f7ff ffbf 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff ffbc 	bl	8001a24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001aac:	20b0      	movs	r0, #176	@ 0xb0
 8001aae:	f7ff ffb9 	bl	8001a24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ab2:	20c8      	movs	r0, #200	@ 0xc8
 8001ab4:	f7ff ffb6 	bl	8001a24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff ffb3 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001abe:	2010      	movs	r0, #16
 8001ac0:	f7ff ffb0 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ac4:	2040      	movs	r0, #64	@ 0x40
 8001ac6:	f7ff ffad 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001aca:	20ff      	movs	r0, #255	@ 0xff
 8001acc:	f000 fa72 	bl	8001fb4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ad0:	20a1      	movs	r0, #161	@ 0xa1
 8001ad2:	f7ff ffa7 	bl	8001a24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ad6:	20a6      	movs	r0, #166	@ 0xa6
 8001ad8:	f7ff ffa4 	bl	8001a24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001adc:	20a8      	movs	r0, #168	@ 0xa8
 8001ade:	f7ff ffa1 	bl	8001a24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ae2:	203f      	movs	r0, #63	@ 0x3f
 8001ae4:	f7ff ff9e 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ae8:	20a4      	movs	r0, #164	@ 0xa4
 8001aea:	f7ff ff9b 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aee:	20d3      	movs	r0, #211	@ 0xd3
 8001af0:	f7ff ff98 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ff95 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001afa:	20d5      	movs	r0, #213	@ 0xd5
 8001afc:	f7ff ff92 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b00:	20f0      	movs	r0, #240	@ 0xf0
 8001b02:	f7ff ff8f 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b06:	20d9      	movs	r0, #217	@ 0xd9
 8001b08:	f7ff ff8c 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b0c:	2022      	movs	r0, #34	@ 0x22
 8001b0e:	f7ff ff89 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b12:	20da      	movs	r0, #218	@ 0xda
 8001b14:	f7ff ff86 	bl	8001a24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b18:	2012      	movs	r0, #18
 8001b1a:	f7ff ff83 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b1e:	20db      	movs	r0, #219	@ 0xdb
 8001b20:	f7ff ff80 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b24:	2020      	movs	r0, #32
 8001b26:	f7ff ff7d 	bl	8001a24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b2a:	208d      	movs	r0, #141	@ 0x8d
 8001b2c:	f7ff ff7a 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b30:	2014      	movs	r0, #20
 8001b32:	f7ff ff77 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b36:	2001      	movs	r0, #1
 8001b38:	f000 fa54 	bl	8001fe4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 f811 	bl	8001b64 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b42:	f000 f829 	bl	8001b98 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <ssd1306_Init+0xd4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <ssd1306_Init+0xd4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b52:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <ssd1306_Init+0xd4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	711a      	strb	r2, [r3, #4]
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	2000052c 	.word	0x2000052c

08001b64 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <ssd1306_Fill+0x18>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <ssd1306_Fill+0x1a>
 8001b7c:	23ff      	movs	r3, #255	@ 0xff
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <ssd1306_Fill+0x30>)
 8001b84:	0019      	movs	r1, r3
 8001b86:	f003 f8a9 	bl	8004cdc <memset>
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	2000012c 	.word	0x2000012c

08001b98 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	e01a      	b.n	8001bdc <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3b50      	subs	r3, #80	@ 0x50
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7ff ff38 	bl	8001a24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff ff35 	bl	8001a24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bba:	2010      	movs	r0, #16
 8001bbc:	f7ff ff32 	bl	8001a24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	01da      	lsls	r2, r3, #7
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <ssd1306_UpdateScreen+0x58>)
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff ff43 	bl	8001a58 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	3201      	adds	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d9e0      	bls.n	8001ba6 <ssd1306_UpdateScreen+0xe>
    }
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	2000012c 	.word	0x2000012c

08001bf4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	0004      	movs	r4, r0
 8001bfc:	0008      	movs	r0, r1
 8001bfe:	0011      	movs	r1, r2
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	1c22      	adds	r2, r4, #0
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	1c02      	adds	r2, r0, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	1d7b      	adds	r3, r7, #5
 8001c0e:	1c0a      	adds	r2, r1, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db47      	blt.n	8001cac <ssd1306_DrawPixel+0xb8>
 8001c1c:	1dbb      	adds	r3, r7, #6
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c22:	d843      	bhi.n	8001cac <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c24:	1d7b      	adds	r3, r7, #5
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d11e      	bne.n	8001c6a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	1dbb      	adds	r3, r7, #6
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	b2d8      	uxtb	r0, r3
 8001c38:	0003      	movs	r3, r0
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	18d3      	adds	r3, r2, r3
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <ssd1306_DrawPixel+0xc0>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	1dbb      	adds	r3, r7, #6
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2107      	movs	r1, #7
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4099      	lsls	r1, r3
 8001c50:	000b      	movs	r3, r1
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b259      	sxtb	r1, r3
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	01db      	lsls	r3, r3, #7
 8001c60:	18d3      	adds	r3, r2, r3
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <ssd1306_DrawPixel+0xc0>)
 8001c66:	54d1      	strb	r1, [r2, r3]
 8001c68:	e021      	b.n	8001cae <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	08db      	lsrs	r3, r3, #3
 8001c74:	b2d8      	uxtb	r0, r3
 8001c76:	0003      	movs	r3, r0
 8001c78:	01db      	lsls	r3, r3, #7
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <ssd1306_DrawPixel+0xc0>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	1dba      	adds	r2, r7, #6
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	2107      	movs	r1, #7
 8001c88:	400a      	ands	r2, r1
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	b252      	sxtb	r2, r2
 8001c92:	43d2      	mvns	r2, r2
 8001c94:	b252      	sxtb	r2, r2
 8001c96:	4013      	ands	r3, r2
 8001c98:	b259      	sxtb	r1, r3
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	01db      	lsls	r3, r3, #7
 8001ca2:	18d3      	adds	r3, r2, r3
 8001ca4:	b2c9      	uxtb	r1, r1
 8001ca6:	4a03      	ldr	r2, [pc, #12]	@ (8001cb4 <ssd1306_DrawPixel+0xc0>)
 8001ca8:	54d1      	strb	r1, [r2, r3]
 8001caa:	e000      	b.n	8001cae <ssd1306_DrawPixel+0xba>
        return;
 8001cac:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b003      	add	sp, #12
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	2000012c 	.word	0x2000012c

08001cb8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0004      	movs	r4, r0
 8001cc0:	0038      	movs	r0, r7
 8001cc2:	6001      	str	r1, [r0, #0]
 8001cc4:	6042      	str	r2, [r0, #4]
 8001cc6:	6083      	str	r3, [r0, #8]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	1c22      	adds	r2, r4, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	18bb      	adds	r3, r7, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b1f      	cmp	r3, #31
 8001cd8:	d903      	bls.n	8001ce2 <ssd1306_WriteChar+0x2a>
 8001cda:	18bb      	adds	r3, r7, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ce0:	d901      	bls.n	8001ce6 <ssd1306_WriteChar+0x2e>
        return 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e08b      	b.n	8001dfe <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <ssd1306_WriteChar+0x48>
 8001cee:	003b      	movs	r3, r7
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3b20      	subs	r3, #32
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	e001      	b.n	8001d04 <ssd1306_WriteChar+0x4c>
 8001d00:	003b      	movs	r3, r7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2117      	movs	r1, #23
 8001d06:	187a      	adds	r2, r7, r1
 8001d08:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	001a      	movs	r2, r3
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	2b80      	cmp	r3, #128	@ 0x80
 8001d18:	dc07      	bgt.n	8001d2a <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001d1c:	885b      	ldrh	r3, [r3, #2]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	003b      	movs	r3, r7
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001d26:	2b40      	cmp	r3, #64	@ 0x40
 8001d28:	dd01      	ble.n	8001d2e <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e067      	b.n	8001dfe <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e051      	b.n	8001dd8 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d34:	003b      	movs	r3, r7
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3b20      	subs	r3, #32
 8001d40:	0039      	movs	r1, r7
 8001d42:	7849      	ldrb	r1, [r1, #1]
 8001d44:	434b      	muls	r3, r1
 8001d46:	0019      	movs	r1, r3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	18cb      	adds	r3, r1, r3
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	18d3      	adds	r3, r2, r3
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e035      	b.n	8001dc6 <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	2380      	movs	r3, #128	@ 0x80
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4013      	ands	r3, r2
 8001d66:	d014      	beq.n	8001d92 <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	b2d8      	uxtb	r0, r3
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	b2d9      	uxtb	r1, r3
 8001d84:	2330      	movs	r3, #48	@ 0x30
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	f7ff ff32 	bl	8001bf4 <ssd1306_DrawPixel>
 8001d90:	e016      	b.n	8001dc0 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	b2d8      	uxtb	r0, r3
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	b2d9      	uxtb	r1, r3
 8001dae:	2330      	movs	r3, #48	@ 0x30
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	425a      	negs	r2, r3
 8001db6:	4153      	adcs	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	001a      	movs	r2, r3
 8001dbc:	f7ff ff1a 	bl	8001bf4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	2317      	movs	r3, #23
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d3c3      	bcc.n	8001d5a <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	003b      	movs	r3, r7
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	001a      	movs	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d3a7      	bcc.n	8001d34 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	2317      	movs	r3, #23
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	18d3      	adds	r3, r2, r3
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <ssd1306_WriteChar+0x150>)
 8001df6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b009      	add	sp, #36	@ 0x24
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	2000052c 	.word	0x2000052c

08001e0c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	0038      	movs	r0, r7
 8001e16:	6001      	str	r1, [r0, #0]
 8001e18:	6042      	str	r2, [r0, #4]
 8001e1a:	6083      	str	r3, [r0, #8]
    while (*str) {
 8001e1c:	e017      	b.n	8001e4e <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	7818      	ldrb	r0, [r3, #0]
 8001e22:	003b      	movs	r3, r7
 8001e24:	2218      	movs	r2, #24
 8001e26:	18ba      	adds	r2, r7, r2
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	9200      	str	r2, [sp, #0]
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f7ff ff41 	bl	8001cb8 <ssd1306_WriteChar>
 8001e36:	0003      	movs	r3, r0
 8001e38:	001a      	movs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d002      	beq.n	8001e48 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	e008      	b.n	8001e5a <ssd1306_WriteString+0x4e>
        }
        str++;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1e3      	bne.n	8001e1e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	781b      	ldrb	r3, [r3, #0]
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	1c0a      	adds	r2, r1, #0
 8001e74:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <ssd1306_SetCursor+0x30>)
 8001e7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e80:	1dbb      	adds	r3, r7, #6
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <ssd1306_SetCursor+0x30>)
 8001e88:	805a      	strh	r2, [r3, #2]
}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	2000052c 	.word	0x2000052c

08001e98 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	0004      	movs	r4, r0
 8001ea0:	0008      	movs	r0, r1
 8001ea2:	603a      	str	r2, [r7, #0]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	1c22      	adds	r2, r4, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	1c02      	adds	r2, r0, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	1d7b      	adds	r3, r7, #5
 8001eb4:	1c0a      	adds	r2, r1, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001eb8:	1d7b      	adds	r3, r7, #5
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3307      	adds	r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da00      	bge.n	8001ec4 <ssd1306_DrawBitmap+0x2c>
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	10db      	asrs	r3, r3, #3
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	230a      	movs	r3, #10
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8001ece:	230f      	movs	r3, #15
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db65      	blt.n	8001fac <ssd1306_DrawBitmap+0x114>
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee6:	d861      	bhi.n	8001fac <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001ee8:	230e      	movs	r3, #14
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e053      	b.n	8001f9a <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 8001ef2:	230d      	movs	r3, #13
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e03c      	b.n	8001f76 <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 8001efc:	230d      	movs	r3, #13
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	d006      	beq.n	8001f16 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8001f08:	230f      	movs	r3, #15
 8001f0a:	18fa      	adds	r2, r7, r3
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	18db      	adds	r3, r3, r3
 8001f12:	7013      	strb	r3, [r2, #0]
 8001f14:	e014      	b.n	8001f40 <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001f16:	230e      	movs	r3, #14
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	18ba      	adds	r2, r7, r2
 8001f20:	2100      	movs	r1, #0
 8001f22:	5e52      	ldrsh	r2, [r2, r1]
 8001f24:	4353      	muls	r3, r2
 8001f26:	220d      	movs	r2, #13
 8001f28:	18ba      	adds	r2, r7, r2
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	08d2      	lsrs	r2, r2, #3
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	001a      	movs	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	189a      	adds	r2, r3, r2
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 8001f40:	230f      	movs	r3, #15
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da0e      	bge.n	8001f6a <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 8001f4c:	1dfa      	adds	r2, r7, #7
 8001f4e:	230d      	movs	r3, #13
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	18d3      	adds	r3, r2, r3
 8001f58:	b2d8      	uxtb	r0, r3
 8001f5a:	2324      	movs	r3, #36	@ 0x24
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	1dbb      	adds	r3, r7, #6
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	0019      	movs	r1, r3
 8001f66:	f7ff fe45 	bl	8001bf4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001f6a:	210d      	movs	r1, #13
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	3201      	adds	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	230d      	movs	r3, #13
 8001f78:	18fa      	adds	r2, r7, r3
 8001f7a:	1d7b      	adds	r3, r7, #5
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3bb      	bcc.n	8001efc <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001f84:	210e      	movs	r1, #14
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	3201      	adds	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	3201      	adds	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	230e      	movs	r3, #14
 8001f9c:	18fa      	adds	r2, r7, r3
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3a3      	bcc.n	8001ef2 <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 8001faa:	e000      	b.n	8001fae <ssd1306_DrawBitmap+0x116>
        return;
 8001fac:	46c0      	nop			@ (mov r8, r8)
}
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b005      	add	sp, #20
 8001fb2:	bd90      	pop	{r4, r7, pc}

08001fb4 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0002      	movs	r2, r0
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2281      	movs	r2, #129	@ 0x81
 8001fc6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fd29 	bl	8001a24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f7ff fd24 	bl	8001a24 <ssd1306_WriteCommand>
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	0002      	movs	r2, r0
 8001fec:	1dfb      	adds	r3, r7, #7
 8001fee:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	22af      	movs	r2, #175	@ 0xaf
 8001ffe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <ssd1306_SetDisplayOn+0x48>)
 8002002:	2201      	movs	r2, #1
 8002004:	715a      	strb	r2, [r3, #5]
 8002006:	e006      	b.n	8002016 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	22ae      	movs	r2, #174	@ 0xae
 800200e:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <ssd1306_SetDisplayOn+0x48>)
 8002012:	2200      	movs	r2, #0
 8002014:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002016:	230f      	movs	r3, #15
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fd01 	bl	8001a24 <ssd1306_WriteCommand>
}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	2000052c 	.word	0x2000052c

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_MspInit+0x44>)
 8002038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <HAL_MspInit+0x44>)
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	641a      	str	r2, [r3, #64]	@ 0x40
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_MspInit+0x44>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_MspInit+0x44>)
 8002050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_MspInit+0x44>)
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	0549      	lsls	r1, r1, #21
 8002058:	430a      	orrs	r2, r1
 800205a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_MspInit+0x44>)
 800205e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	4013      	ands	r3, r2
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	40021000 	.word	0x40021000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800207c:	46c0      	nop			@ (mov r8, r8)
 800207e:	e7fd      	b.n	800207c <NMI_Handler+0x4>

08002080 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	e7fd      	b.n	8002084 <HardFault_Handler+0x4>

08002088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f8f2 	bl	8002288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <RTC_TAMP_IRQHandler+0x14>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f002 fdb8 	bl	8004c28 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	20000100 	.word	0x20000100

080020c4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80020c8:	2008      	movs	r0, #8
 80020ca:	f000 fbb5 	bl	8002838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 fbab 	bl	8002838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f002 fde8 	bl	8004cec <__errno>
 800211c:	0003      	movs	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	2301      	movs	r3, #1
 8002124:	425b      	negs	r3, r3
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	18d2      	adds	r2, r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <_sbrk+0x64>)
 8002138:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b006      	add	sp, #24
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20002000 	.word	0x20002000
 8002148:	00000400 	.word	0x00000400
 800214c:	20000534 	.word	0x20000534
 8002150:	20000688 	.word	0x20000688

08002154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002160:	480d      	ldr	r0, [pc, #52]	@ (8002198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002162:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002164:	f7ff fff6 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <LoopForever+0x6>)
  ldr r1, =_edata
 800216a:	490d      	ldr	r1, [pc, #52]	@ (80021a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <LoopForever+0xe>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002180:	4c0a      	ldr	r4, [pc, #40]	@ (80021ac <LoopForever+0x16>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800218e:	f002 fdb3 	bl	8004cf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002192:	f7ff f9bb 	bl	800150c <main>

08002196 <LoopForever>:

LoopForever:
  b LoopForever
 8002196:	e7fe      	b.n	8002196 <LoopForever>
  ldr   r0, =_estack
 8002198:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80021a4:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 80021a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80021ac:	20000684 	.word	0x20000684

080021b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_Init+0x3c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_Init+0x3c>)
 80021c6:	2180      	movs	r1, #128	@ 0x80
 80021c8:	0049      	lsls	r1, r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f810 	bl	80021f4 <HAL_InitTick>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e001      	b.n	80021e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff ff26 	bl	8002030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <HAL_InitTick+0x88>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02b      	beq.n	8002264 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_InitTick+0x8c>)
 800220e:	681c      	ldr	r4, [r3, #0]
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_InitTick+0x88>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	0019      	movs	r1, r3
 8002216:	23fa      	movs	r3, #250	@ 0xfa
 8002218:	0098      	lsls	r0, r3, #2
 800221a:	f7fd ff7b 	bl	8000114 <__udivsi3>
 800221e:	0003      	movs	r3, r0
 8002220:	0019      	movs	r1, r3
 8002222:	0020      	movs	r0, r4
 8002224:	f7fd ff76 	bl	8000114 <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f959 	bl	80024e2 <HAL_SYSTICK_Config>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d112      	bne.n	800225a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d80a      	bhi.n	8002250 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	2301      	movs	r3, #1
 800223e:	425b      	negs	r3, r3
 8002240:	2200      	movs	r2, #0
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f928 	bl	8002498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_InitTick+0x90>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e00d      	b.n	800226c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002250:	230f      	movs	r3, #15
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e008      	b.n	800226c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800225a:	230f      	movs	r3, #15
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e003      	b.n	800226c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002264:	230f      	movs	r3, #15
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800226c:	230f      	movs	r3, #15
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b005      	add	sp, #20
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	20000010 	.word	0x20000010
 8002280:	20000008 	.word	0x20000008
 8002284:	2000000c 	.word	0x2000000c

08002288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_IncTick+0x1c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	001a      	movs	r2, r3
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_IncTick+0x20>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	18d2      	adds	r2, r2, r3
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_IncTick+0x20>)
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	20000010 	.word	0x20000010
 80022a8:	20000538 	.word	0x20000538

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <HAL_GetTick+0x10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	20000538 	.word	0x20000538

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff fff0 	bl	80022ac <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_Delay+0x44>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	001a      	movs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	189b      	adds	r3, r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	f7ff ffe0 	bl	80022ac <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d8f7      	bhi.n	80022e8 <HAL_Delay+0x28>
  {
  }
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	20000010 	.word	0x20000010

08002308 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_SuspendTick+0x18>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_SuspendTick+0x18>)
 8002312:	2102      	movs	r1, #2
 8002314:	438a      	bics	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_ResumeTick+0x18>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_ResumeTick+0x18>)
 800232e:	2102      	movs	r1, #2
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	46c0      	nop			@ (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	e000e010 	.word	0xe000e010

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	0002      	movs	r2, r0
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b7f      	cmp	r3, #127	@ 0x7f
 8002352:	d809      	bhi.n	8002368 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	231f      	movs	r3, #31
 800235c:	401a      	ands	r2, r3
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_EnableIRQ+0x30>)
 8002360:	2101      	movs	r1, #1
 8002362:	4091      	lsls	r1, r2
 8002364:	000a      	movs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	0002      	movs	r2, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b7f      	cmp	r3, #127	@ 0x7f
 8002388:	d828      	bhi.n	80023dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800238a:	4a2f      	ldr	r2, [pc, #188]	@ (8002448 <__NVIC_SetPriority+0xd4>)
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b25b      	sxtb	r3, r3
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	33c0      	adds	r3, #192	@ 0xc0
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	589b      	ldr	r3, [r3, r2]
 800239a:	1dfa      	adds	r2, r7, #7
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	0011      	movs	r1, r2
 80023a0:	2203      	movs	r2, #3
 80023a2:	400a      	ands	r2, r1
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	21ff      	movs	r1, #255	@ 0xff
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	43d2      	mvns	r2, r2
 80023ae:	401a      	ands	r2, r3
 80023b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	401a      	ands	r2, r3
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	4003      	ands	r3, r0
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c8:	481f      	ldr	r0, [pc, #124]	@ (8002448 <__NVIC_SetPriority+0xd4>)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	430a      	orrs	r2, r1
 80023d4:	33c0      	adds	r3, #192	@ 0xc0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023da:	e031      	b.n	8002440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <__NVIC_SetPriority+0xd8>)
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	0019      	movs	r1, r3
 80023e4:	230f      	movs	r3, #15
 80023e6:	400b      	ands	r3, r1
 80023e8:	3b08      	subs	r3, #8
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3306      	adds	r3, #6
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	18d3      	adds	r3, r2, r3
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1dfa      	adds	r2, r7, #7
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	0011      	movs	r1, r2
 80023fc:	2203      	movs	r2, #3
 80023fe:	400a      	ands	r2, r1
 8002400:	00d2      	lsls	r2, r2, #3
 8002402:	21ff      	movs	r1, #255	@ 0xff
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	43d2      	mvns	r2, r2
 800240a:	401a      	ands	r2, r3
 800240c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	401a      	ands	r2, r3
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	2303      	movs	r3, #3
 800241e:	4003      	ands	r3, r0
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002424:	4809      	ldr	r0, [pc, #36]	@ (800244c <__NVIC_SetPriority+0xd8>)
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	001c      	movs	r4, r3
 800242c:	230f      	movs	r3, #15
 800242e:	4023      	ands	r3, r4
 8002430:	3b08      	subs	r3, #8
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	430a      	orrs	r2, r1
 8002436:	3306      	adds	r3, #6
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	18c3      	adds	r3, r0, r3
 800243c:	3304      	adds	r3, #4
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b003      	add	sp, #12
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	045b      	lsls	r3, r3, #17
 8002460:	429a      	cmp	r2, r3
 8002462:	d301      	bcc.n	8002468 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002464:	2301      	movs	r3, #1
 8002466:	e010      	b.n	800248a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002468:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <SysTick_Config+0x44>)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3a01      	subs	r2, #1
 800246e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002470:	2301      	movs	r3, #1
 8002472:	425b      	negs	r3, r3
 8002474:	2103      	movs	r1, #3
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff ff7c 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <SysTick_Config+0x44>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <SysTick_Config+0x44>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	210f      	movs	r1, #15
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	1c02      	adds	r2, r0, #0
 80024a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	0002      	movs	r2, r0
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ff33 	bl	8002340 <__NVIC_EnableIRQ>
}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff ffaf 	bl	8002450 <SysTick_Config>
 80024f2:	0003      	movs	r3, r0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e147      	b.n	800279c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4091      	lsls	r1, r2
 8002516:	000a      	movs	r2, r1
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d100      	bne.n	8002524 <HAL_GPIO_Init+0x28>
 8002522:	e138      	b.n	8002796 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
 800252c:	2b01      	cmp	r3, #1
 800252e:	d005      	beq.n	800253c <HAL_GPIO_Init+0x40>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	4013      	ands	r3, r2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d130      	bne.n	800259e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	43da      	mvns	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	0013      	movs	r3, r2
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002572:	2201      	movs	r2, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	2201      	movs	r2, #1
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d017      	beq.n	80025da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	43da      	mvns	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d123      	bne.n	800262e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	58d3      	ldr	r3, [r2, r3]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2107      	movs	r1, #7
 8002612:	400b      	ands	r3, r1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	43da      	mvns	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	401a      	ands	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	23c0      	movs	r3, #192	@ 0xc0
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_GPIO_Init+0x174>
 800266e:	e092      	b.n	8002796 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3318      	adds	r3, #24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	589b      	ldr	r3, [r3, r2]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	220f      	movs	r2, #15
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	43da      	mvns	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	23a0      	movs	r3, #160	@ 0xa0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	429a      	cmp	r2, r3
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x1ca>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a45      	ldr	r2, [pc, #276]	@ (80027b8 <HAL_GPIO_Init+0x2bc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x1c6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a44      	ldr	r2, [pc, #272]	@ (80027bc <HAL_GPIO_Init+0x2c0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x1c2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a43      	ldr	r2, [pc, #268]	@ (80027c0 <HAL_GPIO_Init+0x2c4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x1be>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026c6:	2300      	movs	r3, #0
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	2103      	movs	r1, #3
 80026cc:	400a      	ands	r2, r1
 80026ce:	00d2      	lsls	r2, r2, #3
 80026d0:	4093      	lsls	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026d8:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3318      	adds	r3, #24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	035b      	lsls	r3, r3, #13
 80026fe:	4013      	ands	r3, r2
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002734:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800273a:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800273c:	2384      	movs	r3, #132	@ 0x84
 800273e:	58d3      	ldr	r3, [r2, r3]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43da      	mvns	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002760:	4914      	ldr	r1, [pc, #80]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002762:	2284      	movs	r2, #132	@ 0x84
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002768:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	58d3      	ldr	r3, [r2, r3]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	4013      	ands	r3, r2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800278e:	4909      	ldr	r1, [pc, #36]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002790:	2280      	movs	r2, #128	@ 0x80
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	d000      	beq.n	80027aa <HAL_GPIO_Init+0x2ae>
 80027a8:	e6b0      	b.n	800250c <HAL_GPIO_Init+0x10>
  }
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b006      	add	sp, #24
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021800 	.word	0x40021800
 80027b8:	50000400 	.word	0x50000400
 80027bc:	50000800 	.word	0x50000800
 80027c0:	50000c00 	.word	0x50000c00

080027c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	000a      	movs	r2, r1
 80027ce:	1cbb      	adds	r3, r7, #2
 80027d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	1cba      	adds	r2, r7, #2
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	4013      	ands	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027de:	230f      	movs	r3, #15
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e003      	b.n	80027f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e8:	230f      	movs	r3, #15
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	0008      	movs	r0, r1
 8002808:	0011      	movs	r1, r2
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	1c02      	adds	r2, r0, #0
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	1c7b      	adds	r3, r7, #1
 8002812:	1c0a      	adds	r2, r1, #0
 8002814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002816:	1c7b      	adds	r3, r7, #1
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281e:	1cbb      	adds	r3, r7, #2
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002826:	e003      	b.n	8002830 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002828:	1cbb      	adds	r3, r7, #2
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002830:	46c0      	nop			@ (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	1dba      	adds	r2, r7, #6
 800284a:	8812      	ldrh	r2, [r2, #0]
 800284c:	4013      	ands	r3, r2
 800284e:	d008      	beq.n	8002862 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002852:	1dba      	adds	r2, r7, #6
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f815 	bl	800288c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	1dba      	adds	r2, r7, #6
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	4013      	ands	r3, r2
 800286c:	d008      	beq.n	8002880 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002870:	1dba      	adds	r2, r7, #6
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f810 	bl	80028a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021800 	.word	0x40021800

0800288c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	0002      	movs	r2, r0
 8002894:	1dbb      	adds	r3, r7, #6
 8002896:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dbb      	adds	r3, r7, #6
 80028aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80028ac:	46c0      	nop			@ (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08f      	b.n	80029e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	@ 0x41
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe faff 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2241      	movs	r2, #65	@ 0x41
 80028e6:	2124      	movs	r1, #36	@ 0x24
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	438a      	bics	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	493b      	ldr	r1, [pc, #236]	@ (80029f0 <HAL_I2C_Init+0x13c>)
 8002904:	400a      	ands	r2, r1
 8002906:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4938      	ldr	r1, [pc, #224]	@ (80029f4 <HAL_I2C_Init+0x140>)
 8002914:	400a      	ands	r2, r1
 8002916:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	0209      	lsls	r1, r1, #8
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e007      	b.n	8002942 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2184      	movs	r1, #132	@ 0x84
 800293c:	0209      	lsls	r1, r1, #8
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d109      	bne.n	800295e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2180      	movs	r1, #128	@ 0x80
 8002956:	0109      	lsls	r1, r1, #4
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	e007      	b.n	800296e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4923      	ldr	r1, [pc, #140]	@ (80029f8 <HAL_I2C_Init+0x144>)
 800296a:	400a      	ands	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4920      	ldr	r1, [pc, #128]	@ (80029fc <HAL_I2C_Init+0x148>)
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	491a      	ldr	r1, [pc, #104]	@ (80029f4 <HAL_I2C_Init+0x140>)
 800298a:	400a      	ands	r2, r1
 800298c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
 8002998:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2241      	movs	r2, #65	@ 0x41
 80029d2:	2120      	movs	r1, #32
 80029d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2242      	movs	r2, #66	@ 0x42
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	f0ffffff 	.word	0xf0ffffff
 80029f4:	ffff7fff 	.word	0xffff7fff
 80029f8:	fffff7ff 	.word	0xfffff7ff
 80029fc:	02008000 	.word	0x02008000

08002a00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	0008      	movs	r0, r1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	230a      	movs	r3, #10
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	2308      	movs	r3, #8
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	1c0a      	adds	r2, r1, #0
 8002a1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2241      	movs	r2, #65	@ 0x41
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d000      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x2c>
 8002a2a:	e10a      	b.n	8002c42 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	5c9b      	ldrb	r3, [r3, r2]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Master_Transmit+0x3a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e104      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2240      	movs	r2, #64	@ 0x40
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a42:	f7ff fc33 	bl	80022ac <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	0219      	lsls	r1, r3, #8
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	f000 fbb8 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0ef      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2241      	movs	r2, #65	@ 0x41
 8002a68:	2121      	movs	r1, #33	@ 0x21
 8002a6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2242      	movs	r2, #66	@ 0x42
 8002a70:	2110      	movs	r1, #16
 8002a72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2208      	movs	r2, #8
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	8812      	ldrh	r2, [r2, #0]
 8002a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2bff      	cmp	r3, #255	@ 0xff
 8002a98:	d906      	bls.n	8002aa8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	22ff      	movs	r2, #255	@ 0xff
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	045b      	lsls	r3, r3, #17
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e007      	b.n	8002ab8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	049b      	lsls	r3, r3, #18
 8002ab6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d027      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	697c      	ldr	r4, [r7, #20]
 8002afc:	230a      	movs	r3, #10
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	8819      	ldrh	r1, [r3, #0]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <HAL_I2C_Master_Transmit+0x24c>)
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	0023      	movs	r3, r4
 8002b0a:	f000 fdd7 	bl	80036bc <I2C_TransferConfig>
 8002b0e:	e06f      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	697c      	ldr	r4, [r7, #20]
 8002b18:	230a      	movs	r3, #10
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	8819      	ldrh	r1, [r3, #0]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <HAL_I2C_Master_Transmit+0x24c>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	0023      	movs	r3, r4
 8002b26:	f000 fdc9 	bl	80036bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b2a:	e061      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fba2 	bl	800327c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e081      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03a      	beq.n	8002bf0 <HAL_I2C_Master_Transmit+0x1f0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d136      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	@ 0x80
 8002b90:	f000 fb1c 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e053      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	@ 0xff
 8002ba4:	d911      	bls.n	8002bca <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	@ 0xff
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	045c      	lsls	r4, r3, #17
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	8819      	ldrh	r1, [r3, #0]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	0023      	movs	r3, r4
 8002bc4:	f000 fd7a 	bl	80036bc <I2C_TransferConfig>
 8002bc8:	e012      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	049c      	lsls	r4, r3, #18
 8002bde:	230a      	movs	r3, #10
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	8819      	ldrh	r1, [r3, #0]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	2300      	movs	r3, #0
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	0023      	movs	r3, r4
 8002bec:	f000 fd66 	bl	80036bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d198      	bne.n	8002b2c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 fb81 	bl	8003308 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c06:	1e03      	subs	r3, r0, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e01a      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2220      	movs	r2, #32
 8002c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	490b      	ldr	r1, [pc, #44]	@ (8002c50 <HAL_I2C_Master_Transmit+0x250>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2241      	movs	r2, #65	@ 0x41
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2242      	movs	r2, #66	@ 0x42
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b007      	add	sp, #28
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	80002000 	.word	0x80002000
 8002c50:	fe00e800 	.word	0xfe00e800

08002c54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	0008      	movs	r0, r1
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	0019      	movs	r1, r3
 8002c62:	230a      	movs	r3, #10
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	1c02      	adds	r2, r0, #0
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	1c0a      	adds	r2, r1, #0
 8002c70:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2241      	movs	r2, #65	@ 0x41
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d000      	beq.n	8002c80 <HAL_I2C_Master_Receive+0x2c>
 8002c7e:	e0e8      	b.n	8002e52 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	@ 0x40
 8002c84:	5c9b      	ldrb	r3, [r3, r2]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Master_Receive+0x3a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0e2      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2240      	movs	r2, #64	@ 0x40
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c96:	f7ff fb09 	bl	80022ac <HAL_GetTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	0219      	lsls	r1, r3, #8
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2319      	movs	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	f000 fa8e 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cd      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2241      	movs	r2, #65	@ 0x41
 8002cbc:	2122      	movs	r1, #34	@ 0x22
 8002cbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2242      	movs	r2, #66	@ 0x42
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	18ba      	adds	r2, r7, r2
 8002cda:	8812      	ldrh	r2, [r2, #0]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2bff      	cmp	r3, #255	@ 0xff
 8002cec:	d911      	bls.n	8002d12 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	22ff      	movs	r2, #255	@ 0xff
 8002cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	045c      	lsls	r4, r3, #17
 8002cfe:	230a      	movs	r3, #10
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	8819      	ldrh	r1, [r3, #0]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	4b55      	ldr	r3, [pc, #340]	@ (8002e5c <HAL_I2C_Master_Receive+0x208>)
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	0023      	movs	r3, r4
 8002d0c:	f000 fcd6 	bl	80036bc <I2C_TransferConfig>
 8002d10:	e076      	b.n	8002e00 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	049c      	lsls	r4, r3, #18
 8002d26:	230a      	movs	r3, #10
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	8819      	ldrh	r1, [r3, #0]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e5c <HAL_I2C_Master_Receive+0x208>)
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0023      	movs	r3, r4
 8002d34:	f000 fcc2 	bl	80036bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002d38:	e062      	b.n	8002e00 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 fb25 	bl	8003390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e082      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03a      	beq.n	8002e00 <HAL_I2C_Master_Receive+0x1ac>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d136      	bne.n	8002e00 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	0013      	movs	r3, r2
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	f000 fa14 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e053      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2bff      	cmp	r3, #255	@ 0xff
 8002db4:	d911      	bls.n	8002dda <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	@ 0xff
 8002dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	045c      	lsls	r4, r3, #17
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	8819      	ldrh	r1, [r3, #0]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	0023      	movs	r3, r4
 8002dd4:	f000 fc72 	bl	80036bc <I2C_TransferConfig>
 8002dd8:	e012      	b.n	8002e00 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	049c      	lsls	r4, r3, #18
 8002dee:	230a      	movs	r3, #10
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	8819      	ldrh	r1, [r3, #0]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	0023      	movs	r3, r4
 8002dfc:	f000 fc5e 	bl	80036bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d197      	bne.n	8002d3a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 fa79 	bl	8003308 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e01a      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2220      	movs	r2, #32
 8002e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	490b      	ldr	r1, [pc, #44]	@ (8002e60 <HAL_I2C_Master_Receive+0x20c>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2241      	movs	r2, #65	@ 0x41
 8002e3a:	2120      	movs	r1, #32
 8002e3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2242      	movs	r2, #66	@ 0x42
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2240      	movs	r2, #64	@ 0x40
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b007      	add	sp, #28
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	80002400 	.word	0x80002400
 8002e60:	fe00e800 	.word	0xfe00e800

08002e64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b089      	sub	sp, #36	@ 0x24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	000c      	movs	r4, r1
 8002e6e:	0010      	movs	r0, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	230a      	movs	r3, #10
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	1c22      	adds	r2, r4, #0
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	1c02      	adds	r2, r0, #0
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	1c0a      	adds	r2, r1, #0
 8002e86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2241      	movs	r2, #65	@ 0x41
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d000      	beq.n	8002e96 <HAL_I2C_Mem_Write+0x32>
 8002e94:	e10c      	b.n	80030b0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_I2C_Mem_Write+0x42>
 8002e9c:	232c      	movs	r3, #44	@ 0x2c
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d105      	bne.n	8002eb2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2280      	movs	r2, #128	@ 0x80
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0ff      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_Mem_Write+0x5c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0f8      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec8:	f7ff f9f0 	bl	80022ac <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	0219      	lsls	r1, r3, #8
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2319      	movs	r3, #25
 8002edc:	2201      	movs	r2, #1
 8002ede:	f000 f975 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0e3      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2241      	movs	r2, #65	@ 0x41
 8002eee:	2121      	movs	r1, #33	@ 0x21
 8002ef0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2242      	movs	r2, #66	@ 0x42
 8002ef6:	2140      	movs	r1, #64	@ 0x40
 8002ef8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	222c      	movs	r2, #44	@ 0x2c
 8002f0a:	18ba      	adds	r2, r7, r2
 8002f0c:	8812      	ldrh	r2, [r2, #0]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f16:	1dbb      	adds	r3, r7, #6
 8002f18:	881c      	ldrh	r4, [r3, #0]
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	230a      	movs	r3, #10
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	8819      	ldrh	r1, [r3, #0]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	0023      	movs	r3, r4
 8002f32:	f000 f8c5 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	@ 0x40
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0b5      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	@ 0xff
 8002f4e:	d911      	bls.n	8002f74 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	@ 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	2380      	movs	r3, #128	@ 0x80
 8002f5e:	045c      	lsls	r4, r3, #17
 8002f60:	230a      	movs	r3, #10
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	8819      	ldrh	r1, [r3, #0]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0023      	movs	r3, r4
 8002f6e:	f000 fba5 	bl	80036bc <I2C_TransferConfig>
 8002f72:	e012      	b.n	8002f9a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	049c      	lsls	r4, r3, #18
 8002f88:	230a      	movs	r3, #10
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	8819      	ldrh	r1, [r3, #0]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	2300      	movs	r3, #0
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	0023      	movs	r3, r4
 8002f96:	f000 fb91 	bl	80036bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f96b 	bl	800327c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa6:	1e03      	subs	r3, r0, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e081      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03a      	beq.n	800305e <HAL_I2C_Mem_Write+0x1fa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d136      	bne.n	800305e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	f000 f8e5 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e053      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2bff      	cmp	r3, #255	@ 0xff
 8003012:	d911      	bls.n	8003038 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	22ff      	movs	r2, #255	@ 0xff
 8003018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	045c      	lsls	r4, r3, #17
 8003024:	230a      	movs	r3, #10
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	8819      	ldrh	r1, [r3, #0]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	0023      	movs	r3, r4
 8003032:	f000 fb43 	bl	80036bc <I2C_TransferConfig>
 8003036:	e012      	b.n	800305e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	049c      	lsls	r4, r3, #18
 800304c:	230a      	movs	r3, #10
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	8819      	ldrh	r1, [r3, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0023      	movs	r3, r4
 800305a:	f000 fb2f 	bl	80036bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d198      	bne.n	8002f9a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f94a 	bl	8003308 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e01a      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2220      	movs	r2, #32
 8003082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	490b      	ldr	r1, [pc, #44]	@ (80030bc <HAL_I2C_Mem_Write+0x258>)
 8003090:	400a      	ands	r2, r1
 8003092:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2241      	movs	r2, #65	@ 0x41
 8003098:	2120      	movs	r1, #32
 800309a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2242      	movs	r2, #66	@ 0x42
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2240      	movs	r2, #64	@ 0x40
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	fe00e800 	.word	0xfe00e800

080030c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	000c      	movs	r4, r1
 80030ca:	0010      	movs	r0, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	250a      	movs	r5, #10
 80030d0:	197b      	adds	r3, r7, r5
 80030d2:	1c22      	adds	r2, r4, #0
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	2308      	movs	r3, #8
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	1c02      	adds	r2, r0, #0
 80030dc:	801a      	strh	r2, [r3, #0]
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	1c0a      	adds	r2, r1, #0
 80030e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030e4:	1dbb      	adds	r3, r7, #6
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	045c      	lsls	r4, r3, #17
 80030ee:	197b      	adds	r3, r7, r5
 80030f0:	8819      	ldrh	r1, [r3, #0]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <I2C_RequestMemoryWrite+0xc4>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	0023      	movs	r3, r4
 80030fa:	f000 fadf 	bl	80036bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 f8b9 	bl	800327c <I2C_WaitOnTXISFlagUntilTimeout>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d001      	beq.n	8003112 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e033      	b.n	800317a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003112:	1dbb      	adds	r3, r7, #6
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800311a:	2308      	movs	r3, #8
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28
 8003128:	e019      	b.n	800315e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800312a:	2308      	movs	r3, #8
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	b29b      	uxth	r3, r3
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	6a39      	ldr	r1, [r7, #32]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f89a 	bl	800327c <I2C_WaitOnTXISFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e014      	b.n	800317a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003150:	2308      	movs	r3, #8
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	0013      	movs	r3, r2
 8003168:	2200      	movs	r2, #0
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	f000 f82e 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bdb0      	pop	{r4, r5, r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	80002000 	.word	0x80002000

08003188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d103      	bne.n	80031a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d007      	beq.n	80031c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	430a      	orrs	r2, r1
 80031c2:	619a      	str	r2, [r3, #24]
  }
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031dc:	e03a      	b.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f971 	bl	80034cc <I2C_IsErrorOccurred>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e040      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	d02d      	beq.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f8:	f7ff f858 	bl	80022ac <HAL_GetTick>
 80031fc:	0002      	movs	r2, r0
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d302      	bcc.n	800320e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d122      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	425a      	negs	r2, r3
 800321e:	4153      	adcs	r3, r2
 8003220:	b2db      	uxtb	r3, r3
 8003222:	001a      	movs	r2, r3
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d113      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003230:	2220      	movs	r2, #32
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2241      	movs	r2, #65	@ 0x41
 800323c:	2120      	movs	r1, #32
 800323e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2242      	movs	r2, #66	@ 0x42
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2240      	movs	r2, #64	@ 0x40
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e00f      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	425a      	negs	r2, r3
 8003264:	4153      	adcs	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	001a      	movs	r2, r3
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d0b5      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003288:	e032      	b.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f91b 	bl	80034cc <I2C_IsErrorOccurred>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e030      	b.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d025      	beq.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7ff f802 	bl	80022ac <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11a      	bne.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d013      	beq.n	80032f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	2220      	movs	r2, #32
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2241      	movs	r2, #65	@ 0x41
 80032d8:	2120      	movs	r1, #32
 80032da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2242      	movs	r2, #66	@ 0x42
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e007      	b.n	8003300 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d1c5      	bne.n	800328a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003314:	e02f      	b.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f8d5 	bl	80034cc <I2C_IsErrorOccurred>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e02d      	b.n	8003386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe ffbf 	bl	80022ac <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11a      	bne.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	2b20      	cmp	r3, #32
 800334c:	d013      	beq.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	2220      	movs	r2, #32
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2241      	movs	r2, #65	@ 0x41
 800335e:	2120      	movs	r1, #32
 8003360:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2242      	movs	r2, #66	@ 0x42
 8003366:	2100      	movs	r1, #0
 8003368:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2240      	movs	r2, #64	@ 0x40
 800336e:	2100      	movs	r1, #0
 8003370:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2220      	movs	r2, #32
 800337e:	4013      	ands	r3, r2
 8003380:	2b20      	cmp	r3, #32
 8003382:	d1c8      	bne.n	8003316 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2317      	movs	r3, #23
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80033a4:	e07b      	b.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f88d 	bl	80034cc <I2C_IsErrorOccurred>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d003      	beq.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80033b6:	2317      	movs	r3, #23
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2220      	movs	r2, #32
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d140      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80033cc:	2117      	movs	r1, #23
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d13b      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2204      	movs	r2, #4
 80033de:	4013      	ands	r3, r2
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d106      	bne.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2210      	movs	r2, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d123      	bne.n	8003448 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2204      	movs	r2, #4
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4929      	ldr	r1, [pc, #164]	@ (80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003422:	400a      	ands	r2, r1
 8003424:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2241      	movs	r2, #65	@ 0x41
 800342a:	2120      	movs	r1, #32
 800342c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2242      	movs	r2, #66	@ 0x42
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e002      	b.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800344e:	f7fe ff2d 	bl	80022ac <HAL_GetTick>
 8003452:	0002      	movs	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11c      	bne.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003464:	2017      	movs	r0, #23
 8003466:	183b      	adds	r3, r7, r0
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d117      	bne.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2204      	movs	r2, #4
 8003476:	4013      	ands	r3, r2
 8003478:	2b04      	cmp	r3, #4
 800347a:	d010      	beq.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	2220      	movs	r2, #32
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2241      	movs	r2, #65	@ 0x41
 800348c:	2120      	movs	r1, #32
 800348e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003498:	183b      	adds	r3, r7, r0
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2204      	movs	r2, #4
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d005      	beq.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80034ac:	2317      	movs	r3, #23
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80034b6:	e776      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80034b8:	2317      	movs	r3, #23
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	781b      	ldrb	r3, [r3, #0]
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b006      	add	sp, #24
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	fe00e800 	.word	0xfe00e800

080034cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2327      	movs	r3, #39	@ 0x27
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2210      	movs	r2, #16
 80034f4:	4013      	ands	r3, r2
 80034f6:	d100      	bne.n	80034fa <I2C_IsErrorOccurred+0x2e>
 80034f8:	e079      	b.n	80035ee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2210      	movs	r2, #16
 8003500:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003502:	e057      	b.n	80035b4 <I2C_IsErrorOccurred+0xe8>
 8003504:	2227      	movs	r2, #39	@ 0x27
 8003506:	18bb      	adds	r3, r7, r2
 8003508:	18ba      	adds	r2, r7, r2
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	d04f      	beq.n	80035b4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe feca 	bl	80022ac <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	429a      	cmp	r2, r3
 8003522:	d302      	bcc.n	800352a <I2C_IsErrorOccurred+0x5e>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d144      	bne.n	80035b4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	01db      	lsls	r3, r3, #7
 8003534:	4013      	ands	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003538:	2013      	movs	r0, #19
 800353a:	183b      	adds	r3, r7, r0
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	2142      	movs	r1, #66	@ 0x42
 8003540:	5c52      	ldrb	r2, [r2, r1]
 8003542:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	401a      	ands	r2, r3
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	429a      	cmp	r2, r3
 8003556:	d126      	bne.n	80035a6 <I2C_IsErrorOccurred+0xda>
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	01db      	lsls	r3, r3, #7
 800355e:	429a      	cmp	r2, r3
 8003560:	d021      	beq.n	80035a6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003562:	183b      	adds	r3, r7, r0
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b20      	cmp	r3, #32
 8003568:	d01d      	beq.n	80035a6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	01c9      	lsls	r1, r1, #7
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800357c:	f7fe fe96 	bl	80022ac <HAL_GetTick>
 8003580:	0003      	movs	r3, r0
 8003582:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003584:	e00f      	b.n	80035a6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003586:	f7fe fe91 	bl	80022ac <HAL_GetTick>
 800358a:	0002      	movs	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b19      	cmp	r3, #25
 8003592:	d908      	bls.n	80035a6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	2220      	movs	r2, #32
 8003598:	4313      	orrs	r3, r2
 800359a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800359c:	2327      	movs	r3, #39	@ 0x27
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]

              break;
 80035a4:	e006      	b.n	80035b4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2220      	movs	r2, #32
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d1e8      	bne.n	8003586 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d004      	beq.n	80035cc <I2C_IsErrorOccurred+0x100>
 80035c2:	2327      	movs	r3, #39	@ 0x27
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d09b      	beq.n	8003504 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035cc:	2327      	movs	r3, #39	@ 0x27
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4313      	orrs	r3, r2
 80035e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e6:	2327      	movs	r3, #39	@ 0x27
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	2380      	movs	r3, #128	@ 0x80
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00c      	beq.n	800361a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2201      	movs	r2, #1
 8003604:	4313      	orrs	r3, r2
 8003606:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2280      	movs	r2, #128	@ 0x80
 800360e:	0052      	lsls	r2, r2, #1
 8003610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003612:	2327      	movs	r3, #39	@ 0x27
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4013      	ands	r3, r2
 8003622:	d00c      	beq.n	800363e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2208      	movs	r2, #8
 8003628:	4313      	orrs	r3, r2
 800362a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	00d2      	lsls	r2, r2, #3
 8003634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003636:	2327      	movs	r3, #39	@ 0x27
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	2380      	movs	r3, #128	@ 0x80
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d00c      	beq.n	8003662 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2202      	movs	r2, #2
 800364c:	4313      	orrs	r3, r2
 800364e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2280      	movs	r2, #128	@ 0x80
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800365a:	2327      	movs	r3, #39	@ 0x27
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003662:	2327      	movs	r3, #39	@ 0x27
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01d      	beq.n	80036a8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	0018      	movs	r0, r3
 8003670:	f7ff fd8a 	bl	8003188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	490e      	ldr	r1, [pc, #56]	@ (80036b8 <I2C_IsErrorOccurred+0x1ec>)
 8003680:	400a      	ands	r2, r1
 8003682:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2241      	movs	r2, #65	@ 0x41
 8003694:	2120      	movs	r1, #32
 8003696:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2242      	movs	r2, #66	@ 0x42
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80036a8:	2327      	movs	r3, #39	@ 0x27
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b00a      	add	sp, #40	@ 0x28
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	0008      	movs	r0, r1
 80036c6:	0011      	movs	r1, r2
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	240a      	movs	r4, #10
 80036cc:	193b      	adds	r3, r7, r4
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	2009      	movs	r0, #9
 80036d4:	183b      	adds	r3, r7, r0
 80036d6:	1c0a      	adds	r2, r1, #0
 80036d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	059b      	lsls	r3, r3, #22
 80036e0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	0419      	lsls	r1, r3, #16
 80036e8:	23ff      	movs	r3, #255	@ 0xff
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	4313      	orrs	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003706:	0d51      	lsrs	r1, r2, #21
 8003708:	2280      	movs	r2, #128	@ 0x80
 800370a:	00d2      	lsls	r2, r2, #3
 800370c:	400a      	ands	r2, r1
 800370e:	4907      	ldr	r1, [pc, #28]	@ (800372c <I2C_TransferConfig+0x70>)
 8003710:	430a      	orrs	r2, r1
 8003712:	43d2      	mvns	r2, r2
 8003714:	401a      	ands	r2, r3
 8003716:	0011      	movs	r1, r2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b007      	add	sp, #28
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	03ff63ff 	.word	0x03ff63ff

08003730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2241      	movs	r2, #65	@ 0x41
 800373e:	5c9b      	ldrb	r3, [r3, r2]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	d138      	bne.n	80037b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2240      	movs	r2, #64	@ 0x40
 800374a:	5c9b      	ldrb	r3, [r3, r2]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003750:	2302      	movs	r3, #2
 8003752:	e032      	b.n	80037ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	@ 0x40
 8003758:	2101      	movs	r1, #1
 800375a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2241      	movs	r2, #65	@ 0x41
 8003760:	2124      	movs	r1, #36	@ 0x24
 8003762:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2101      	movs	r1, #1
 8003770:	438a      	bics	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4911      	ldr	r1, [pc, #68]	@ (80037c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003780:	400a      	ands	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2101      	movs	r1, #1
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2241      	movs	r2, #65	@ 0x41
 80037a8:	2120      	movs	r1, #32
 80037aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	ffffefff 	.word	0xffffefff

080037c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2241      	movs	r2, #65	@ 0x41
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d139      	bne.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2240      	movs	r2, #64	@ 0x40
 80037e2:	5c9b      	ldrb	r3, [r3, r2]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e033      	b.n	8003854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2241      	movs	r2, #65	@ 0x41
 80037f8:	2124      	movs	r1, #36	@ 0x24
 80037fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2101      	movs	r1, #1
 8003808:	438a      	bics	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a11      	ldr	r2, [pc, #68]	@ (800385c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2241      	movs	r2, #65	@ 0x41
 8003842:	2120      	movs	r1, #32
 8003844:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2240      	movs	r2, #64	@ 0x40
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}
 800385c:	fffff0ff 	.word	0xfffff0ff

08003860 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	000a      	movs	r2, r1
 800386a:	1cfb      	adds	r3, r7, #3
 800386c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <HAL_PWR_EnterSTOPMode+0x68>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2207      	movs	r2, #7
 800387a:	4393      	bics	r3, r2
 800387c:	001a      	movs	r2, r3
 800387e:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_PWR_EnterSTOPMode+0x68>)
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e005      	b.n	8003894 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_PWR_EnterSTOPMode+0x68>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <HAL_PWR_EnterSTOPMode+0x68>)
 800388e:	2107      	movs	r1, #7
 8003890:	438a      	bics	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003894:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <HAL_PWR_EnterSTOPMode+0x6c>)
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_PWR_EnterSTOPMode+0x6c>)
 800389a:	2104      	movs	r1, #4
 800389c:	430a      	orrs	r2, r1
 800389e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80038a0:	1cfb      	adds	r3, r7, #3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80038a8:	bf30      	wfi
 80038aa:	e002      	b.n	80038b2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80038ac:	bf40      	sev
    __WFE();
 80038ae:	bf20      	wfe
    __WFE();
 80038b0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_PWR_EnterSTOPMode+0x6c>)
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_PWR_EnterSTOPMode+0x6c>)
 80038b8:	2104      	movs	r1, #4
 80038ba:	438a      	bics	r2, r1
 80038bc:	611a      	str	r2, [r3, #16]
}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	40007000 	.word	0x40007000
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d11f      	bne.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	0013      	movs	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4912      	ldr	r1, [pc, #72]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fc fc06 	bl	8000114 <__udivsi3>
 8003908:	0003      	movs	r3, r0
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390e:	e008      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b01      	subs	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e001      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e009      	b.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	401a      	ands	r2, r3
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	429a      	cmp	r2, r3
 8003932:	d0ed      	beq.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	40007000 	.word	0x40007000
 8003944:	fffff9ff 	.word	0xfffff9ff
 8003948:	20000008 	.word	0x20000008
 800394c:	000f4240 	.word	0x000f4240

08003950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e2f3      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_RCC_OscConfig+0x1e>
 800396c:	e07c      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4bc3      	ldr	r3, [pc, #780]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2238      	movs	r2, #56	@ 0x38
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003978:	4bc0      	ldr	r3, [pc, #768]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2203      	movs	r2, #3
 800397e:	4013      	ands	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d102      	bne.n	800398e <HAL_RCC_OscConfig+0x3e>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d002      	beq.n	8003994 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10b      	bne.n	80039ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	4bb9      	ldr	r3, [pc, #740]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	4013      	ands	r3, r2
 800399e:	d062      	beq.n	8003a66 <HAL_RCC_OscConfig+0x116>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15e      	bne.n	8003a66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e2ce      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x78>
 80039b8:	4bb0      	ldr	r3, [pc, #704]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4baf      	ldr	r3, [pc, #700]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039be:	2180      	movs	r1, #128	@ 0x80
 80039c0:	0249      	lsls	r1, r1, #9
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e020      	b.n	8003a0a <HAL_RCC_OscConfig+0xba>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	23a0      	movs	r3, #160	@ 0xa0
 80039ce:	02db      	lsls	r3, r3, #11
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d10e      	bne.n	80039f2 <HAL_RCC_OscConfig+0xa2>
 80039d4:	4ba9      	ldr	r3, [pc, #676]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4ba8      	ldr	r3, [pc, #672]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	02c9      	lsls	r1, r1, #11
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	4ba6      	ldr	r3, [pc, #664]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0249      	lsls	r1, r1, #9
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0xba>
 80039f2:	4ba2      	ldr	r3, [pc, #648]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039f8:	49a1      	ldr	r1, [pc, #644]	@ (8003c80 <HAL_RCC_OscConfig+0x330>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	4b9f      	ldr	r3, [pc, #636]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b9e      	ldr	r3, [pc, #632]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	499f      	ldr	r1, [pc, #636]	@ (8003c84 <HAL_RCC_OscConfig+0x334>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fe fc4b 	bl	80022ac <HAL_GetTick>
 8003a16:	0003      	movs	r3, r0
 8003a18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fc46 	bl	80022ac <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e28d      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b93      	ldr	r3, [pc, #588]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	4013      	ands	r3, r2
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xcc>
 8003a3a:	e015      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fc36 	bl	80022ac <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a46:	f7fe fc31 	bl	80022ac <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e278      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a58:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	4013      	ands	r3, r2
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0xf6>
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d100      	bne.n	8003a74 <HAL_RCC_OscConfig+0x124>
 8003a72:	e099      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a74:	4b81      	ldr	r3, [pc, #516]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2238      	movs	r2, #56	@ 0x38
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2203      	movs	r2, #3
 8003a84:	4013      	ands	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_OscConfig+0x144>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d002      	beq.n	8003a9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d135      	bne.n	8003b06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9a:	4b78      	ldr	r3, [pc, #480]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x162>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e24b      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b72      	ldr	r3, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a74      	ldr	r2, [pc, #464]	@ (8003c88 <HAL_RCC_OscConfig+0x338>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ace:	4b6b      	ldr	r3, [pc, #428]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c8c <HAL_RCC_OscConfig+0x33c>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b67      	ldr	r3, [pc, #412]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ae2:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	4a68      	ldr	r2, [pc, #416]	@ (8003c90 <HAL_RCC_OscConfig+0x340>)
 8003aee:	40da      	lsrs	r2, r3
 8003af0:	4b68      	ldr	r3, [pc, #416]	@ (8003c94 <HAL_RCC_OscConfig+0x344>)
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_RCC_OscConfig+0x348>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fe fb7b 	bl	80021f4 <HAL_InitTick>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d051      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e221      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d030      	beq.n	8003b70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <HAL_RCC_OscConfig+0x33c>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b22:	4b56      	ldr	r3, [pc, #344]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	0049      	lsls	r1, r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fbbc 	bl	80022ac <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fbb7 	bl	80022ac <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1fe      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x338>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e01b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b70:	4b42      	ldr	r3, [pc, #264]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b76:	4949      	ldr	r1, [pc, #292]	@ (8003c9c <HAL_RCC_OscConfig+0x34c>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fb96 	bl	80022ac <HAL_GetTick>
 8003b80:	0003      	movs	r3, r0
 8003b82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fe fb91 	bl	80022ac <HAL_GetTick>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1d8      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b98:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x236>
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d047      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bb2:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2238      	movs	r2, #56	@ 0x38
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d03c      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d138      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e1ba      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d019      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	430a      	orrs	r2, r1
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe fb60 	bl	80022ac <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fb5b 	bl	80022ac <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1a2      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d0f1      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2a2>
 8003c0e:	e018      	b.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c10:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	438a      	bics	r2, r1
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fb46 	bl	80022ac <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe fb41 	bl	80022ac <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e188      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d1f1      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2fe>
 8003c4c:	e0c6      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	231f      	movs	r3, #31
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2238      	movs	r2, #56	@ 0x38
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d11e      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2202      	movs	r2, #2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <HAL_RCC_OscConfig+0x31e>
 8003c6c:	e0b6      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d000      	beq.n	8003c78 <HAL_RCC_OscConfig+0x328>
 8003c76:	e0b1      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e166      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	fffeffff 	.word	0xfffeffff
 8003c84:	fffbffff 	.word	0xfffbffff
 8003c88:	ffff80ff 	.word	0xffff80ff
 8003c8c:	ffffc7ff 	.word	0xffffc7ff
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	20000008 	.word	0x20000008
 8003c98:	2000000c 	.word	0x2000000c
 8003c9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ca0:	4bac      	ldr	r3, [pc, #688]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	055b      	lsls	r3, r3, #21
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x360>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x362>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d011      	beq.n	8003cda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	4ba7      	ldr	r3, [pc, #668]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cba:	4ba6      	ldr	r3, [pc, #664]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003cbc:	2180      	movs	r1, #128	@ 0x80
 8003cbe:	0549      	lsls	r1, r1, #21
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	055b      	lsls	r3, r3, #21
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cd2:	231f      	movs	r3, #31
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	4b9f      	ldr	r3, [pc, #636]	@ (8003f58 <HAL_RCC_OscConfig+0x608>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f58 <HAL_RCC_OscConfig+0x608>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b9b      	ldr	r3, [pc, #620]	@ (8003f58 <HAL_RCC_OscConfig+0x608>)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0049      	lsls	r1, r1, #1
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fada 	bl	80022ac <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fe fad5 	bl	80022ac <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e11c      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	4b91      	ldr	r3, [pc, #580]	@ (8003f58 <HAL_RCC_OscConfig+0x608>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3e2>
 8003d24:	4b8b      	ldr	r3, [pc, #556]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d28:	4b8a      	ldr	r3, [pc, #552]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x404>
 8003d3a:	4b86      	ldr	r3, [pc, #536]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d3e:	4b85      	ldr	r3, [pc, #532]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d40:	2104      	movs	r1, #4
 8003d42:	430a      	orrs	r2, r1
 8003d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d46:	4b83      	ldr	r3, [pc, #524]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d4a:	4b82      	ldr	r3, [pc, #520]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
 8003d54:	4b7f      	ldr	r3, [pc, #508]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d58:	4b7e      	ldr	r3, [pc, #504]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d60:	4b7c      	ldr	r3, [pc, #496]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d64:	4b7b      	ldr	r3, [pc, #492]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d66:	2104      	movs	r1, #4
 8003d68:	438a      	bics	r2, r1
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d014      	beq.n	8003d9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe fa9a 	bl	80022ac <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fe fa95 	bl	80022ac <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a74      	ldr	r2, [pc, #464]	@ (8003f5c <HAL_RCC_OscConfig+0x60c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0db      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	4b70      	ldr	r3, [pc, #448]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x42e>
 8003d9c:	e013      	b.n	8003dc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fa85 	bl	80022ac <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da6:	e009      	b.n	8003dbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe fa80 	bl	80022ac <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f5c <HAL_RCC_OscConfig+0x60c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0c6      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b65      	ldr	r3, [pc, #404]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b60      	ldr	r3, [pc, #384]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003dd6:	4962      	ldr	r1, [pc, #392]	@ (8003f60 <HAL_RCC_OscConfig+0x610>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d100      	bne.n	8003de6 <HAL_RCC_OscConfig+0x496>
 8003de4:	e0b0      	b.n	8003f48 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2238      	movs	r2, #56	@ 0x38
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d100      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4a4>
 8003df2:	e078      	b.n	8003ee6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d153      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b55      	ldr	r3, [pc, #340]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b54      	ldr	r3, [pc, #336]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e02:	4958      	ldr	r1, [pc, #352]	@ (8003f64 <HAL_RCC_OscConfig+0x614>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe fa50 	bl	80022ac <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fe fa4b 	bl	80022ac <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e092      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	4b4b      	ldr	r3, [pc, #300]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	049b      	lsls	r3, r3, #18
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e30:	4b48      	ldr	r3, [pc, #288]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a4c      	ldr	r2, [pc, #304]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	431a      	orrs	r2, r3
 8003e58:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b3c      	ldr	r3, [pc, #240]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	0449      	lsls	r1, r1, #17
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e6c:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4b38      	ldr	r3, [pc, #224]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e72:	2180      	movs	r1, #128	@ 0x80
 8003e74:	0549      	lsls	r1, r1, #21
 8003e76:	430a      	orrs	r2, r1
 8003e78:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fa17 	bl	80022ac <HAL_GetTick>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe fa12 	bl	80022ac <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e059      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	4b2f      	ldr	r3, [pc, #188]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	049b      	lsls	r3, r3, #18
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x534>
 8003ea2:	e051      	b.n	8003f48 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003eaa:	492e      	ldr	r1, [pc, #184]	@ (8003f64 <HAL_RCC_OscConfig+0x614>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fe f9fc 	bl	80022ac <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe f9f7 	bl	80022ac <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e03e      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	4b21      	ldr	r3, [pc, #132]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	049b      	lsls	r3, r3, #18
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003ede:	4923      	ldr	r1, [pc, #140]	@ (8003f6c <HAL_RCC_OscConfig+0x61c>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	e030      	b.n	8003f48 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e02b      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ef2:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <HAL_RCC_OscConfig+0x604>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2203      	movs	r2, #3
 8003efc:	401a      	ands	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d11e      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2270      	movs	r2, #112	@ 0x70
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d117      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	23fe      	movs	r3, #254	@ 0xfe
 8003f18:	01db      	lsls	r3, r3, #7
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d10e      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	23f8      	movs	r3, #248	@ 0xf8
 8003f2a:	039b      	lsls	r3, r3, #14
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	0f5b      	lsrs	r3, r3, #29
 8003f3a:	075a      	lsls	r2, r3, #29
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b008      	add	sp, #32
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	00001388 	.word	0x00001388
 8003f60:	efffffff 	.word	0xefffffff
 8003f64:	feffffff 	.word	0xfeffffff
 8003f68:	1fc1808c 	.word	0x1fc1808c
 8003f6c:	effefffc 	.word	0xeffefffc

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0e9      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b76      	ldr	r3, [pc, #472]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d91e      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b73      	ldr	r3, [pc, #460]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2207      	movs	r2, #7
 8003f98:	4393      	bics	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	4b70      	ldr	r3, [pc, #448]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa4:	f7fe f982 	bl	80022ac <HAL_GetTick>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fac:	e009      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fae:	f7fe f97d 	bl	80022ac <HAL_GetTick>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0ca      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fc2:	4b67      	ldr	r3, [pc, #412]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	4013      	ands	r3, r2
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d006      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fe4:	4b60      	ldr	r3, [pc, #384]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003fea:	21e0      	movs	r1, #224	@ 0xe0
 8003fec:	01c9      	lsls	r1, r1, #7
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800416c <HAL_RCC_ClockConfig+0x1fc>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b59      	ldr	r3, [pc, #356]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d057      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4013      	ands	r3, r2
 8004022:	d12b      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e097      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d107      	bne.n	8004040 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b4d      	ldr	r3, [pc, #308]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	049b      	lsls	r3, r3, #18
 8004038:	4013      	ands	r3, r2
 800403a:	d11f      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e08b      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4013      	ands	r3, r2
 8004052:	d113      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07f      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d106      	bne.n	800406e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004060:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004064:	2202      	movs	r2, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d108      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e074      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406e:	4b3e      	ldr	r3, [pc, #248]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06d      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407c:	4b3a      	ldr	r3, [pc, #232]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2207      	movs	r2, #7
 8004082:	4393      	bics	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fe f90c 	bl	80022ac <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004098:	e009      	b.n	80040ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409a:	f7fe f907 	bl	80022ac <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e054      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2238      	movs	r2, #56	@ 0x38
 80040b4:	401a      	ands	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ec      	bne.n	800409a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c0:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2207      	movs	r2, #7
 80040c6:	4013      	ands	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d21e      	bcs.n	800410c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2207      	movs	r2, #7
 80040d4:	4393      	bics	r3, r2
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040e0:	f7fe f8e4 	bl	80022ac <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040e8:	e009      	b.n	80040fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ea:	f7fe f8df 	bl	80022ac <HAL_GetTick>
 80040ee:	0002      	movs	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <HAL_RCC_ClockConfig+0x1f4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e02c      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040fe:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2207      	movs	r2, #7
 8004104:	4013      	ands	r3, r2
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d1ee      	bne.n	80040ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004116:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <HAL_RCC_ClockConfig+0x200>)
 800411c:	4013      	ands	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800412a:	f000 f829 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800412e:	0001      	movs	r1, r0
 8004130:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <HAL_RCC_ClockConfig+0x1f8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	220f      	movs	r2, #15
 8004138:	401a      	ands	r2, r3
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_RCC_ClockConfig+0x204>)
 800413c:	0092      	lsls	r2, r2, #2
 800413e:	58d3      	ldr	r3, [r2, r3]
 8004140:	221f      	movs	r2, #31
 8004142:	4013      	ands	r3, r2
 8004144:	000a      	movs	r2, r1
 8004146:	40da      	lsrs	r2, r3
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <HAL_RCC_ClockConfig+0x208>)
 800414a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCC_ClockConfig+0x20c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0018      	movs	r0, r3
 8004152:	f7fe f84f 	bl	80021f4 <HAL_InitTick>
 8004156:	0003      	movs	r3, r0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b004      	add	sp, #16
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40022000 	.word	0x40022000
 8004164:	00001388 	.word	0x00001388
 8004168:	40021000 	.word	0x40021000
 800416c:	fffff0ff 	.word	0xfffff0ff
 8004170:	ffff8fff 	.word	0xffff8fff
 8004174:	08007da4 	.word	0x08007da4
 8004178:	20000008 	.word	0x20000008
 800417c:	2000000c 	.word	0x2000000c

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004186:	4b3c      	ldr	r3, [pc, #240]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2238      	movs	r2, #56	@ 0x38
 800418c:	4013      	ands	r3, r2
 800418e:	d10f      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004190:	4b39      	ldr	r3, [pc, #228]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0adb      	lsrs	r3, r3, #11
 8004196:	2207      	movs	r2, #7
 8004198:	4013      	ands	r3, r2
 800419a:	2201      	movs	r2, #1
 800419c:	409a      	lsls	r2, r3
 800419e:	0013      	movs	r3, r2
 80041a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	4835      	ldr	r0, [pc, #212]	@ (800427c <HAL_RCC_GetSysClockFreq+0xfc>)
 80041a6:	f7fb ffb5 	bl	8000114 <__udivsi3>
 80041aa:	0003      	movs	r3, r0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e05d      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	4b31      	ldr	r3, [pc, #196]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2238      	movs	r2, #56	@ 0x38
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041bc:	4b30      	ldr	r3, [pc, #192]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x100>)
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e054      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2238      	movs	r2, #56	@ 0x38
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d138      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	3301      	adds	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4824      	ldr	r0, [pc, #144]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x100>)
 80041f0:	f7fb ff90 	bl	8000114 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	227f      	movs	r2, #127	@ 0x7f
 8004200:	4013      	ands	r3, r2
 8004202:	434b      	muls	r3, r1
 8004204:	617b      	str	r3, [r7, #20]
        break;
 8004206:	e00d      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	481c      	ldr	r0, [pc, #112]	@ (800427c <HAL_RCC_GetSysClockFreq+0xfc>)
 800420c:	f7fb ff82 	bl	8000114 <__udivsi3>
 8004210:	0003      	movs	r3, r0
 8004212:	0019      	movs	r1, r3
 8004214:	4b18      	ldr	r3, [pc, #96]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	227f      	movs	r2, #127	@ 0x7f
 800421c:	4013      	ands	r3, r2
 800421e:	434b      	muls	r3, r1
 8004220:	617b      	str	r3, [r7, #20]
        break;
 8004222:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004224:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0f5b      	lsrs	r3, r3, #29
 800422a:	2207      	movs	r2, #7
 800422c:	4013      	ands	r3, r2
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	6978      	ldr	r0, [r7, #20]
 8004236:	f7fb ff6d 	bl	8000114 <__udivsi3>
 800423a:	0003      	movs	r3, r0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	e015      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2238      	movs	r2, #56	@ 0x38
 8004246:	4013      	ands	r3, r2
 8004248:	2b20      	cmp	r3, #32
 800424a:	d103      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e00b      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004254:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2238      	movs	r2, #56	@ 0x38
 800425a:	4013      	ands	r3, r2
 800425c:	2b18      	cmp	r3, #24
 800425e:	d103      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004260:	23fa      	movs	r3, #250	@ 0xfa
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e001      	b.n	800426c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800426c:	693b      	ldr	r3, [r7, #16]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b006      	add	sp, #24
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	40021000 	.word	0x40021000
 800427c:	00f42400 	.word	0x00f42400
 8004280:	007a1200 	.word	0x007a1200

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800428c:	2313      	movs	r3, #19
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004294:	2312      	movs	r3, #18
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	4013      	ands	r3, r2
 80042a6:	d100      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042a8:	e0a3      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2011      	movs	r0, #17
 80042ac:	183b      	adds	r3, r7, r0
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	055b      	lsls	r3, r3, #21
 80042ba:	4013      	ands	r3, r2
 80042bc:	d110      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b7c      	ldr	r3, [pc, #496]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c2:	4b7b      	ldr	r3, [pc, #492]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042c4:	2180      	movs	r1, #128	@ 0x80
 80042c6:	0549      	lsls	r1, r1, #21
 80042c8:	430a      	orrs	r2, r1
 80042ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042cc:	4b78      	ldr	r3, [pc, #480]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	055b      	lsls	r3, r3, #21
 80042d4:	4013      	ands	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e0:	4b74      	ldr	r3, [pc, #464]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b73      	ldr	r3, [pc, #460]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042e6:	2180      	movs	r1, #128	@ 0x80
 80042e8:	0049      	lsls	r1, r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ee:	f7fd ffdd 	bl	80022ac <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042f6:	e00b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd ffd8 	bl	80022ac <HAL_GetTick>
 80042fc:	0002      	movs	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d904      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004306:	2313      	movs	r3, #19
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2203      	movs	r2, #3
 800430c:	701a      	strb	r2, [r3, #0]
        break;
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d0ed      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800431c:	2313      	movs	r3, #19
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d154      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004326:	4b62      	ldr	r3, [pc, #392]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800432a:	23c0      	movs	r3, #192	@ 0xc0
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4013      	ands	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	429a      	cmp	r2, r3
 8004340:	d014      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004342:	4b5b      	ldr	r3, [pc, #364]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	4a5c      	ldr	r2, [pc, #368]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004348:	4013      	ands	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800434c:	4b58      	ldr	r3, [pc, #352]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800434e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004350:	4b57      	ldr	r3, [pc, #348]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004352:	2180      	movs	r1, #128	@ 0x80
 8004354:	0249      	lsls	r1, r1, #9
 8004356:	430a      	orrs	r2, r1
 8004358:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800435a:	4b55      	ldr	r3, [pc, #340]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800435c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800435e:	4b54      	ldr	r3, [pc, #336]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004360:	4956      	ldr	r1, [pc, #344]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004362:	400a      	ands	r2, r1
 8004364:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004366:	4b52      	ldr	r3, [pc, #328]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2201      	movs	r2, #1
 8004370:	4013      	ands	r3, r2
 8004372:	d016      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd ff9a 	bl	80022ac <HAL_GetTick>
 8004378:	0003      	movs	r3, r0
 800437a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd ff95 	bl	80022ac <HAL_GetTick>
 8004382:	0002      	movs	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	4a4d      	ldr	r2, [pc, #308]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d904      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800438e:	2313      	movs	r3, #19
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2203      	movs	r2, #3
 8004394:	701a      	strb	r2, [r3, #0]
            break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004398:	4b45      	ldr	r3, [pc, #276]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800439a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439c:	2202      	movs	r2, #2
 800439e:	4013      	ands	r3, r2
 80043a0:	d0ed      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043a2:	2313      	movs	r3, #19
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ac:	4b40      	ldr	r3, [pc, #256]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	4a41      	ldr	r2, [pc, #260]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	4b3d      	ldr	r3, [pc, #244]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043c0:	e00c      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043c2:	2312      	movs	r3, #18
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2213      	movs	r2, #19
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e005      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	2312      	movs	r3, #18
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	2213      	movs	r2, #19
 80043d6:	18ba      	adds	r2, r7, r2
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043dc:	2311      	movs	r3, #17
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4b32      	ldr	r3, [pc, #200]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ea:	4b31      	ldr	r3, [pc, #196]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ec:	4935      	ldr	r1, [pc, #212]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fc:	4b2c      	ldr	r3, [pc, #176]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2203      	movs	r2, #3
 8004402:	4393      	bics	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800440c:	430a      	orrs	r2, r1
 800440e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2220      	movs	r2, #32
 8004416:	4013      	ands	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800441a:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004420:	4013      	ands	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b21      	ldr	r3, [pc, #132]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442a:	430a      	orrs	r2, r1
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	4013      	ands	r3, r2
 8004438:	d015      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443a:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	0899      	lsrs	r1, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004448:	430a      	orrs	r2, r1
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	2380      	movs	r3, #128	@ 0x80
 8004452:	05db      	lsls	r3, r3, #23
 8004454:	429a      	cmp	r2, r3
 8004456:	d106      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004458:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800445e:	2180      	movs	r1, #128	@ 0x80
 8004460:	0249      	lsls	r1, r1, #9
 8004462:	430a      	orrs	r2, r1
 8004464:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4013      	ands	r3, r2
 8004470:	d016      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004472:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004478:	4013      	ands	r3, r2
 800447a:	0019      	movs	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004482:	430a      	orrs	r2, r1
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	01db      	lsls	r3, r3, #7
 800448e:	429a      	cmp	r2, r3
 8004490:	d106      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004492:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004498:	2180      	movs	r1, #128	@ 0x80
 800449a:	0249      	lsls	r1, r1, #9
 800449c:	430a      	orrs	r2, r1
 800449e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044a0:	2312      	movs	r3, #18
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	781b      	ldrb	r3, [r3, #0]
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	fffffcff 	.word	0xfffffcff
 80044bc:	fffeffff 	.word	0xfffeffff
 80044c0:	00001388 	.word	0x00001388
 80044c4:	efffffff 	.word	0xefffffff
 80044c8:	ffffcfff 	.word	0xffffcfff
 80044cc:	ffff3fff 	.word	0xffff3fff

080044d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044d8:	230f      	movs	r3, #15
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d100      	bne.n	80044e8 <HAL_RTC_Init+0x18>
 80044e6:	e08c      	b.n	8004602 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2229      	movs	r2, #41	@ 0x29
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2228      	movs	r2, #40	@ 0x28
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2288      	movs	r2, #136	@ 0x88
 8004500:	0212      	lsls	r2, r2, #8
 8004502:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f7fd fa40 	bl	800198c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2229      	movs	r2, #41	@ 0x29
 8004510:	2102      	movs	r1, #2
 8004512:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2210      	movs	r2, #16
 800451c:	4013      	ands	r3, r2
 800451e:	2b10      	cmp	r3, #16
 8004520:	d062      	beq.n	80045e8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	22ca      	movs	r2, #202	@ 0xca
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2253      	movs	r2, #83	@ 0x53
 8004530:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004532:	250f      	movs	r5, #15
 8004534:	197c      	adds	r4, r7, r5
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f9cb 	bl	80048d4 <RTC_EnterInitMode>
 800453e:	0003      	movs	r3, r0
 8004540:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004542:	0028      	movs	r0, r5
 8004544:	183b      	adds	r3, r7, r0
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d12c      	bne.n	80045a6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	492e      	ldr	r1, [pc, #184]	@ (8004610 <HAL_RTC_Init+0x140>)
 8004558:	400a      	ands	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6999      	ldr	r1, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6912      	ldr	r2, [r2, #16]
 8004582:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004598:	183c      	adds	r4, r7, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 f9db 	bl	8004958 <RTC_ExitInitMode>
 80045a2:	0003      	movs	r3, r0
 80045a4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80045a6:	230f      	movs	r3, #15
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	00d2      	lsls	r2, r2, #3
 80045bc:	08d2      	lsrs	r2, r2, #3
 80045be:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6999      	ldr	r1, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	22ff      	movs	r2, #255	@ 0xff
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80045e6:	e003      	b.n	80045f0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80045f0:	230f      	movs	r3, #15
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2229      	movs	r2, #41	@ 0x29
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004602:	230f      	movs	r3, #15
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	781b      	ldrb	r3, [r3, #0]
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bdb0      	pop	{r4, r5, r7, pc}
 8004610:	fb8fffbf 	.word	0xfb8fffbf

08004614 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004614:	b5b0      	push	{r4, r5, r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2228      	movs	r2, #40	@ 0x28
 8004624:	5c9b      	ldrb	r3, [r3, r2]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_RTC_SetTime+0x1a>
 800462a:	2302      	movs	r3, #2
 800462c:	e092      	b.n	8004754 <HAL_RTC_SetTime+0x140>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2228      	movs	r2, #40	@ 0x28
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2229      	movs	r2, #41	@ 0x29
 800463a:	2102      	movs	r1, #2
 800463c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	22ca      	movs	r2, #202	@ 0xca
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2253      	movs	r2, #83	@ 0x53
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800464e:	2513      	movs	r5, #19
 8004650:	197c      	adds	r4, r7, r5
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 f93d 	bl	80048d4 <RTC_EnterInitMode>
 800465a:	0003      	movs	r3, r0
 800465c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800465e:	197b      	adds	r3, r7, r5
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d162      	bne.n	800472c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d125      	bne.n	80046b8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2240      	movs	r2, #64	@ 0x40
 8004674:	4013      	ands	r3, r2
 8004676:	d102      	bne.n	800467e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0018      	movs	r0, r3
 8004684:	f000 f9ac 	bl	80049e0 <RTC_ByteToBcd2>
 8004688:	0003      	movs	r3, r0
 800468a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f9a5 	bl	80049e0 <RTC_ByteToBcd2>
 8004696:	0003      	movs	r3, r0
 8004698:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800469a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	789b      	ldrb	r3, [r3, #2]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 f99d 	bl	80049e0 <RTC_ByteToBcd2>
 80046a6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046a8:	0022      	movs	r2, r4
 80046aa:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	78db      	ldrb	r3, [r3, #3]
 80046b0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e017      	b.n	80046e8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	4013      	ands	r3, r2
 80046c2:	d102      	bne.n	80046ca <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	491b      	ldr	r1, [pc, #108]	@ (800475c <HAL_RTC_SetTime+0x148>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4918      	ldr	r1, [pc, #96]	@ (8004760 <HAL_RTC_SetTime+0x14c>)
 8004700:	400a      	ands	r2, r1
 8004702:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	431a      	orrs	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800471c:	2313      	movs	r3, #19
 800471e:	18fc      	adds	r4, r7, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f918 	bl	8004958 <RTC_ExitInitMode>
 8004728:	0003      	movs	r3, r0
 800472a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	22ff      	movs	r2, #255	@ 0xff
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004734:	2313      	movs	r3, #19
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2229      	movs	r2, #41	@ 0x29
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2228      	movs	r2, #40	@ 0x28
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]

  return status;
 800474e:	2313      	movs	r3, #19
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	781b      	ldrb	r3, [r3, #0]
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b006      	add	sp, #24
 800475a:	bdb0      	pop	{r4, r5, r7, pc}
 800475c:	007f7f7f 	.word	0x007f7f7f
 8004760:	fffbffff 	.word	0xfffbffff

08004764 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004764:	b5b0      	push	{r4, r5, r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2228      	movs	r2, #40	@ 0x28
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_RTC_SetDate+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e07e      	b.n	800487c <HAL_RTC_SetDate+0x118>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2228      	movs	r2, #40	@ 0x28
 8004782:	2101      	movs	r1, #1
 8004784:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2229      	movs	r2, #41	@ 0x29
 800478a:	2102      	movs	r1, #2
 800478c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10e      	bne.n	80047b2 <HAL_RTC_SetDate+0x4e>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	001a      	movs	r2, r3
 800479a:	2310      	movs	r3, #16
 800479c:	4013      	ands	r3, r2
 800479e:	d008      	beq.n	80047b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2210      	movs	r2, #16
 80047a6:	4393      	bics	r3, r2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	330a      	adds	r3, #10
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11c      	bne.n	80047f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f90f 	bl	80049e0 <RTC_ByteToBcd2>
 80047c2:	0003      	movs	r3, r0
 80047c4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 f908 	bl	80049e0 <RTC_ByteToBcd2>
 80047d0:	0003      	movs	r3, r0
 80047d2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047d4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	789b      	ldrb	r3, [r3, #2]
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 f900 	bl	80049e0 <RTC_ByteToBcd2>
 80047e0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047e2:	0022      	movs	r2, r4
 80047e4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e00e      	b.n	8004810 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	78db      	ldrb	r3, [r3, #3]
 80047f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80047fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004804:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	22ca      	movs	r2, #202	@ 0xca
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2253      	movs	r2, #83	@ 0x53
 800481e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004820:	2513      	movs	r5, #19
 8004822:	197c      	adds	r4, r7, r5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 f854 	bl	80048d4 <RTC_EnterInitMode>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004830:	0028      	movs	r0, r5
 8004832:	183b      	adds	r3, r7, r0
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10c      	bne.n	8004854 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4910      	ldr	r1, [pc, #64]	@ (8004884 <HAL_RTC_SetDate+0x120>)
 8004842:	400a      	ands	r2, r1
 8004844:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004846:	183c      	adds	r4, r7, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 f884 	bl	8004958 <RTC_ExitInitMode>
 8004850:	0003      	movs	r3, r0
 8004852:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800485c:	2313      	movs	r3, #19
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2229      	movs	r2, #41	@ 0x29
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2228      	movs	r2, #40	@ 0x28
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]

  return status;
 8004876:	2313      	movs	r3, #19
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	781b      	ldrb	r3, [r3, #0]
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	b006      	add	sp, #24
 8004882:	bdb0      	pop	{r4, r5, r7, pc}
 8004884:	00ffff3f 	.word	0x00ffff3f

08004888 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <HAL_RTC_WaitForSynchro+0x48>)
 8004896:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004898:	f7fd fd08 	bl	80022ac <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80048a0:	e00a      	b.n	80048b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80048a2:	f7fd fd03 	bl	80022ac <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	23fa      	movs	r3, #250	@ 0xfa
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d901      	bls.n	80048b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e006      	b.n	80048c6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	4013      	ands	r3, r2
 80048c2:	d0ee      	beq.n	80048a2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b004      	add	sp, #16
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	0001005f 	.word	0x0001005f

080048d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80048dc:	230f      	movs	r3, #15
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2240      	movs	r2, #64	@ 0x40
 80048ec:	4013      	ands	r3, r2
 80048ee:	d12c      	bne.n	800494a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2180      	movs	r1, #128	@ 0x80
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004900:	f7fd fcd4 	bl	80022ac <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004908:	e014      	b.n	8004934 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800490a:	f7fd fccf 	bl	80022ac <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	200f      	movs	r0, #15
 8004916:	183b      	adds	r3, r7, r0
 8004918:	1839      	adds	r1, r7, r0
 800491a:	7809      	ldrb	r1, [r1, #0]
 800491c:	7019      	strb	r1, [r3, #0]
 800491e:	23fa      	movs	r3, #250	@ 0xfa
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	429a      	cmp	r2, r3
 8004924:	d906      	bls.n	8004934 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004926:	183b      	adds	r3, r7, r0
 8004928:	2203      	movs	r2, #3
 800492a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2229      	movs	r2, #41	@ 0x29
 8004930:	2103      	movs	r1, #3
 8004932:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2240      	movs	r2, #64	@ 0x40
 800493c:	4013      	ands	r3, r2
 800493e:	d104      	bne.n	800494a <RTC_EnterInitMode+0x76>
 8004940:	230f      	movs	r3, #15
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d1df      	bne.n	800490a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800494a:	230f      	movs	r3, #15
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bd80      	pop	{r7, pc}

08004958 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	240f      	movs	r4, #15
 8004962:	193b      	adds	r3, r7, r4
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004968:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <RTC_ExitInitMode+0x84>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <RTC_ExitInitMode+0x84>)
 800496e:	2180      	movs	r1, #128	@ 0x80
 8004970:	438a      	bics	r2, r1
 8004972:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004974:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <RTC_ExitInitMode+0x84>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2220      	movs	r2, #32
 800497a:	4013      	ands	r3, r2
 800497c:	d10d      	bne.n	800499a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff ff81 	bl	8004888 <HAL_RTC_WaitForSynchro>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d021      	beq.n	80049ce <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2229      	movs	r2, #41	@ 0x29
 800498e:	2103      	movs	r1, #3
 8004990:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004992:	193b      	adds	r3, r7, r4
 8004994:	2203      	movs	r2, #3
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e019      	b.n	80049ce <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <RTC_ExitInitMode+0x84>)
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <RTC_ExitInitMode+0x84>)
 80049a0:	2120      	movs	r1, #32
 80049a2:	438a      	bics	r2, r1
 80049a4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff ff6d 	bl	8004888 <HAL_RTC_WaitForSynchro>
 80049ae:	1e03      	subs	r3, r0, #0
 80049b0:	d007      	beq.n	80049c2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2229      	movs	r2, #41	@ 0x29
 80049b6:	2103      	movs	r1, #3
 80049b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80049ba:	230f      	movs	r3, #15
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2203      	movs	r2, #3
 80049c0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <RTC_ExitInitMode+0x84>)
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <RTC_ExitInitMode+0x84>)
 80049c8:	2120      	movs	r1, #32
 80049ca:	430a      	orrs	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80049ce:	230f      	movs	r3, #15
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	781b      	ldrb	r3, [r3, #0]
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b005      	add	sp, #20
 80049da:	bd90      	pop	{r4, r7, pc}
 80049dc:	40002800 	.word	0x40002800

080049e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	0002      	movs	r2, r0
 80049e8:	1dfb      	adds	r3, r7, #7
 80049ea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80049f0:	230b      	movs	r3, #11
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	1dfa      	adds	r2, r7, #7
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80049fa:	e008      	b.n	8004a0e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004a02:	220b      	movs	r2, #11
 8004a04:	18bb      	adds	r3, r7, r2
 8004a06:	18ba      	adds	r2, r7, r2
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	3a0a      	subs	r2, #10
 8004a0c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004a0e:	210b      	movs	r1, #11
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b09      	cmp	r3, #9
 8004a16:	d8f1      	bhi.n	80049fc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	187b      	adds	r3, r7, r1
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b2db      	uxtb	r3, r3
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2228      	movs	r2, #40	@ 0x28
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e082      	b.n	8004b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2228      	movs	r2, #40	@ 0x28
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2229      	movs	r2, #41	@ 0x29
 8004a56:	2102      	movs	r1, #2
 8004a58:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	22ca      	movs	r2, #202	@ 0xca
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2253      	movs	r2, #83	@ 0x53
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4938      	ldr	r1, [pc, #224]	@ (8004b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2104      	movs	r1, #4
 8004a86:	430a      	orrs	r2, r1
 8004a88:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004a8a:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2240      	movs	r2, #64	@ 0x40
 8004a90:	4013      	ands	r3, r2
 8004a92:	d121      	bne.n	8004ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8004a94:	f7fd fc0a 	bl	80022ac <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a9c:	e016      	b.n	8004acc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a9e:	f7fd fc05 	bl	80022ac <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	23fa      	movs	r3, #250	@ 0xfa
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d90d      	bls.n	8004acc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	22ff      	movs	r2, #255	@ 0xff
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2229      	movs	r2, #41	@ 0x29
 8004abc:	2103      	movs	r1, #3
 8004abe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2228      	movs	r2, #40	@ 0x28
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e041      	b.n	8004b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d0e2      	beq.n	8004a9e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2107      	movs	r1, #7
 8004aec:	438a      	bics	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6999      	ldr	r1, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004b00:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	58d3      	ldr	r3, [r2, r3]
 8004b06:	4916      	ldr	r1, [pc, #88]	@ (8004b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8004b08:	2280      	movs	r2, #128	@ 0x80
 8004b0a:	0312      	lsls	r2, r2, #12
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	2280      	movs	r2, #128	@ 0x80
 8004b10:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2180      	movs	r1, #128	@ 0x80
 8004b1e:	01c9      	lsls	r1, r1, #7
 8004b20:	430a      	orrs	r2, r1
 8004b22:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	00c9      	lsls	r1, r1, #3
 8004b32:	430a      	orrs	r2, r1
 8004b34:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	22ff      	movs	r2, #255	@ 0xff
 8004b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2229      	movs	r2, #41	@ 0x29
 8004b42:	2101      	movs	r1, #1
 8004b44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2228      	movs	r2, #40	@ 0x28
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b006      	add	sp, #24
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	fffffbff 	.word	0xfffffbff
 8004b5c:	40002800 	.word	0x40002800
 8004b60:	40021800 	.word	0x40021800

08004b64 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2228      	movs	r2, #40	@ 0x28
 8004b70:	5c9b      	ldrb	r3, [r3, r2]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e04e      	b.n	8004c18 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2228      	movs	r2, #40	@ 0x28
 8004b7e:	2101      	movs	r1, #1
 8004b80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2229      	movs	r2, #41	@ 0x29
 8004b86:	2102      	movs	r1, #2
 8004b88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ca      	movs	r2, #202	@ 0xca
 8004b90:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2253      	movs	r2, #83	@ 0x53
 8004b98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	491e      	ldr	r1, [pc, #120]	@ (8004c20 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	491b      	ldr	r1, [pc, #108]	@ (8004c24 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8004bba:	f7fd fb77 	bl	80022ac <HAL_GetTick>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004bc2:	e016      	b.n	8004bf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bc4:	f7fd fb72 	bl	80022ac <HAL_GetTick>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	23fa      	movs	r3, #250	@ 0xfa
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d90d      	bls.n	8004bf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	22ff      	movs	r2, #255	@ 0xff
 8004bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2229      	movs	r2, #41	@ 0x29
 8004be2:	2103      	movs	r1, #3
 8004be4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2228      	movs	r2, #40	@ 0x28
 8004bea:	2100      	movs	r1, #0
 8004bec:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e012      	b.n	8004c18 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d0e2      	beq.n	8004bc4 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	22ff      	movs	r2, #255	@ 0xff
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2229      	movs	r2, #41	@ 0x29
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2228      	movs	r2, #40	@ 0x28
 8004c12:	2100      	movs	r1, #0
 8004c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b004      	add	sp, #16
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	fffffbff 	.word	0xfffffbff
 8004c24:	ffffbfff 	.word	0xffffbfff

08004c28 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	2204      	movs	r2, #4
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2104      	movs	r1, #4
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 f808 	bl	8004c64 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2229      	movs	r2, #41	@ 0x29
 8004c58:	2101      	movs	r1, #1
 8004c5a:	5499      	strb	r1, [r3, r2]
}
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <siprintf>:
 8004c74:	b40e      	push	{r1, r2, r3}
 8004c76:	b510      	push	{r4, lr}
 8004c78:	2400      	movs	r4, #0
 8004c7a:	490c      	ldr	r1, [pc, #48]	@ (8004cac <siprintf+0x38>)
 8004c7c:	b09d      	sub	sp, #116	@ 0x74
 8004c7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c80:	9002      	str	r0, [sp, #8]
 8004c82:	9006      	str	r0, [sp, #24]
 8004c84:	9107      	str	r1, [sp, #28]
 8004c86:	9104      	str	r1, [sp, #16]
 8004c88:	4809      	ldr	r0, [pc, #36]	@ (8004cb0 <siprintf+0x3c>)
 8004c8a:	490a      	ldr	r1, [pc, #40]	@ (8004cb4 <siprintf+0x40>)
 8004c8c:	cb04      	ldmia	r3!, {r2}
 8004c8e:	9105      	str	r1, [sp, #20]
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	a902      	add	r1, sp, #8
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c98:	f000 f9ba 	bl	8005010 <_svfiprintf_r>
 8004c9c:	9b02      	ldr	r3, [sp, #8]
 8004c9e:	701c      	strb	r4, [r3, #0]
 8004ca0:	b01d      	add	sp, #116	@ 0x74
 8004ca2:	bc10      	pop	{r4}
 8004ca4:	bc08      	pop	{r3}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	4718      	bx	r3
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	7fffffff 	.word	0x7fffffff
 8004cb0:	20000014 	.word	0x20000014
 8004cb4:	ffff0208 	.word	0xffff0208

08004cb8 <memmove>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4288      	cmp	r0, r1
 8004cbc:	d902      	bls.n	8004cc4 <memmove+0xc>
 8004cbe:	188b      	adds	r3, r1, r2
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	d308      	bcc.n	8004cd6 <memmove+0x1e>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d007      	beq.n	8004cda <memmove+0x22>
 8004cca:	5ccc      	ldrb	r4, [r1, r3]
 8004ccc:	54c4      	strb	r4, [r0, r3]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	e7f9      	b.n	8004cc6 <memmove+0xe>
 8004cd2:	5c8b      	ldrb	r3, [r1, r2]
 8004cd4:	5483      	strb	r3, [r0, r2]
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	d2fb      	bcs.n	8004cd2 <memmove+0x1a>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <memset>:
 8004cdc:	0003      	movs	r3, r0
 8004cde:	1882      	adds	r2, r0, r2
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	7019      	strb	r1, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	@ (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	20000014 	.word	0x20000014

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	4c0c      	ldr	r4, [pc, #48]	@ (8004d30 <__libc_init_array+0x38>)
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004d34 <__libc_init_array+0x3c>)
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	2600      	movs	r6, #0
 8004d0a:	f000 fc51 	bl	80055b0 <_init>
 8004d0e:	4c0a      	ldr	r4, [pc, #40]	@ (8004d38 <__libc_init_array+0x40>)
 8004d10:	4d0a      	ldr	r5, [pc, #40]	@ (8004d3c <__libc_init_array+0x44>)
 8004d12:	1b64      	subs	r4, r4, r5
 8004d14:	10a4      	asrs	r4, r4, #2
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	00b3      	lsls	r3, r6, #2
 8004d1e:	58eb      	ldr	r3, [r5, r3]
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	00b3      	lsls	r3, r6, #2
 8004d28:	58eb      	ldr	r3, [r5, r3]
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08007e18 	.word	0x08007e18
 8004d34:	08007e18 	.word	0x08007e18
 8004d38:	08007e1c 	.word	0x08007e1c
 8004d3c:	08007e18 	.word	0x08007e18

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <memcpy>:
 8004d44:	2300      	movs	r3, #0
 8004d46:	b510      	push	{r4, lr}
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d100      	bne.n	8004d4e <memcpy+0xa>
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	5ccc      	ldrb	r4, [r1, r3]
 8004d50:	54c4      	strb	r4, [r0, r3]
 8004d52:	3301      	adds	r3, #1
 8004d54:	e7f8      	b.n	8004d48 <memcpy+0x4>
	...

08004d58 <_free_r>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	0005      	movs	r5, r0
 8004d5c:	1e0c      	subs	r4, r1, #0
 8004d5e:	d010      	beq.n	8004d82 <_free_r+0x2a>
 8004d60:	3c04      	subs	r4, #4
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da00      	bge.n	8004d6a <_free_r+0x12>
 8004d68:	18e4      	adds	r4, r4, r3
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	f000 f8e0 	bl	8004f30 <__malloc_lock>
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <_free_r+0x90>)
 8004d72:	6813      	ldr	r3, [r2, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <_free_r+0x2c>
 8004d78:	6063      	str	r3, [r4, #4]
 8004d7a:	6014      	str	r4, [r2, #0]
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	f000 f8df 	bl	8004f40 <__malloc_unlock>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d908      	bls.n	8004d9a <_free_r+0x42>
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	1821      	adds	r1, r4, r0
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	d1f3      	bne.n	8004d78 <_free_r+0x20>
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	1809      	adds	r1, r1, r0
 8004d96:	6021      	str	r1, [r4, #0]
 8004d98:	e7ee      	b.n	8004d78 <_free_r+0x20>
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <_free_r+0x4e>
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	d9f9      	bls.n	8004d9a <_free_r+0x42>
 8004da6:	6811      	ldr	r1, [r2, #0]
 8004da8:	1850      	adds	r0, r2, r1
 8004daa:	42a0      	cmp	r0, r4
 8004dac:	d10b      	bne.n	8004dc6 <_free_r+0x6e>
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1809      	adds	r1, r1, r0
 8004db2:	1850      	adds	r0, r2, r1
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	4283      	cmp	r3, r0
 8004db8:	d1e0      	bne.n	8004d7c <_free_r+0x24>
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	1841      	adds	r1, r0, r1
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	6053      	str	r3, [r2, #4]
 8004dc4:	e7da      	b.n	8004d7c <_free_r+0x24>
 8004dc6:	42a0      	cmp	r0, r4
 8004dc8:	d902      	bls.n	8004dd0 <_free_r+0x78>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	e7d5      	b.n	8004d7c <_free_r+0x24>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	1821      	adds	r1, r4, r0
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	d103      	bne.n	8004de0 <_free_r+0x88>
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	1809      	adds	r1, r1, r0
 8004dde:	6021      	str	r1, [r4, #0]
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6054      	str	r4, [r2, #4]
 8004de4:	e7ca      	b.n	8004d7c <_free_r+0x24>
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	20000680 	.word	0x20000680

08004dec <sbrk_aligned>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0f      	ldr	r6, [pc, #60]	@ (8004e2c <sbrk_aligned+0x40>)
 8004df0:	000d      	movs	r5, r1
 8004df2:	6831      	ldr	r1, [r6, #0]
 8004df4:	0004      	movs	r4, r0
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d102      	bne.n	8004e00 <sbrk_aligned+0x14>
 8004dfa:	f000 fb83 	bl	8005504 <_sbrk_r>
 8004dfe:	6030      	str	r0, [r6, #0]
 8004e00:	0029      	movs	r1, r5
 8004e02:	0020      	movs	r0, r4
 8004e04:	f000 fb7e 	bl	8005504 <_sbrk_r>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d103      	bne.n	8004e14 <sbrk_aligned+0x28>
 8004e0c:	2501      	movs	r5, #1
 8004e0e:	426d      	negs	r5, r5
 8004e10:	0028      	movs	r0, r5
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	2303      	movs	r3, #3
 8004e16:	1cc5      	adds	r5, r0, #3
 8004e18:	439d      	bics	r5, r3
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d0f8      	beq.n	8004e10 <sbrk_aligned+0x24>
 8004e1e:	1a29      	subs	r1, r5, r0
 8004e20:	0020      	movs	r0, r4
 8004e22:	f000 fb6f 	bl	8005504 <_sbrk_r>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d1f2      	bne.n	8004e10 <sbrk_aligned+0x24>
 8004e2a:	e7ef      	b.n	8004e0c <sbrk_aligned+0x20>
 8004e2c:	2000067c 	.word	0x2000067c

08004e30 <_malloc_r>:
 8004e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e32:	2203      	movs	r2, #3
 8004e34:	1ccb      	adds	r3, r1, #3
 8004e36:	4393      	bics	r3, r2
 8004e38:	3308      	adds	r3, #8
 8004e3a:	0005      	movs	r5, r0
 8004e3c:	001f      	movs	r7, r3
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d234      	bcs.n	8004eac <_malloc_r+0x7c>
 8004e42:	270c      	movs	r7, #12
 8004e44:	42b9      	cmp	r1, r7
 8004e46:	d833      	bhi.n	8004eb0 <_malloc_r+0x80>
 8004e48:	0028      	movs	r0, r5
 8004e4a:	f000 f871 	bl	8004f30 <__malloc_lock>
 8004e4e:	4e37      	ldr	r6, [pc, #220]	@ (8004f2c <_malloc_r+0xfc>)
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	001c      	movs	r4, r3
 8004e54:	2c00      	cmp	r4, #0
 8004e56:	d12f      	bne.n	8004eb8 <_malloc_r+0x88>
 8004e58:	0039      	movs	r1, r7
 8004e5a:	0028      	movs	r0, r5
 8004e5c:	f7ff ffc6 	bl	8004dec <sbrk_aligned>
 8004e60:	0004      	movs	r4, r0
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d15f      	bne.n	8004f26 <_malloc_r+0xf6>
 8004e66:	6834      	ldr	r4, [r6, #0]
 8004e68:	9400      	str	r4, [sp, #0]
 8004e6a:	9b00      	ldr	r3, [sp, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d14a      	bne.n	8004f06 <_malloc_r+0xd6>
 8004e70:	2c00      	cmp	r4, #0
 8004e72:	d052      	beq.n	8004f1a <_malloc_r+0xea>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	0028      	movs	r0, r5
 8004e78:	18e3      	adds	r3, r4, r3
 8004e7a:	9900      	ldr	r1, [sp, #0]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	f000 fb41 	bl	8005504 <_sbrk_r>
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	4283      	cmp	r3, r0
 8004e86:	d148      	bne.n	8004f1a <_malloc_r+0xea>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	0028      	movs	r0, r5
 8004e8c:	1aff      	subs	r7, r7, r3
 8004e8e:	0039      	movs	r1, r7
 8004e90:	f7ff ffac 	bl	8004dec <sbrk_aligned>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d040      	beq.n	8004f1a <_malloc_r+0xea>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	19db      	adds	r3, r3, r7
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	6833      	ldr	r3, [r6, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	d133      	bne.n	8004f0e <_malloc_r+0xde>
 8004ea6:	9b00      	ldr	r3, [sp, #0]
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	e019      	b.n	8004ee0 <_malloc_r+0xb0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dac9      	bge.n	8004e44 <_malloc_r+0x14>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	602b      	str	r3, [r5, #0]
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eb8:	6821      	ldr	r1, [r4, #0]
 8004eba:	1bc9      	subs	r1, r1, r7
 8004ebc:	d420      	bmi.n	8004f00 <_malloc_r+0xd0>
 8004ebe:	290b      	cmp	r1, #11
 8004ec0:	d90a      	bls.n	8004ed8 <_malloc_r+0xa8>
 8004ec2:	19e2      	adds	r2, r4, r7
 8004ec4:	6027      	str	r7, [r4, #0]
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d104      	bne.n	8004ed4 <_malloc_r+0xa4>
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	6011      	str	r1, [r2, #0]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	e005      	b.n	8004ee0 <_malloc_r+0xb0>
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e7f9      	b.n	8004ecc <_malloc_r+0x9c>
 8004ed8:	6862      	ldr	r2, [r4, #4]
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	d10e      	bne.n	8004efc <_malloc_r+0xcc>
 8004ede:	6032      	str	r2, [r6, #0]
 8004ee0:	0028      	movs	r0, r5
 8004ee2:	f000 f82d 	bl	8004f40 <__malloc_unlock>
 8004ee6:	0020      	movs	r0, r4
 8004ee8:	2207      	movs	r2, #7
 8004eea:	300b      	adds	r0, #11
 8004eec:	1d23      	adds	r3, r4, #4
 8004eee:	4390      	bics	r0, r2
 8004ef0:	1ac2      	subs	r2, r0, r3
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	d0df      	beq.n	8004eb6 <_malloc_r+0x86>
 8004ef6:	1a1b      	subs	r3, r3, r0
 8004ef8:	50a3      	str	r3, [r4, r2]
 8004efa:	e7dc      	b.n	8004eb6 <_malloc_r+0x86>
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e7ef      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f00:	0023      	movs	r3, r4
 8004f02:	6864      	ldr	r4, [r4, #4]
 8004f04:	e7a6      	b.n	8004e54 <_malloc_r+0x24>
 8004f06:	9c00      	ldr	r4, [sp, #0]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	e7ad      	b.n	8004e6a <_malloc_r+0x3a>
 8004f0e:	001a      	movs	r2, r3
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	d1fb      	bne.n	8004f0e <_malloc_r+0xde>
 8004f16:	2300      	movs	r3, #0
 8004f18:	e7da      	b.n	8004ed0 <_malloc_r+0xa0>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f000 f80e 	bl	8004f40 <__malloc_unlock>
 8004f24:	e7c6      	b.n	8004eb4 <_malloc_r+0x84>
 8004f26:	6007      	str	r7, [r0, #0]
 8004f28:	e7da      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	20000680 	.word	0x20000680

08004f30 <__malloc_lock>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4802      	ldr	r0, [pc, #8]	@ (8004f3c <__malloc_lock+0xc>)
 8004f34:	f7ff ff04 	bl	8004d40 <__retarget_lock_acquire_recursive>
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	20000678 	.word	0x20000678

08004f40 <__malloc_unlock>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4802      	ldr	r0, [pc, #8]	@ (8004f4c <__malloc_unlock+0xc>)
 8004f44:	f7ff fefd 	bl	8004d42 <__retarget_lock_release_recursive>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	20000678 	.word	0x20000678

08004f50 <__ssputs_r>:
 8004f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f52:	688e      	ldr	r6, [r1, #8]
 8004f54:	b085      	sub	sp, #20
 8004f56:	001f      	movs	r7, r3
 8004f58:	000c      	movs	r4, r1
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	9002      	str	r0, [sp, #8]
 8004f5e:	9203      	str	r2, [sp, #12]
 8004f60:	42be      	cmp	r6, r7
 8004f62:	d830      	bhi.n	8004fc6 <__ssputs_r+0x76>
 8004f64:	210c      	movs	r1, #12
 8004f66:	5e62      	ldrsh	r2, [r4, r1]
 8004f68:	2190      	movs	r1, #144	@ 0x90
 8004f6a:	00c9      	lsls	r1, r1, #3
 8004f6c:	420a      	tst	r2, r1
 8004f6e:	d028      	beq.n	8004fc2 <__ssputs_r+0x72>
 8004f70:	2003      	movs	r0, #3
 8004f72:	6921      	ldr	r1, [r4, #16]
 8004f74:	1a5b      	subs	r3, r3, r1
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	6963      	ldr	r3, [r4, #20]
 8004f7a:	4343      	muls	r3, r0
 8004f7c:	9801      	ldr	r0, [sp, #4]
 8004f7e:	0fdd      	lsrs	r5, r3, #31
 8004f80:	18ed      	adds	r5, r5, r3
 8004f82:	1c7b      	adds	r3, r7, #1
 8004f84:	181b      	adds	r3, r3, r0
 8004f86:	106d      	asrs	r5, r5, #1
 8004f88:	42ab      	cmp	r3, r5
 8004f8a:	d900      	bls.n	8004f8e <__ssputs_r+0x3e>
 8004f8c:	001d      	movs	r5, r3
 8004f8e:	0552      	lsls	r2, r2, #21
 8004f90:	d528      	bpl.n	8004fe4 <__ssputs_r+0x94>
 8004f92:	0029      	movs	r1, r5
 8004f94:	9802      	ldr	r0, [sp, #8]
 8004f96:	f7ff ff4b 	bl	8004e30 <_malloc_r>
 8004f9a:	1e06      	subs	r6, r0, #0
 8004f9c:	d02c      	beq.n	8004ff8 <__ssputs_r+0xa8>
 8004f9e:	9a01      	ldr	r2, [sp, #4]
 8004fa0:	6921      	ldr	r1, [r4, #16]
 8004fa2:	f7ff fecf 	bl	8004d44 <memcpy>
 8004fa6:	89a2      	ldrh	r2, [r4, #12]
 8004fa8:	4b18      	ldr	r3, [pc, #96]	@ (800500c <__ssputs_r+0xbc>)
 8004faa:	401a      	ands	r2, r3
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	9b01      	ldr	r3, [sp, #4]
 8004fb4:	6126      	str	r6, [r4, #16]
 8004fb6:	18f6      	adds	r6, r6, r3
 8004fb8:	6026      	str	r6, [r4, #0]
 8004fba:	003e      	movs	r6, r7
 8004fbc:	6165      	str	r5, [r4, #20]
 8004fbe:	1aed      	subs	r5, r5, r3
 8004fc0:	60a5      	str	r5, [r4, #8]
 8004fc2:	42be      	cmp	r6, r7
 8004fc4:	d900      	bls.n	8004fc8 <__ssputs_r+0x78>
 8004fc6:	003e      	movs	r6, r7
 8004fc8:	0032      	movs	r2, r6
 8004fca:	9903      	ldr	r1, [sp, #12]
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	f7ff fe73 	bl	8004cb8 <memmove>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	1b9b      	subs	r3, r3, r6
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	199b      	adds	r3, r3, r6
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	b005      	add	sp, #20
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe4:	002a      	movs	r2, r5
 8004fe6:	9802      	ldr	r0, [sp, #8]
 8004fe8:	f000 faa9 	bl	800553e <_realloc_r>
 8004fec:	1e06      	subs	r6, r0, #0
 8004fee:	d1e0      	bne.n	8004fb2 <__ssputs_r+0x62>
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	9802      	ldr	r0, [sp, #8]
 8004ff4:	f7ff feb0 	bl	8004d58 <_free_r>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	9a02      	ldr	r2, [sp, #8]
 8004ffe:	4240      	negs	r0, r0
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	89a2      	ldrh	r2, [r4, #12]
 8005004:	3334      	adds	r3, #52	@ 0x34
 8005006:	4313      	orrs	r3, r2
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	e7e9      	b.n	8004fe0 <__ssputs_r+0x90>
 800500c:	fffffb7f 	.word	0xfffffb7f

08005010 <_svfiprintf_r>:
 8005010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005012:	b0a1      	sub	sp, #132	@ 0x84
 8005014:	9003      	str	r0, [sp, #12]
 8005016:	001d      	movs	r5, r3
 8005018:	898b      	ldrh	r3, [r1, #12]
 800501a:	000f      	movs	r7, r1
 800501c:	0016      	movs	r6, r2
 800501e:	061b      	lsls	r3, r3, #24
 8005020:	d511      	bpl.n	8005046 <_svfiprintf_r+0x36>
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10e      	bne.n	8005046 <_svfiprintf_r+0x36>
 8005028:	2140      	movs	r1, #64	@ 0x40
 800502a:	f7ff ff01 	bl	8004e30 <_malloc_r>
 800502e:	6038      	str	r0, [r7, #0]
 8005030:	6138      	str	r0, [r7, #16]
 8005032:	2800      	cmp	r0, #0
 8005034:	d105      	bne.n	8005042 <_svfiprintf_r+0x32>
 8005036:	230c      	movs	r3, #12
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	2001      	movs	r0, #1
 800503e:	4240      	negs	r0, r0
 8005040:	e0cf      	b.n	80051e2 <_svfiprintf_r+0x1d2>
 8005042:	2340      	movs	r3, #64	@ 0x40
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	ac08      	add	r4, sp, #32
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	3320      	adds	r3, #32
 800504e:	7663      	strb	r3, [r4, #25]
 8005050:	3310      	adds	r3, #16
 8005052:	76a3      	strb	r3, [r4, #26]
 8005054:	9507      	str	r5, [sp, #28]
 8005056:	0035      	movs	r5, r6
 8005058:	782b      	ldrb	r3, [r5, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <_svfiprintf_r+0x52>
 800505e:	2b25      	cmp	r3, #37	@ 0x25
 8005060:	d148      	bne.n	80050f4 <_svfiprintf_r+0xe4>
 8005062:	1bab      	subs	r3, r5, r6
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	42b5      	cmp	r5, r6
 8005068:	d00b      	beq.n	8005082 <_svfiprintf_r+0x72>
 800506a:	0032      	movs	r2, r6
 800506c:	0039      	movs	r1, r7
 800506e:	9803      	ldr	r0, [sp, #12]
 8005070:	f7ff ff6e 	bl	8004f50 <__ssputs_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d100      	bne.n	800507a <_svfiprintf_r+0x6a>
 8005078:	e0ae      	b.n	80051d8 <_svfiprintf_r+0x1c8>
 800507a:	6963      	ldr	r3, [r4, #20]
 800507c:	9a05      	ldr	r2, [sp, #20]
 800507e:	189b      	adds	r3, r3, r2
 8005080:	6163      	str	r3, [r4, #20]
 8005082:	782b      	ldrb	r3, [r5, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d100      	bne.n	800508a <_svfiprintf_r+0x7a>
 8005088:	e0a6      	b.n	80051d8 <_svfiprintf_r+0x1c8>
 800508a:	2201      	movs	r2, #1
 800508c:	2300      	movs	r3, #0
 800508e:	4252      	negs	r2, r2
 8005090:	6062      	str	r2, [r4, #4]
 8005092:	a904      	add	r1, sp, #16
 8005094:	3254      	adds	r2, #84	@ 0x54
 8005096:	1852      	adds	r2, r2, r1
 8005098:	1c6e      	adds	r6, r5, #1
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	60e3      	str	r3, [r4, #12]
 800509e:	60a3      	str	r3, [r4, #8]
 80050a0:	7013      	strb	r3, [r2, #0]
 80050a2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80050a4:	4b54      	ldr	r3, [pc, #336]	@ (80051f8 <_svfiprintf_r+0x1e8>)
 80050a6:	2205      	movs	r2, #5
 80050a8:	0018      	movs	r0, r3
 80050aa:	7831      	ldrb	r1, [r6, #0]
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f000 fa3b 	bl	8005528 <memchr>
 80050b2:	1c75      	adds	r5, r6, #1
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d11f      	bne.n	80050f8 <_svfiprintf_r+0xe8>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	06d3      	lsls	r3, r2, #27
 80050bc:	d504      	bpl.n	80050c8 <_svfiprintf_r+0xb8>
 80050be:	2353      	movs	r3, #83	@ 0x53
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	185b      	adds	r3, r3, r1
 80050c4:	2120      	movs	r1, #32
 80050c6:	7019      	strb	r1, [r3, #0]
 80050c8:	0713      	lsls	r3, r2, #28
 80050ca:	d504      	bpl.n	80050d6 <_svfiprintf_r+0xc6>
 80050cc:	2353      	movs	r3, #83	@ 0x53
 80050ce:	a904      	add	r1, sp, #16
 80050d0:	185b      	adds	r3, r3, r1
 80050d2:	212b      	movs	r1, #43	@ 0x2b
 80050d4:	7019      	strb	r1, [r3, #0]
 80050d6:	7833      	ldrb	r3, [r6, #0]
 80050d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050da:	d016      	beq.n	800510a <_svfiprintf_r+0xfa>
 80050dc:	0035      	movs	r5, r6
 80050de:	2100      	movs	r1, #0
 80050e0:	200a      	movs	r0, #10
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	782a      	ldrb	r2, [r5, #0]
 80050e6:	1c6e      	adds	r6, r5, #1
 80050e8:	3a30      	subs	r2, #48	@ 0x30
 80050ea:	2a09      	cmp	r2, #9
 80050ec:	d950      	bls.n	8005190 <_svfiprintf_r+0x180>
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d111      	bne.n	8005116 <_svfiprintf_r+0x106>
 80050f2:	e017      	b.n	8005124 <_svfiprintf_r+0x114>
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7af      	b.n	8005058 <_svfiprintf_r+0x48>
 80050f8:	9b05      	ldr	r3, [sp, #20]
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	1ac0      	subs	r0, r0, r3
 80050fe:	2301      	movs	r3, #1
 8005100:	4083      	lsls	r3, r0
 8005102:	4313      	orrs	r3, r2
 8005104:	002e      	movs	r6, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	e7cc      	b.n	80050a4 <_svfiprintf_r+0x94>
 800510a:	9b07      	ldr	r3, [sp, #28]
 800510c:	1d19      	adds	r1, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9107      	str	r1, [sp, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	db01      	blt.n	800511a <_svfiprintf_r+0x10a>
 8005116:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005118:	e004      	b.n	8005124 <_svfiprintf_r+0x114>
 800511a:	425b      	negs	r3, r3
 800511c:	60e3      	str	r3, [r4, #12]
 800511e:	2302      	movs	r3, #2
 8005120:	4313      	orrs	r3, r2
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	782b      	ldrb	r3, [r5, #0]
 8005126:	2b2e      	cmp	r3, #46	@ 0x2e
 8005128:	d10c      	bne.n	8005144 <_svfiprintf_r+0x134>
 800512a:	786b      	ldrb	r3, [r5, #1]
 800512c:	2b2a      	cmp	r3, #42	@ 0x2a
 800512e:	d134      	bne.n	800519a <_svfiprintf_r+0x18a>
 8005130:	9b07      	ldr	r3, [sp, #28]
 8005132:	3502      	adds	r5, #2
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	9207      	str	r2, [sp, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	da01      	bge.n	8005142 <_svfiprintf_r+0x132>
 800513e:	2301      	movs	r3, #1
 8005140:	425b      	negs	r3, r3
 8005142:	9309      	str	r3, [sp, #36]	@ 0x24
 8005144:	4e2d      	ldr	r6, [pc, #180]	@ (80051fc <_svfiprintf_r+0x1ec>)
 8005146:	2203      	movs	r2, #3
 8005148:	0030      	movs	r0, r6
 800514a:	7829      	ldrb	r1, [r5, #0]
 800514c:	f000 f9ec 	bl	8005528 <memchr>
 8005150:	2800      	cmp	r0, #0
 8005152:	d006      	beq.n	8005162 <_svfiprintf_r+0x152>
 8005154:	2340      	movs	r3, #64	@ 0x40
 8005156:	1b80      	subs	r0, r0, r6
 8005158:	4083      	lsls	r3, r0
 800515a:	6822      	ldr	r2, [r4, #0]
 800515c:	3501      	adds	r5, #1
 800515e:	4313      	orrs	r3, r2
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	7829      	ldrb	r1, [r5, #0]
 8005164:	2206      	movs	r2, #6
 8005166:	4826      	ldr	r0, [pc, #152]	@ (8005200 <_svfiprintf_r+0x1f0>)
 8005168:	1c6e      	adds	r6, r5, #1
 800516a:	7621      	strb	r1, [r4, #24]
 800516c:	f000 f9dc 	bl	8005528 <memchr>
 8005170:	2800      	cmp	r0, #0
 8005172:	d038      	beq.n	80051e6 <_svfiprintf_r+0x1d6>
 8005174:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <_svfiprintf_r+0x1f4>)
 8005176:	2b00      	cmp	r3, #0
 8005178:	d122      	bne.n	80051c0 <_svfiprintf_r+0x1b0>
 800517a:	2207      	movs	r2, #7
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	3307      	adds	r3, #7
 8005180:	4393      	bics	r3, r2
 8005182:	3308      	adds	r3, #8
 8005184:	9307      	str	r3, [sp, #28]
 8005186:	6963      	ldr	r3, [r4, #20]
 8005188:	9a04      	ldr	r2, [sp, #16]
 800518a:	189b      	adds	r3, r3, r2
 800518c:	6163      	str	r3, [r4, #20]
 800518e:	e762      	b.n	8005056 <_svfiprintf_r+0x46>
 8005190:	4343      	muls	r3, r0
 8005192:	0035      	movs	r5, r6
 8005194:	2101      	movs	r1, #1
 8005196:	189b      	adds	r3, r3, r2
 8005198:	e7a4      	b.n	80050e4 <_svfiprintf_r+0xd4>
 800519a:	2300      	movs	r3, #0
 800519c:	200a      	movs	r0, #10
 800519e:	0019      	movs	r1, r3
 80051a0:	3501      	adds	r5, #1
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	782a      	ldrb	r2, [r5, #0]
 80051a6:	1c6e      	adds	r6, r5, #1
 80051a8:	3a30      	subs	r2, #48	@ 0x30
 80051aa:	2a09      	cmp	r2, #9
 80051ac:	d903      	bls.n	80051b6 <_svfiprintf_r+0x1a6>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0c8      	beq.n	8005144 <_svfiprintf_r+0x134>
 80051b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80051b4:	e7c6      	b.n	8005144 <_svfiprintf_r+0x134>
 80051b6:	4341      	muls	r1, r0
 80051b8:	0035      	movs	r5, r6
 80051ba:	2301      	movs	r3, #1
 80051bc:	1889      	adds	r1, r1, r2
 80051be:	e7f1      	b.n	80051a4 <_svfiprintf_r+0x194>
 80051c0:	aa07      	add	r2, sp, #28
 80051c2:	9200      	str	r2, [sp, #0]
 80051c4:	0021      	movs	r1, r4
 80051c6:	003a      	movs	r2, r7
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <_svfiprintf_r+0x1f8>)
 80051ca:	9803      	ldr	r0, [sp, #12]
 80051cc:	e000      	b.n	80051d0 <_svfiprintf_r+0x1c0>
 80051ce:	bf00      	nop
 80051d0:	9004      	str	r0, [sp, #16]
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	3301      	adds	r3, #1
 80051d6:	d1d6      	bne.n	8005186 <_svfiprintf_r+0x176>
 80051d8:	89bb      	ldrh	r3, [r7, #12]
 80051da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80051dc:	065b      	lsls	r3, r3, #25
 80051de:	d500      	bpl.n	80051e2 <_svfiprintf_r+0x1d2>
 80051e0:	e72c      	b.n	800503c <_svfiprintf_r+0x2c>
 80051e2:	b021      	add	sp, #132	@ 0x84
 80051e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e6:	aa07      	add	r2, sp, #28
 80051e8:	9200      	str	r2, [sp, #0]
 80051ea:	0021      	movs	r1, r4
 80051ec:	003a      	movs	r2, r7
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <_svfiprintf_r+0x1f8>)
 80051f0:	9803      	ldr	r0, [sp, #12]
 80051f2:	f000 f87b 	bl	80052ec <_printf_i>
 80051f6:	e7eb      	b.n	80051d0 <_svfiprintf_r+0x1c0>
 80051f8:	08007de4 	.word	0x08007de4
 80051fc:	08007dea 	.word	0x08007dea
 8005200:	08007dee 	.word	0x08007dee
 8005204:	00000000 	.word	0x00000000
 8005208:	08004f51 	.word	0x08004f51

0800520c <_printf_common>:
 800520c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800520e:	0016      	movs	r6, r2
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	688a      	ldr	r2, [r1, #8]
 8005214:	690b      	ldr	r3, [r1, #16]
 8005216:	000c      	movs	r4, r1
 8005218:	9000      	str	r0, [sp, #0]
 800521a:	4293      	cmp	r3, r2
 800521c:	da00      	bge.n	8005220 <_printf_common+0x14>
 800521e:	0013      	movs	r3, r2
 8005220:	0022      	movs	r2, r4
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	3243      	adds	r2, #67	@ 0x43
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	2a00      	cmp	r2, #0
 800522a:	d001      	beq.n	8005230 <_printf_common+0x24>
 800522c:	3301      	adds	r3, #1
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	069b      	lsls	r3, r3, #26
 8005234:	d502      	bpl.n	800523c <_printf_common+0x30>
 8005236:	6833      	ldr	r3, [r6, #0]
 8005238:	3302      	adds	r3, #2
 800523a:	6033      	str	r3, [r6, #0]
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	2306      	movs	r3, #6
 8005240:	0015      	movs	r5, r2
 8005242:	401d      	ands	r5, r3
 8005244:	421a      	tst	r2, r3
 8005246:	d027      	beq.n	8005298 <_printf_common+0x8c>
 8005248:	0023      	movs	r3, r4
 800524a:	3343      	adds	r3, #67	@ 0x43
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	4193      	sbcs	r3, r2
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d430      	bmi.n	80052ba <_printf_common+0xae>
 8005258:	0022      	movs	r2, r4
 800525a:	9901      	ldr	r1, [sp, #4]
 800525c:	9800      	ldr	r0, [sp, #0]
 800525e:	9d08      	ldr	r5, [sp, #32]
 8005260:	3243      	adds	r2, #67	@ 0x43
 8005262:	47a8      	blx	r5
 8005264:	3001      	adds	r0, #1
 8005266:	d025      	beq.n	80052b4 <_printf_common+0xa8>
 8005268:	2206      	movs	r2, #6
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	2500      	movs	r5, #0
 800526e:	4013      	ands	r3, r2
 8005270:	2b04      	cmp	r3, #4
 8005272:	d105      	bne.n	8005280 <_printf_common+0x74>
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	68e5      	ldr	r5, [r4, #12]
 8005278:	1aed      	subs	r5, r5, r3
 800527a:	43eb      	mvns	r3, r5
 800527c:	17db      	asrs	r3, r3, #31
 800527e:	401d      	ands	r5, r3
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	6922      	ldr	r2, [r4, #16]
 8005284:	4293      	cmp	r3, r2
 8005286:	dd01      	ble.n	800528c <_printf_common+0x80>
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	18ed      	adds	r5, r5, r3
 800528c:	2600      	movs	r6, #0
 800528e:	42b5      	cmp	r5, r6
 8005290:	d120      	bne.n	80052d4 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e010      	b.n	80052b8 <_printf_common+0xac>
 8005296:	3501      	adds	r5, #1
 8005298:	68e3      	ldr	r3, [r4, #12]
 800529a:	6832      	ldr	r2, [r6, #0]
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	42ab      	cmp	r3, r5
 80052a0:	ddd2      	ble.n	8005248 <_printf_common+0x3c>
 80052a2:	0022      	movs	r2, r4
 80052a4:	2301      	movs	r3, #1
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	9800      	ldr	r0, [sp, #0]
 80052aa:	9f08      	ldr	r7, [sp, #32]
 80052ac:	3219      	adds	r2, #25
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	d1f0      	bne.n	8005296 <_printf_common+0x8a>
 80052b4:	2001      	movs	r0, #1
 80052b6:	4240      	negs	r0, r0
 80052b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052ba:	2030      	movs	r0, #48	@ 0x30
 80052bc:	18e1      	adds	r1, r4, r3
 80052be:	3143      	adds	r1, #67	@ 0x43
 80052c0:	7008      	strb	r0, [r1, #0]
 80052c2:	0021      	movs	r1, r4
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	3145      	adds	r1, #69	@ 0x45
 80052c8:	7809      	ldrb	r1, [r1, #0]
 80052ca:	18a2      	adds	r2, r4, r2
 80052cc:	3243      	adds	r2, #67	@ 0x43
 80052ce:	3302      	adds	r3, #2
 80052d0:	7011      	strb	r1, [r2, #0]
 80052d2:	e7c1      	b.n	8005258 <_printf_common+0x4c>
 80052d4:	0022      	movs	r2, r4
 80052d6:	2301      	movs	r3, #1
 80052d8:	9901      	ldr	r1, [sp, #4]
 80052da:	9800      	ldr	r0, [sp, #0]
 80052dc:	9f08      	ldr	r7, [sp, #32]
 80052de:	321a      	adds	r2, #26
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	d0e6      	beq.n	80052b4 <_printf_common+0xa8>
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7d1      	b.n	800528e <_printf_common+0x82>
	...

080052ec <_printf_i>:
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	b08b      	sub	sp, #44	@ 0x2c
 80052f0:	9206      	str	r2, [sp, #24]
 80052f2:	000a      	movs	r2, r1
 80052f4:	3243      	adds	r2, #67	@ 0x43
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	9005      	str	r0, [sp, #20]
 80052fa:	9203      	str	r2, [sp, #12]
 80052fc:	7e0a      	ldrb	r2, [r1, #24]
 80052fe:	000c      	movs	r4, r1
 8005300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005302:	2a78      	cmp	r2, #120	@ 0x78
 8005304:	d809      	bhi.n	800531a <_printf_i+0x2e>
 8005306:	2a62      	cmp	r2, #98	@ 0x62
 8005308:	d80b      	bhi.n	8005322 <_printf_i+0x36>
 800530a:	2a00      	cmp	r2, #0
 800530c:	d100      	bne.n	8005310 <_printf_i+0x24>
 800530e:	e0ba      	b.n	8005486 <_printf_i+0x19a>
 8005310:	497a      	ldr	r1, [pc, #488]	@ (80054fc <_printf_i+0x210>)
 8005312:	9104      	str	r1, [sp, #16]
 8005314:	2a58      	cmp	r2, #88	@ 0x58
 8005316:	d100      	bne.n	800531a <_printf_i+0x2e>
 8005318:	e08e      	b.n	8005438 <_printf_i+0x14c>
 800531a:	0025      	movs	r5, r4
 800531c:	3542      	adds	r5, #66	@ 0x42
 800531e:	702a      	strb	r2, [r5, #0]
 8005320:	e022      	b.n	8005368 <_printf_i+0x7c>
 8005322:	0010      	movs	r0, r2
 8005324:	3863      	subs	r0, #99	@ 0x63
 8005326:	2815      	cmp	r0, #21
 8005328:	d8f7      	bhi.n	800531a <_printf_i+0x2e>
 800532a:	f7fa fee9 	bl	8000100 <__gnu_thumb1_case_shi>
 800532e:	0016      	.short	0x0016
 8005330:	fff6001f 	.word	0xfff6001f
 8005334:	fff6fff6 	.word	0xfff6fff6
 8005338:	001ffff6 	.word	0x001ffff6
 800533c:	fff6fff6 	.word	0xfff6fff6
 8005340:	fff6fff6 	.word	0xfff6fff6
 8005344:	0036009f 	.word	0x0036009f
 8005348:	fff6007e 	.word	0xfff6007e
 800534c:	00b0fff6 	.word	0x00b0fff6
 8005350:	0036fff6 	.word	0x0036fff6
 8005354:	fff6fff6 	.word	0xfff6fff6
 8005358:	0082      	.short	0x0082
 800535a:	0025      	movs	r5, r4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	3542      	adds	r5, #66	@ 0x42
 8005360:	1d11      	adds	r1, r2, #4
 8005362:	6019      	str	r1, [r3, #0]
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	702b      	strb	r3, [r5, #0]
 8005368:	2301      	movs	r3, #1
 800536a:	e09e      	b.n	80054aa <_printf_i+0x1be>
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	6809      	ldr	r1, [r1, #0]
 8005370:	1d02      	adds	r2, r0, #4
 8005372:	060d      	lsls	r5, r1, #24
 8005374:	d50b      	bpl.n	800538e <_printf_i+0xa2>
 8005376:	6806      	ldr	r6, [r0, #0]
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	2e00      	cmp	r6, #0
 800537c:	da03      	bge.n	8005386 <_printf_i+0x9a>
 800537e:	232d      	movs	r3, #45	@ 0x2d
 8005380:	9a03      	ldr	r2, [sp, #12]
 8005382:	4276      	negs	r6, r6
 8005384:	7013      	strb	r3, [r2, #0]
 8005386:	4b5d      	ldr	r3, [pc, #372]	@ (80054fc <_printf_i+0x210>)
 8005388:	270a      	movs	r7, #10
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	e018      	b.n	80053c0 <_printf_i+0xd4>
 800538e:	6806      	ldr	r6, [r0, #0]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	0649      	lsls	r1, r1, #25
 8005394:	d5f1      	bpl.n	800537a <_printf_i+0x8e>
 8005396:	b236      	sxth	r6, r6
 8005398:	e7ef      	b.n	800537a <_printf_i+0x8e>
 800539a:	6808      	ldr	r0, [r1, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	c940      	ldmia	r1!, {r6}
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d402      	bmi.n	80053aa <_printf_i+0xbe>
 80053a4:	0640      	lsls	r0, r0, #25
 80053a6:	d500      	bpl.n	80053aa <_printf_i+0xbe>
 80053a8:	b2b6      	uxth	r6, r6
 80053aa:	6019      	str	r1, [r3, #0]
 80053ac:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <_printf_i+0x210>)
 80053ae:	270a      	movs	r7, #10
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80053b4:	d100      	bne.n	80053b8 <_printf_i+0xcc>
 80053b6:	3f02      	subs	r7, #2
 80053b8:	0023      	movs	r3, r4
 80053ba:	2200      	movs	r2, #0
 80053bc:	3343      	adds	r3, #67	@ 0x43
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	6863      	ldr	r3, [r4, #4]
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db06      	blt.n	80053d6 <_printf_i+0xea>
 80053c8:	2104      	movs	r1, #4
 80053ca:	6822      	ldr	r2, [r4, #0]
 80053cc:	9d03      	ldr	r5, [sp, #12]
 80053ce:	438a      	bics	r2, r1
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	4333      	orrs	r3, r6
 80053d4:	d00c      	beq.n	80053f0 <_printf_i+0x104>
 80053d6:	9d03      	ldr	r5, [sp, #12]
 80053d8:	0030      	movs	r0, r6
 80053da:	0039      	movs	r1, r7
 80053dc:	f7fa ff20 	bl	8000220 <__aeabi_uidivmod>
 80053e0:	9b04      	ldr	r3, [sp, #16]
 80053e2:	3d01      	subs	r5, #1
 80053e4:	5c5b      	ldrb	r3, [r3, r1]
 80053e6:	702b      	strb	r3, [r5, #0]
 80053e8:	0033      	movs	r3, r6
 80053ea:	0006      	movs	r6, r0
 80053ec:	429f      	cmp	r7, r3
 80053ee:	d9f3      	bls.n	80053d8 <_printf_i+0xec>
 80053f0:	2f08      	cmp	r7, #8
 80053f2:	d109      	bne.n	8005408 <_printf_i+0x11c>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07db      	lsls	r3, r3, #31
 80053f8:	d506      	bpl.n	8005408 <_printf_i+0x11c>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	dc02      	bgt.n	8005408 <_printf_i+0x11c>
 8005402:	2330      	movs	r3, #48	@ 0x30
 8005404:	3d01      	subs	r5, #1
 8005406:	702b      	strb	r3, [r5, #0]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	1b5b      	subs	r3, r3, r5
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	0021      	movs	r1, r4
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	9805      	ldr	r0, [sp, #20]
 8005416:	9b06      	ldr	r3, [sp, #24]
 8005418:	aa09      	add	r2, sp, #36	@ 0x24
 800541a:	f7ff fef7 	bl	800520c <_printf_common>
 800541e:	3001      	adds	r0, #1
 8005420:	d148      	bne.n	80054b4 <_printf_i+0x1c8>
 8005422:	2001      	movs	r0, #1
 8005424:	4240      	negs	r0, r0
 8005426:	b00b      	add	sp, #44	@ 0x2c
 8005428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542a:	2220      	movs	r2, #32
 800542c:	6809      	ldr	r1, [r1, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	2278      	movs	r2, #120	@ 0x78
 8005434:	4932      	ldr	r1, [pc, #200]	@ (8005500 <_printf_i+0x214>)
 8005436:	9104      	str	r1, [sp, #16]
 8005438:	0021      	movs	r1, r4
 800543a:	3145      	adds	r1, #69	@ 0x45
 800543c:	700a      	strb	r2, [r1, #0]
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	c940      	ldmia	r1!, {r6}
 8005444:	0610      	lsls	r0, r2, #24
 8005446:	d402      	bmi.n	800544e <_printf_i+0x162>
 8005448:	0650      	lsls	r0, r2, #25
 800544a:	d500      	bpl.n	800544e <_printf_i+0x162>
 800544c:	b2b6      	uxth	r6, r6
 800544e:	6019      	str	r1, [r3, #0]
 8005450:	07d3      	lsls	r3, r2, #31
 8005452:	d502      	bpl.n	800545a <_printf_i+0x16e>
 8005454:	2320      	movs	r3, #32
 8005456:	4313      	orrs	r3, r2
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	2e00      	cmp	r6, #0
 800545c:	d001      	beq.n	8005462 <_printf_i+0x176>
 800545e:	2710      	movs	r7, #16
 8005460:	e7aa      	b.n	80053b8 <_printf_i+0xcc>
 8005462:	2220      	movs	r2, #32
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	4393      	bics	r3, r2
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	e7f8      	b.n	800545e <_printf_i+0x172>
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	680d      	ldr	r5, [r1, #0]
 8005470:	1d10      	adds	r0, r2, #4
 8005472:	6949      	ldr	r1, [r1, #20]
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	062e      	lsls	r6, r5, #24
 800547a:	d501      	bpl.n	8005480 <_printf_i+0x194>
 800547c:	6019      	str	r1, [r3, #0]
 800547e:	e002      	b.n	8005486 <_printf_i+0x19a>
 8005480:	066d      	lsls	r5, r5, #25
 8005482:	d5fb      	bpl.n	800547c <_printf_i+0x190>
 8005484:	8019      	strh	r1, [r3, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	9d03      	ldr	r5, [sp, #12]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	e7bf      	b.n	800540e <_printf_i+0x122>
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	1d11      	adds	r1, r2, #4
 8005492:	6019      	str	r1, [r3, #0]
 8005494:	6815      	ldr	r5, [r2, #0]
 8005496:	2100      	movs	r1, #0
 8005498:	0028      	movs	r0, r5
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	f000 f844 	bl	8005528 <memchr>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d001      	beq.n	80054a8 <_printf_i+0x1bc>
 80054a4:	1b40      	subs	r0, r0, r5
 80054a6:	6060      	str	r0, [r4, #4]
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	6123      	str	r3, [r4, #16]
 80054ac:	2300      	movs	r3, #0
 80054ae:	9a03      	ldr	r2, [sp, #12]
 80054b0:	7013      	strb	r3, [r2, #0]
 80054b2:	e7ac      	b.n	800540e <_printf_i+0x122>
 80054b4:	002a      	movs	r2, r5
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	9906      	ldr	r1, [sp, #24]
 80054ba:	9805      	ldr	r0, [sp, #20]
 80054bc:	9d07      	ldr	r5, [sp, #28]
 80054be:	47a8      	blx	r5
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0ae      	beq.n	8005422 <_printf_i+0x136>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d415      	bmi.n	80054f6 <_printf_i+0x20a>
 80054ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054cc:	68e0      	ldr	r0, [r4, #12]
 80054ce:	4298      	cmp	r0, r3
 80054d0:	daa9      	bge.n	8005426 <_printf_i+0x13a>
 80054d2:	0018      	movs	r0, r3
 80054d4:	e7a7      	b.n	8005426 <_printf_i+0x13a>
 80054d6:	0022      	movs	r2, r4
 80054d8:	2301      	movs	r3, #1
 80054da:	9906      	ldr	r1, [sp, #24]
 80054dc:	9805      	ldr	r0, [sp, #20]
 80054de:	9e07      	ldr	r6, [sp, #28]
 80054e0:	3219      	adds	r2, #25
 80054e2:	47b0      	blx	r6
 80054e4:	3001      	adds	r0, #1
 80054e6:	d09c      	beq.n	8005422 <_printf_i+0x136>
 80054e8:	3501      	adds	r5, #1
 80054ea:	68e3      	ldr	r3, [r4, #12]
 80054ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	42ab      	cmp	r3, r5
 80054f2:	dcf0      	bgt.n	80054d6 <_printf_i+0x1ea>
 80054f4:	e7e9      	b.n	80054ca <_printf_i+0x1de>
 80054f6:	2500      	movs	r5, #0
 80054f8:	e7f7      	b.n	80054ea <_printf_i+0x1fe>
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	08007df5 	.word	0x08007df5
 8005500:	08007e06 	.word	0x08007e06

08005504 <_sbrk_r>:
 8005504:	2300      	movs	r3, #0
 8005506:	b570      	push	{r4, r5, r6, lr}
 8005508:	4d06      	ldr	r5, [pc, #24]	@ (8005524 <_sbrk_r+0x20>)
 800550a:	0004      	movs	r4, r0
 800550c:	0008      	movs	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fc fdea 	bl	80020e8 <_sbrk>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d103      	bne.n	8005520 <_sbrk_r+0x1c>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d000      	beq.n	8005520 <_sbrk_r+0x1c>
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	20000674 	.word	0x20000674

08005528 <memchr>:
 8005528:	b2c9      	uxtb	r1, r1
 800552a:	1882      	adds	r2, r0, r2
 800552c:	4290      	cmp	r0, r2
 800552e:	d101      	bne.n	8005534 <memchr+0xc>
 8005530:	2000      	movs	r0, #0
 8005532:	4770      	bx	lr
 8005534:	7803      	ldrb	r3, [r0, #0]
 8005536:	428b      	cmp	r3, r1
 8005538:	d0fb      	beq.n	8005532 <memchr+0xa>
 800553a:	3001      	adds	r0, #1
 800553c:	e7f6      	b.n	800552c <memchr+0x4>

0800553e <_realloc_r>:
 800553e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005540:	0006      	movs	r6, r0
 8005542:	000c      	movs	r4, r1
 8005544:	0015      	movs	r5, r2
 8005546:	2900      	cmp	r1, #0
 8005548:	d105      	bne.n	8005556 <_realloc_r+0x18>
 800554a:	0011      	movs	r1, r2
 800554c:	f7ff fc70 	bl	8004e30 <_malloc_r>
 8005550:	0004      	movs	r4, r0
 8005552:	0020      	movs	r0, r4
 8005554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005556:	2a00      	cmp	r2, #0
 8005558:	d103      	bne.n	8005562 <_realloc_r+0x24>
 800555a:	f7ff fbfd 	bl	8004d58 <_free_r>
 800555e:	002c      	movs	r4, r5
 8005560:	e7f7      	b.n	8005552 <_realloc_r+0x14>
 8005562:	f000 f81c 	bl	800559e <_malloc_usable_size_r>
 8005566:	0007      	movs	r7, r0
 8005568:	4285      	cmp	r5, r0
 800556a:	d802      	bhi.n	8005572 <_realloc_r+0x34>
 800556c:	0843      	lsrs	r3, r0, #1
 800556e:	42ab      	cmp	r3, r5
 8005570:	d3ef      	bcc.n	8005552 <_realloc_r+0x14>
 8005572:	0029      	movs	r1, r5
 8005574:	0030      	movs	r0, r6
 8005576:	f7ff fc5b 	bl	8004e30 <_malloc_r>
 800557a:	9001      	str	r0, [sp, #4]
 800557c:	2800      	cmp	r0, #0
 800557e:	d101      	bne.n	8005584 <_realloc_r+0x46>
 8005580:	9c01      	ldr	r4, [sp, #4]
 8005582:	e7e6      	b.n	8005552 <_realloc_r+0x14>
 8005584:	002a      	movs	r2, r5
 8005586:	42bd      	cmp	r5, r7
 8005588:	d900      	bls.n	800558c <_realloc_r+0x4e>
 800558a:	003a      	movs	r2, r7
 800558c:	0021      	movs	r1, r4
 800558e:	9801      	ldr	r0, [sp, #4]
 8005590:	f7ff fbd8 	bl	8004d44 <memcpy>
 8005594:	0021      	movs	r1, r4
 8005596:	0030      	movs	r0, r6
 8005598:	f7ff fbde 	bl	8004d58 <_free_r>
 800559c:	e7f0      	b.n	8005580 <_realloc_r+0x42>

0800559e <_malloc_usable_size_r>:
 800559e:	1f0b      	subs	r3, r1, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	1f18      	subs	r0, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da01      	bge.n	80055ac <_malloc_usable_size_r+0xe>
 80055a8:	580b      	ldr	r3, [r1, r0]
 80055aa:	18c0      	adds	r0, r0, r3
 80055ac:	4770      	bx	lr
	...

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
